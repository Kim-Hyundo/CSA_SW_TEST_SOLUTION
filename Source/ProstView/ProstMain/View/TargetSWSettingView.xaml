<UserControl x:Class="ProstMain.View.TargetSWSettingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"
             xmlns:dragablz="http://dragablz.net/winfx/xaml/dragablz"
             xmlns:fileTreeview="clr-namespace:Javi.ExplorerTreeView;assembly=Javi.ExplorerTreeView"
             xmlns:mde="clr-namespace:MaterialDesignExtensions.Controls;assembly=MaterialDesignExtensions"
             xmlns:avalonedit="http://icsharpcode.net/sharpdevelop/avalonedit"
             xmlns:utils="clr-namespace:ProstMain.Util"
             mc:Ignorable="d" 
             DataContext="{Binding Source={StaticResource Locator},Path=TargetSWSettingVM}">
    <UserControl.Resources>
        <utils:ProgressVisibleConvert x:Key="progressvisibleconvert"/>
        <utils:IncludePathDisplayConvert x:Key="IncludePathDisplayConvert"/>
        <utils:PathFullNameConvert x:Key="PathFullNameConvert"/>
        <utils:NoneVisibleConvert x:Key="NoneVisibleConvert"/>
    </UserControl.Resources>
    <Grid>
        <dragablz:TabablzControl VerticalAlignment="Stretch"   Margin="-1,0,-3,0" Grid.Column="2" Grid.Row="0" Background="{DynamicResource ResourceKey=StandardBackground}">
            <TabItem Header="SOURCE CODE">
                <Grid>
                    <Grid.Resources>
                        <fileTreeview:ExplorerTreeViewImageConverter x:Key="ExplorerTreeViewImageConverter"/>
                        <utils:ExploreTreeViewCopyPathConvert x:Key="ExploreTreeViewCopyPathConvert"/>
                    </Grid.Resources>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="4*"/>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="4*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1*"/>
                        <RowDefinition Height="1*"/>
                        <RowDefinition Height="8*"/>
                    </Grid.RowDefinitions>
                    <materialDesign:ColorZone Mode="PrimaryMid" CornerRadius="8" Grid.Row="0" Grid.Column="0" VerticalAlignment="Stretch" Margin="3">
                        <Grid VerticalAlignment="Center">
                            <TextBlock FontSize="16"  Text="Source Code" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}" VerticalAlignment="Center" TextAlignment="Center"/>
                        </Grid>
                    </materialDesign:ColorZone>

                    <Rectangle Grid.Row="1" Grid.Column="0" Margin="3,0,3,3" Stroke="{DynamicResource ResourceKey=PrimaryHueMidBrush}" StrokeThickness="2"/>

                    <Canvas ClipToBounds="True" Name="CANVAS_SourceCodePath" Height="25"  Grid.Row="1" Margin="10,0,10,0" MouseMove="CANVAS_SourceCodePath_MouseMove" MouseLeave="CANVAS_SourceCodePath_MouseLeave">
                        <TextBlock Canvas.Top="0" Foreground="{DynamicResource ResourceKey=StandardTextForeground}" FontSize="13" TextWrapping="Wrap" x:Name="TEXTBLOCK_SourceCodePath" Text="{Binding TargetSWSettingModel.SourceCodePath}"/>
                    </Canvas>

                    <fileTreeview:ExplorerTreeView Sort="True" Name="project_treeview" Grid.Row="2"  Root="Custom" CustomPath="{Binding TargetSWSettingModel.SourceCodePath}" Background="{DynamicResource ResourceKey=StandardBackground}" AllowDrop="True" MouseMove="project_treeview_MouseMove" CopyDic="{Binding TargetSWSettingModel.CopyDictionary, UpdateSourceTrigger=PropertyChanged}" SelectedExplorerTreeViewItem="{Binding TargetSWSettingModel.SelectTreeViewItem,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" WorkSpacePath="{Binding Source={StaticResource Locator},Path=WorkSpaceVM.WorkSpaceModel.WorkSpacePath}" SourceCodePath="{Binding TargetSWSettingModel.SourceCodeRootPath}">
                        <fileTreeview:ExplorerTreeView.InputBindings>
                            <KeyBinding Key="Delete" Command="{Binding Source={StaticResource Locator},Path=TargetSWSettingVM.DeleteFileFolderCommand}"/>
                        </fileTreeview:ExplorerTreeView.InputBindings>
                        <fileTreeview:ExplorerTreeView.Resources>
                            <Style TargetType="{x:Type fileTreeview:ExplorerTreeViewItem}" BasedOn="{StaticResource MaterialDesignTreeViewItem}">
                                <Setter Property="HeaderTemplate">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal" Height="16">
                                                <Image Width="24" Height="24" StretchDirection="DownOnly" Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fileTreeview:ExplorerTreeViewItem}, Converter={StaticResource ExplorerTreeViewImageConverter}}"/>
                                                <TextBlock Text="{Binding}" Margin="5,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource ResourceKey=StandardTextForeground}"/>
                                                <TextBlock Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fileTreeview:ExplorerTreeViewItem}, Converter={StaticResource ExploreTreeViewCopyPathConvert},UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" Foreground="Gray" Margin="5,0,0,0" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Foreground" Value="White"/>
                                
                                
                                <EventSetter Event="Drop" Handler="treeView_Drop"/>
                                

                            </Style>
                        </fileTreeview:ExplorerTreeView.Resources>
                    </fileTreeview:ExplorerTreeView>

                    <Grid Grid.Row="0" Grid.Column="2" Grid.RowSpan="3">
                        <dragablz:TabablzControl VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="-1,0,-3,0" Background="{DynamicResource ResourceKey=StandardBackground}">
                            <TabItem>
                                <TabItem.Header>
                                    <TextBlock Text="Workspace Path" Width="155" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}" TextAlignment="Center"/>
                                </TabItem.Header>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="1*"/>
                                        <RowDefinition Height="9*"/>
                                    </Grid.RowDefinitions>
                                    <Canvas ClipToBounds="True" Name="CANVAS_LocalPath" Height="25"  Margin="10,0,10,3" MouseMove="CANVAS_LocalPath_MouseMove" MouseLeave="CANVAS_LocalPath_MouseLeave">
                                        <TextBlock Canvas.Top="0" Foreground="{DynamicResource ResourceKey=StandardTextForeground}" FontSize="13" TextWrapping="Wrap" x:Name="TEXTBLOCK_LocalPath" Text="{Binding TargetSWSettingModel.WorkspaceRootPath}"/>
                                    </Canvas>
                                    <Rectangle Grid.Row="0" Margin="3,0,3,3" Stroke="{DynamicResource ResourceKey=PrimaryHueMidBrush}" StrokeThickness="2"/>
                                    <fileTreeview:ExplorerTreeView Sort="True" Name="local_treeview" Grid.Row="1" Root="Custom" CustomPath="{Binding TargetSWSettingModel.WorkspaceRootPath}" Background="{DynamicResource ResourceKey=StandardBackground}" AllowDrop="True">
                                        <fileTreeview:ExplorerTreeView.Resources>
                                            <Style TargetType="{x:Type fileTreeview:ExplorerTreeViewItem}" BasedOn="{StaticResource MaterialDesignTreeViewItem}">
                                                <Setter Property="HeaderTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <StackPanel Orientation="Horizontal" Height="16">
                                                                <Image Width="24" Height="24" StretchDirection="DownOnly" Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fileTreeview:ExplorerTreeViewItem}, Converter={StaticResource ExplorerTreeViewImageConverter}}"/>
                                                                <TextBlock Text="{Binding}" Margin="5,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource ResourceKey=StandardTextForeground}"/>
                                                                <TextBlock Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fileTreeview:ExplorerTreeViewItem}, Converter={StaticResource ExploreTreeViewCopyPathConvert}}" VerticalAlignment="Center" Foreground="Gray" Margin="5,0,0,0" />
                                                            </StackPanel>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Foreground" Value="White"/>
                                                <EventSetter Event="DragOver" Handler="treeView_DragOver"/>
                                                <EventSetter Event="Drop" Handler="treeView_Drop"/>
                                                <EventSetter Event="MouseMove" Handler="treeView_MouseMove"/>
                                            </Style>
                                        </fileTreeview:ExplorerTreeView.Resources>
                                    </fileTreeview:ExplorerTreeView>
                                </Grid>
                            </TabItem>
                            <TabItem>
                                <TabItem.Header>
                                    <TextBlock Text="Source Code Path" Width="155" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}" TextAlignment="Center"/>
                                </TabItem.Header>
                                <Grid Grid.Row="1">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="1*"/>
                                        <RowDefinition Height="9*"/>
                                    </Grid.RowDefinitions>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="7*"/>
                                        <ColumnDefinition Width="3*"/>
                                    </Grid.ColumnDefinitions>

                                    <Canvas ClipToBounds="True" Name="CANVAS_TargetSourcepath" Height="25"  Margin="10,0,10,3" MouseMove="CANVAS_TargetSourcepath_MouseMove" MouseLeave="CANVAS_TargetSourcepath_MouseLeave">
                                            <TextBlock Canvas.Top="0" Foreground="{DynamicResource ResourceKey=StandardTextForeground}" FontSize="13" TextWrapping="Wrap" x:Name="TEXTBLOCK_TargetSourcepath" Text="{Binding TargetSWSettingModel.SourceCodeRootPath}"/>
                                        </Canvas>
                                    <Button VerticalAlignment="Center" Margin="5,0,5,3" Grid.Column="1" Background="{DynamicResource ButtonBackground}" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Command="{Binding SoruceCodeRootPathBrowserCommand}" Height="Auto">
                                        <Button.Content>
                                            <materialDesign:PackIcon Kind="FolderSearchOutline" Width="20" Height="20" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Button.Content>
                                    </Button>
                                    <Rectangle Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="3,0,3,3" Stroke="{DynamicResource ResourceKey=PrimaryHueMidBrush}" StrokeThickness="2"/>
                                    <fileTreeview:ExplorerTreeView  Sort="True" Name="target_treeview" Grid.Row="1" Grid.ColumnSpan="2" Root="Custom" CustomPath="{Binding TargetSWSettingModel.SourceCodeRootPath}" Background="{DynamicResource ResourceKey=StandardBackground}" AllowDrop="True">
                                        <fileTreeview:ExplorerTreeView.Resources>
                                            <Style TargetType="{x:Type fileTreeview:ExplorerTreeViewItem}" BasedOn="{StaticResource MaterialDesignTreeViewItem}">
                                                <Setter Property="HeaderTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <StackPanel Orientation="Horizontal" Height="16">
                                                                <Image Width="24" Height="24" StretchDirection="DownOnly" Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fileTreeview:ExplorerTreeViewItem}, Converter={StaticResource ExplorerTreeViewImageConverter}}"/>
                                                                <TextBlock Text="{Binding}" Margin="5,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource ResourceKey=StandardTextForeground}"/>
                                                                <TextBlock Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fileTreeview:ExplorerTreeViewItem}, Converter={StaticResource ExploreTreeViewCopyPathConvert}}" VerticalAlignment="Center" Foreground="Gray" Margin="5,0,0,0" />
                                                            </StackPanel>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Foreground" Value="White"/>
                                                <EventSetter Event="DragOver" Handler="treeView_DragOver_RootPath"/>
                                                <EventSetter Event="Drop" Handler="treeView_Drop_RootPath"/>
                                                <EventSetter Event="MouseMove" Handler="treeView_MouseMove_RootPath"/>
                                            </Style>
                                        </fileTreeview:ExplorerTreeView.Resources>
                                    </fileTreeview:ExplorerTreeView>
                                </Grid>
                            </TabItem>
                        </dragablz:TabablzControl>
                      
                    </Grid>



                    <StackPanel Grid.Column="1" Grid.Row="2" Margin="3">
                        <Button Background="{DynamicResource ResourceKey=ButtonBackground}" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Command="{Binding CreateFolderCommand}">New</Button>
                        <Button Background="{DynamicResource ResourceKey=ButtonBackground}" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Command="{Binding DeleteFileFolderCommand}">Delete</Button>
                        <Button Background="{DynamicResource ResourceKey=ButtonBackground}" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Command="{Binding RefreshFileFolderCommand}">Refresh</Button>
                    </StackPanel>

                    <Rectangle Grid.Row="2" Grid.Column="0" StrokeThickness="7" Stroke="Transparent">
                        <Rectangle.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Source={StaticResource Locator},Path=TargetSWSettingVM.TargetSWSettingModel.IsVisibleTestCodePathGuild}" Value="True">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <ColorAnimation Storyboard.TargetProperty="Stroke.Color" From="Transparent" To="Red" Duration="0:0:0.3" AutoReverse="True" RepeatBehavior="Forever" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard FillBehavior="Stop">
                                                    <ColorAnimation Storyboard.TargetProperty="Stroke.Color" To="Transparent" Duration="0:0:0.1"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Rectangle.Style>
                    </Rectangle>
                </Grid>
            </TabItem>
            <TabItem Header="LIBRARY/INCLUDE PATH">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1*"/>
                        <RowDefinition Height="1*"/>
                    </Grid.RowDefinitions>

                    <GroupBox>
                        <GroupBox.Header>
                            <DockPanel LastChildFill="False">
                                <TextBlock Text="INCLUDE PATH REGIST" VerticalAlignment="Center" FontSize="13" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}"/>
                                <Button DockPanel.Dock="Right" Background="{DynamicResource ResourceKey=ButtonBackground}" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Command="{Binding IncludePathAddCommand}">
                                    <Button.Content>
                                        <materialDesign:PackIcon Kind="Plus"/>
                                    </Button.Content>
                                </Button>
                            </DockPanel>
                        </GroupBox.Header>
                        <Grid>
                            <ListView Name="IncludePathListView" ItemsSource="{Binding TargetSWSettingModel.IncludePathList}" SelectedIndex="{Binding TargetSWSettingModel.IncludePathSelectedIndex}" >
                                <ListView.InputBindings>
                                    <KeyBinding Key="Delete" Command="{Binding Source={StaticResource Locator},Path=TargetSWSettingVM.IncludePathContextRemovePathCommand}" CommandParameter="{Binding ElementName=IncludePathListView,Path=SelectedItems}"/>
                                </ListView.InputBindings>
                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Converter={StaticResource IncludePathDisplayConvert}}">
                                            <TextBlock.ContextMenu>
                                                <ContextMenu Background="{DynamicResource ResourceKey=ContextMenuBackground}" Name="contextmenu">
                                                    <MenuItem Header="Edit Path" Command="{Binding Source={StaticResource Locator},Path=TargetSWSettingVM.IncludePathContextEditPathCommand}" CommandParameter="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                                                </ContextMenu>
                                            </TextBlock.ContextMenu>
                                        </TextBlock>
                                    </DataTemplate>
                                </ListView.ItemTemplate>

                            </ListView>
                        </Grid>
                    </GroupBox>
                    <GroupBox Grid.Row="1">
                        <GroupBox.Header>
                            <DockPanel LastChildFill="False">
                                <TextBlock Text="LIBRARY REGIST" VerticalAlignment="Center" FontSize="13" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}"/>
                                <Button DockPanel.Dock="Right" Background="{DynamicResource ResourceKey=ButtonBackground}" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Command="{Binding LibraryRegistAddCommand}">
                                    <Button.Content>
                                        <materialDesign:PackIcon Kind="Plus"/>
                                    </Button.Content>
                                </Button>
                            </DockPanel>
                        </GroupBox.Header>
                        <Grid>
                            <ListView ItemsSource="{Binding TargetSWSettingModel.LibraryPathList}" SelectedIndex="{Binding TargetSWSettingModel.LibraryPathSelectedIndex}">
                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding .}">
                                            <TextBlock.ContextMenu>
                                                <ContextMenu Background="{DynamicResource ResourceKey=ContextMenuBackground}">
                                                    <MenuItem Header="Remove Regist" Command="{Binding Source={StaticResource Locator},Path=TargetSWSettingVM.LibraryRegistRemoveCommand}" CommandParameter="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                                                </ContextMenu>
                                            </TextBlock.ContextMenu>
                                        </TextBlock>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                        </Grid>
                    </GroupBox>
                </Grid>
            </TabItem>
            <TabItem Header="RUNNABLE">
                <Grid HorizontalAlignment="Stretch">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1.5*"/>
                        <RowDefinition Height="8.5*"/>
                    </Grid.RowDefinitions>
                    <DataGrid Name="Runnable_DataGrid" AutoGenerateColumns="False" Grid.Row="1" BorderBrush="{DynamicResource ResourceKey=PrimaryHueMidBrush}" BorderThickness="2" Margin="3,0,3,0" ItemsSource="{Binding TargetSWSettingModel.RunnableList, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" materialDesign:DataGridAssist.ColumnHeaderPadding="2" CanUserAddRows="False" Background="{DynamicResource ResourceKey=DataGridBackGround}" CanUserDeleteRows="False" SelectedItem="{Binding TargetSWSettingModel.SelectRunnable}">
                        <DataGrid.InputBindings>
                            <KeyBinding Key="Delete" Command="{Binding DeleteRunnableCommand}"/>
                        </DataGrid.InputBindings>
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Function Name" Binding="{Binding RunnableNameGrid,TargetNullValue=(Input Function Name)}" Width="2*" HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                            <DataGridTextColumn Header="Period" Binding="{Binding RunnableCycleGrid}" Width="1.5*" HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                            <DataGridTextColumn Header="Core" Binding="{Binding RunnableCoreGrid}" Width="1.5*"  HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                            <DataGridTextColumn Header="Header" Binding="{Binding RunnableHeader}" Width="1.5*" HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                        </DataGrid.Columns>
                    </DataGrid>
                    <Rectangle Stroke="Red" Grid.Row="4" Grid.Column="2" Grid.ColumnSpan="4" StrokeThickness="4" Visibility="{Binding TargetSWSettingModel.RunnableEmptyData}"/>

                    <materialDesign:ColorZone Mode="PrimaryMid" Grid.Row="0"  VerticalAlignment="Stretch" Margin="3" Background="{DynamicResource ResourceKey=GroupBoxHeaderGradient}">
                        <Grid VerticalAlignment="Center">
                            <Label FontSize="15" Content="Runnable Setting" Margin="2" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}" HorizontalAlignment="Center"/>
                            <materialDesign:PopupBox HorizontalAlignment="Right" Margin="0,0,10,0" StaysOpen="True" Padding="0" Name="popupbox_runnable">
                                <materialDesign:PopupBox.ToggleContent>
                                    <materialDesign:PackIcon Kind="Plus" Width="20" Height="20" Foreground="White"/>
                                </materialDesign:PopupBox.ToggleContent>
                                <Grid Background="DarkGray" Width="300" Height="250" >
                                    <GroupBox Header="Add Runnable">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="1*"/>
                                                <RowDefinition Height="1*"/>
                                                <RowDefinition Height="1*"/>
                                                <RowDefinition Height="1*"/>
                                                <RowDefinition Height="1*"/>
                                            </Grid.RowDefinitions>

                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="2*"/>
                                                <ColumnDefinition Width="1*"/>
                                                <ColumnDefinition Width="1*"/>
                                                <ColumnDefinition Width="1*"/>
                                            </Grid.ColumnDefinitions>

                                            <Label Content="Runnable Call" Foreground="Black" VerticalAlignment="Center"></Label>
                                            <TextBox Text="{Binding TargetSWSettingModel.InputRunnableCall}" Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="3" wpf:HintAssist.Hint="Input Function Name" HorizontalAlignment="Stretch" Foreground="Black" FontSize="14" VerticalAlignment="Center"/>

                                            <Label Grid.Row="1" Content="Period" Foreground="Black" VerticalAlignment="Center"></Label>
                                            <TextBox Text="{Binding TargetSWSettingModel.InputCallCycle}" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" wpf:HintAssist.Hint="Input Call Cycle" HorizontalAlignment="Stretch" Foreground="Black" FontSize="14" VerticalAlignment="Center"/>

                                            <Label Grid.Row="2" Content="Core Mapping" Foreground="Black" VerticalAlignment="Center"></Label>
                                            <ComboBox  Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" SelectedItem="{Binding TargetSWSettingModel.InputCore}" ItemsSource="{Binding Source={StaticResource Locator},Path=TargetHWSettingVM.CoreNameList}" VerticalAlignment="Center" Foreground="Black" FontSize="14" Background="DarkGray" >
                                                <ComboBox.ItemContainerStyle>
                                                    <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource MaterialDesignComboBoxItemStyle}">
                                                        <Setter Property="Background" Value="White" />
                                                        <Style.Triggers>
                                                            <Trigger Property="IsSelected" Value="True">
                                                                <Setter Property="Background" Value="Red" />
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </ComboBox.ItemContainerStyle>
                                            </ComboBox>
                                            <Label Grid.Row="3" Content="Header" Foreground="Black" VerticalAlignment="Center"></Label>
                                            <TextBox Text="{Binding TargetSWSettingModel.InputHeader}" Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="3" wpf:HintAssist.Hint="Input Header" HorizontalAlignment="Stretch" Foreground="Black" FontSize="14" VerticalAlignment="Center"/>

                                            <Grid Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="4">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="5*"/>
                                                    <ColumnDefinition Width="5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Button Style="{StaticResource MaterialDesignRaisedButton}" Grid.Column="0" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Background="{DynamicResource ResourceKey=ButtonBackground}" Width="130" Margin="0,0,5,0" Command="{Binding AddRunnableOKCommand}" Click="Runnable_Add_Click">추가</Button>
                                                <Button Style="{StaticResource MaterialDesignRaisedButton}" Grid.Column="1" Background="{DynamicResource ResourceKey=ButtonBackground}" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Width="130" Margin="5,0,0,0" Command="{x:Static materialDesign:PopupBox.ClosePopupCommand}">취소</Button>
                                            </Grid>
                                        </Grid>
                                    </GroupBox>
                                </Grid>
                            </materialDesign:PopupBox>
                        </Grid>
                    </materialDesign:ColorZone>
                </Grid>
                
            </TabItem>
            <TabItem Header="STUB">
                <Grid HorizontalAlignment="Stretch">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1.5*"/>
                        <RowDefinition Height="8.5*"/>
                    </Grid.RowDefinitions>
                    <materialDesign:ColorZone Mode="PrimaryMid" Grid.Row="0"  VerticalAlignment="Stretch" Margin="3" Background="{DynamicResource ResourceKey=GroupBoxHeaderGradient}">
                        <Grid VerticalAlignment="Center">
                            <Label FontSize="15" Content="Stub Setting" Margin="2" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}" HorizontalAlignment="Center"/>
                            <materialDesign:PopupBox HorizontalAlignment="Right" Margin="0,0,10,0" StaysOpen="True" Padding="0"  Name="popupbox_stub">
                                <materialDesign:PopupBox.ToggleContent>
                                    <materialDesign:PackIcon Kind="Plus" Width="20" Height="20" Foreground="White"/>
                                </materialDesign:PopupBox.ToggleContent>
                                <Grid Background="DarkGray" Width="300" Height="250" >
                                    <GroupBox Header="Add Stub">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="1*"/>
                                                <RowDefinition Height="1*"/>
                                                <RowDefinition Height="1*"/>
                                                <RowDefinition Height="1*"/>
                                            </Grid.RowDefinitions>

                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="2*"/>
                                                <ColumnDefinition Width="1*"/>
                                                <ColumnDefinition Width="1*"/>
                                                <ColumnDefinition Width="1*"/>
                                            </Grid.ColumnDefinitions>

                                            <Label Content="Function Name" Foreground="Black" VerticalAlignment="Center"></Label>
                                            <TextBox Text="{Binding TargetSWSettingModel.InputStubFunctionName}" Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="3" wpf:HintAssist.Hint="Input Function Name" HorizontalAlignment="Stretch" Foreground="Black" FontSize="14" VerticalAlignment="Center"/>

                                            <Label Grid.Row="1" Content="Delay" Foreground="Black" VerticalAlignment="Center"></Label>
                                            <TextBox Text="{Binding TargetSWSettingModel.InputStubDelay}" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" wpf:HintAssist.Hint="Input Delay" HorizontalAlignment="Stretch" Foreground="Black" FontSize="14" VerticalAlignment="Center"/>

                                            <Label Grid.Row="2" Content="Return Value" Foreground="Black" VerticalAlignment="Center"></Label>
                                            <TextBox Text="{Binding TargetSWSettingModel.InputStubReturnValue}" Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" wpf:HintAssist.Hint="Input Return Value" HorizontalAlignment="Stretch" Foreground="Black" FontSize="14" VerticalAlignment="Center"/>


                                            <Grid Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="4">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="5*"/>
                                                    <ColumnDefinition Width="5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Button Style="{StaticResource MaterialDesignRaisedButton}" Grid.Column="0" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Background="{DynamicResource ResourceKey=ButtonBackground}" Width="130" Margin="0,0,5,0" Command="{Binding AddStubOKCommand}" Click="Stub_Add_Click">추가</Button>
                                                <Button Style="{StaticResource MaterialDesignRaisedButton}" Grid.Column="1" Background="{DynamicResource ResourceKey=ButtonBackground}" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Width="130" Margin="5,0,0,0" Command="{x:Static materialDesign:PopupBox.ClosePopupCommand}">취소</Button>
                                            </Grid>
                                        </Grid>
                                    </GroupBox>
                                </Grid>
                            </materialDesign:PopupBox>
                        </Grid>
                    </materialDesign:ColorZone>

                    <DataGrid AutoGenerateColumns="False" Grid.Row="1" BorderBrush="{DynamicResource ResourceKey=PrimaryHueMidBrush}" BorderThickness="2" Margin="3,0,3,0" ItemsSource="{Binding TargetSWSettingModel.RunnableStubList,UpdateSourceTrigger=PropertyChanged}" materialDesign:DataGridAssist.ColumnHeaderPadding="2" CanUserAddRows="False"  Background="{DynamicResource ResourceKey=DataGridBackGround}" CanUserDeleteRows="False" SelectedItem="{Binding TargetSWSettingModel.SelectStub}">
                        <DataGrid.InputBindings>
                            <KeyBinding Key="Delete" Command="{Binding DeleteStubCommand}"/>
                        </DataGrid.InputBindings>
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Function Name" Binding="{Binding RunnableSTUBFunctionGrid}" Width="5*" HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                            <DataGridTextColumn Header="Delay" Binding="{Binding RunnableSTUBDelayGrid}" Width="2*" HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                            <DataGridTextColumn Header="Return Value" Binding="{Binding RunnableSTUBReturnGrid}" Width="3*" HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="REGISTER">
                <Grid HorizontalAlignment="Stretch">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1.5*"/>
                        <RowDefinition Height="8.5*"/>
                    </Grid.RowDefinitions>
                    <materialDesign:ColorZone Mode="PrimaryMid" Grid.Row="0"  VerticalAlignment="Stretch" Margin="3" Background="{DynamicResource ResourceKey=GroupBoxHeaderGradient}">
                        <Grid VerticalAlignment="Center">
                            <Label FontSize="15" Content="Register Setting" Margin="2" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}" HorizontalAlignment="Center"/>
                            <Button Background="Transparent"  BorderBrush="Transparent" Command="{Binding ImportRegisterSettingCommand }" HorizontalAlignment="Left">
                                <materialDesign:PackIcon Kind="FileDownload" Width="20" Height="20"/>
                            </Button>
                            <materialDesign:PopupBox HorizontalAlignment="Right" Margin="0,0,10,0" StaysOpen="True" Padding="0"  Name="popupbox_register">
                                <materialDesign:PopupBox.ToggleContent>
                                    <materialDesign:PackIcon Kind="Plus" Width="20" Height="20" Foreground="White"/>
                                </materialDesign:PopupBox.ToggleContent>
                                <Grid Background="DarkGray" Width="300" Height="250" >
                                    <GroupBox Header="Add Register">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="1*"/>
                                                <RowDefinition Height="1*"/>
                                                <RowDefinition Height="1*"/>
                                            </Grid.RowDefinitions>

                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="2*"/>
                                                <ColumnDefinition Width="1*"/>
                                                <ColumnDefinition Width="1*"/>
                                                <ColumnDefinition Width="1*"/>
                                            </Grid.ColumnDefinitions>

                                            <Label Content="Register Name" Foreground="Black" VerticalAlignment="Center"></Label>
                                            <TextBox Text="{Binding TargetSWSettingModel.InputRegisterName}" Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="3" wpf:HintAssist.Hint="Input Function Name" HorizontalAlignment="Stretch" Foreground="Black" FontSize="14" VerticalAlignment="Center"/>

                                            <Label Grid.Row="1" Content="Register Value" Foreground="Black" VerticalAlignment="Center"></Label>
                                            <TextBox Text="{Binding TargetSWSettingModel.InputRegisterValue}" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" wpf:HintAssist.Hint="Input Delay" HorizontalAlignment="Stretch" Foreground="Black" FontSize="14" VerticalAlignment="Center"/>

                                            <Grid Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="4">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="5*"/>
                                                    <ColumnDefinition Width="5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Button Style="{StaticResource MaterialDesignRaisedButton}" Grid.Column="0" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Background="{DynamicResource ResourceKey=ButtonBackground}" Width="130" Margin="0,0,5,0" Command="{Binding AddRegisterOKCommand}" Click="Register_Add_Click">추가</Button>
                                                <Button Style="{StaticResource MaterialDesignRaisedButton}" Grid.Column="1" Background="{DynamicResource ResourceKey=ButtonBackground}" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Width="130" Margin="5,0,0,0" Command="{x:Static materialDesign:PopupBox.ClosePopupCommand}">취소</Button>
                                            </Grid>
                                        </Grid>
                                    </GroupBox>
                                </Grid>
                            </materialDesign:PopupBox>
                        </Grid>
                    </materialDesign:ColorZone>

                    <DataGrid AutoGenerateColumns="False" Grid.Row="1" BorderBrush="{DynamicResource ResourceKey=PrimaryHueMidBrush}" BorderThickness="2" Margin="3,0,3,0" ItemsSource="{Binding TargetSWSettingModel.RegisterList,UpdateSourceTrigger=PropertyChanged}" materialDesign:DataGridAssist.ColumnHeaderPadding="2" CanUserAddRows="False"  Background="{DynamicResource ResourceKey=DataGridBackGround}" CanUserDeleteRows="False" SelectedItem="{Binding TargetSWSettingModel.SelectRegister}">
                        <DataGrid.InputBindings>
                            <KeyBinding Key="Delete" Command="{Binding DeleteRegisterCommand}"/>
                        </DataGrid.InputBindings>
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Register Name" Binding="{Binding RegisterName}" Width="5*" HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                            <DataGridTextColumn Header="Register Value" Binding="{Binding RegisterValue}" Width="2*" HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="INIT FUNCTION">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1.5*"/>
                        <RowDefinition Height="8.5*"/>
                    </Grid.RowDefinitions>
                    <materialDesign:ColorZone Mode="PrimaryMid" Grid.Row="0"  VerticalAlignment="Stretch" Margin="3" Background="{DynamicResource ResourceKey=GroupBoxHeaderGradient}">
                        <Grid VerticalAlignment="Center">
                            <Label FontSize="15" Content="Initialize Fuction Setting" Margin="2" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}" HorizontalAlignment="Center"/>
                            <materialDesign:PopupBox HorizontalAlignment="Right" Margin="0,0,10,0" StaysOpen="True" Padding="0"  Name="popupbox_initfunc">
                                <materialDesign:PopupBox.ToggleContent>
                                    <materialDesign:PackIcon Kind="Plus" Width="20" Height="20" Foreground="White"/>
                                </materialDesign:PopupBox.ToggleContent>
                                <Grid Background="DarkGray" Width="300" Height="150" >
                                    <GroupBox Header="Add Init Function">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="1*"/>
                                                <RowDefinition Height="1*"/>
                                            </Grid.RowDefinitions>

                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="2*"/>
                                                <ColumnDefinition Width="1*"/>
                                                <ColumnDefinition Width="1*"/>
                                                <ColumnDefinition Width="1*"/>
                                            </Grid.ColumnDefinitions>

                                            <Label Content="Function Name" Foreground="Black" VerticalAlignment="Center"></Label>
                                            <TextBox Text="{Binding TargetSWSettingModel.InputInitFunctionName}" Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="3" wpf:HintAssist.Hint="Input Function Name" HorizontalAlignment="Stretch" Foreground="Black" FontSize="14" VerticalAlignment="Center"/>

                                            <Grid Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="4">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="5*"/>
                                                    <ColumnDefinition Width="5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Button Style="{StaticResource MaterialDesignRaisedButton}" Grid.Column="0" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Background="{DynamicResource ResourceKey=ButtonBackground}" Width="130" Margin="0,0,5,0" Command="{Binding AddInitFunctionOKCommand}" Click="InitFunc_Add_Click">추가</Button>
                                                <Button Style="{StaticResource MaterialDesignRaisedButton}" Grid.Column="1" Background="{DynamicResource ResourceKey=ButtonBackground}" Foreground="{DynamicResource ResourceKey=ButtonForeground}" Width="130" Margin="5,0,0,0" Command="{x:Static materialDesign:PopupBox.ClosePopupCommand}">취소</Button>
                                            </Grid>
                                        </Grid>
                                    </GroupBox>
                                </Grid>
                            </materialDesign:PopupBox>
                        </Grid>
                    </materialDesign:ColorZone>

                    <DataGrid AutoGenerateColumns="False" Grid.Row="1" BorderBrush="{DynamicResource ResourceKey=PrimaryHueMidBrush}" BorderThickness="2" Margin="3,0,3,0" ItemsSource="{Binding TargetSWSettingModel.InitFunctionList,UpdateSourceTrigger=PropertyChanged}" materialDesign:DataGridAssist.ColumnHeaderPadding="2" CanUserAddRows="False"  Background="{DynamicResource ResourceKey=DataGridBackGround}" CanUserDeleteRows="False" SelectedItem="{Binding TargetSWSettingModel.SelectInitFunction}">
                        <DataGrid.InputBindings>
                            <KeyBinding Key="Delete" Command="{Binding DeleteInitFunctionCommand}"/>
                        </DataGrid.InputBindings>
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Function Name" Binding="{Binding}" Width="5*" HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="MEMORY  LOCATION">
                <Grid x:Name="location_grid">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="5*"/>
                        <RowDefinition Height="5*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>

                    <Grid Grid.Column="1" Grid.RowSpan="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="1*"/>
                            <RowDefinition Height="5*"/>
                            <RowDefinition Height="1*"/>
                            <RowDefinition Height="5*"/>
                        </Grid.RowDefinitions>

                        <materialDesign:ColorZone Mode="PrimaryMid" CornerRadius="8" Grid.Row="0" Grid.Column="0" VerticalAlignment="Stretch" Margin="3">
                            <Grid VerticalAlignment="Center">
                                <TextBlock FontSize="16"  Text="ABS18" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}" VerticalAlignment="Center" TextAlignment="Center"/>
                            </Grid>
                        </materialDesign:ColorZone>

                        <materialDesign:ColorZone Mode="PrimaryMid" CornerRadius="8" Grid.Row="2" Grid.Column="3" VerticalAlignment="Stretch" Margin="3">
                            <Grid VerticalAlignment="Center">
                                <TextBlock FontSize="16"  Text="LINEAR" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}" VerticalAlignment="Center" TextAlignment="Center"/>
                            </Grid>
                        </materialDesign:ColorZone>

                        <avalonedit:TextEditor Document="{Binding TargetSWSettingModel.MemoryLocationTextABS18}" Grid.Row="1" SyntaxHighlighting="C" Name="MemoryLocationABS18Editor" FontFamily="Consolas" FontSize="10pt" ShowLineNumbers="True" LineNumbersForeground="White"  Background="#212121" Foreground="White" />
                        <avalonedit:TextEditor Document="{Binding TargetSWSettingModel.MemoryLocationTextLinear}" Grid.Column="2" Grid.Row="3" Name="MemoryLocationLinearEditor" FontFamily="Consolas" FontSize="10pt" ShowLineNumbers="True" LineNumbersForeground="White"  Background="#212121" Foreground="White" />
                    </Grid>
                    <Grid Grid.RowSpan="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="1.5*"/>
                            <RowDefinition Height="8.5*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4*"/>
                            <ColumnDefinition Width="6*"/>
                        </Grid.ColumnDefinitions>
                        <materialDesign:ColorZone Mode="PrimaryMid" CornerRadius="8" Grid.Row="0" Grid.Column="0" VerticalAlignment="Stretch" Margin="3,5,3,3">
                            <Grid VerticalAlignment="Center">
                                <TextBlock FontSize="16"  Text="Main Linker Script" Foreground="{DynamicResource ResourceKey=GroupBoxHeaderForeground}" VerticalAlignment="Center" TextAlignment="Center"/>
                            </Grid>
                        </materialDesign:ColorZone>
                        <ComboBox BorderThickness="0" Foreground="{DynamicResource ResourceKey=CheckBoxForgroundColor}" Grid.Column="1" Margin="10,5,10,3" ItemsSource="{Binding TargetSWSettingModel.LinkerScriptList}" SelectedItem="{Binding TargetSWSettingModel.SelectMainLinkerScript}">
                        </ComboBox>
                        <Border Grid.ColumnSpan="2" Grid.Row="1" Margin="3,5,10,3" Background="{DynamicResource ResourceKey=PrimaryHueMidBrush}"/>
                        <DataGrid Name="LinkerScriptDataGrid" Grid.ColumnSpan="2" Grid.Row="1" Margin="3,5,10,3" AutoGenerateColumns="False" BorderBrush="{DynamicResource ResourceKey=PrimaryHueMidBrush}" BorderThickness="2" ItemsSource="{Binding TargetSWSettingModel.LinkerScriptList}" materialDesign:DataGridAssist.ColumnHeaderPadding="2" >
                            <DataGrid.RowStyle>
                                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource MaterialDesignDataGridRow}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ., Converter={StaticResource NoneVisibleConvert}}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGrid.RowStyle>
                            <DataGrid.Columns>
                                <DataGridTextColumn Width="1*" Header="File Name" Binding="{Binding}" HeaderStyle="{StaticResource DataGridHeaderStyle}" CellStyle="{StaticResource DataGridCellStyle}"/>
                            </DataGrid.Columns>
                        </DataGrid>
                        <Rectangle Grid.Column="1"  Margin="3,5,5,3" Stroke="{DynamicResource ResourceKey=PrimaryHueMidBrush}" StrokeThickness="2"/>
                        <Grid Grid.ColumnSpan="2" Grid.Row="1" Margin="3,5,5,3">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="0.5*"/>
                                <ColumnDefinition Width="9.5*"/>
                            </Grid.ColumnDefinitions>
                            <materialDesign:PackIcon Kind="InfoCircle" Foreground="{DynamicResource ResourceKey=StandardTextForeground}" VerticalAlignment="Bottom"/>
                            <TextBlock Grid.Column="1" Text=".lsl file in the Target_SW folder is displayed. " VerticalAlignment="Bottom" Foreground="{DynamicResource ResourceKey=StandardTextForeground}"/>
                        </Grid>
                    </Grid>
                </Grid>
            </TabItem>

           
        </dragablz:TabablzControl>
    </Grid>
</UserControl>




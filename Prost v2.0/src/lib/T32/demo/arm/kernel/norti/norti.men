; --------------------------------------------------------------------------------
; @Title: NORTi specific menu
; @Description: -
; @Author: DIE
; @Copyright: (c) 1989-2014 Lauterbach GmbH, licensed for use with TRACE32(R) only
; --------------------------------------------------------------------------------
; $Id: norti.men 3620 2018-09-04 14:23:50Z rweiss $

add
menu
(
  popup "&NORTi"
  (
    default
    menuitem "Display &Tasks"           "TASK.TaSK"
    menuitem "Display &Semaphores"      "TASK.SEMaphore"
    menuitem "Display &Event Flags"     "TASK.FLaG"
    menuitem "Display Data &Queues"     "TASK.DaTaQueue"
    menuitem "Display &Mailboxes"       "TASK.MailBoX"
    menuitem "Display Message &Buffers" "TASK.MsgBuFfer"
    menuitem "Display Mute&xes"         "TASK.MuTeX"
    menuitem "Display &Ports"           "TASK.PORt"
    menuitem "Display &Fixed MemPools"  "TASK.MemPoolF"
    menuitem "Display &Var MemPools"    "TASK.MemPoolL"
    menuitem "Display &Cyclic Handlers" "TASK.CYClic"
    menuitem "Display &Alarm Handlers"  "TASK.ALarM"
    menuitem "Display &ISRs"            "TASK.ISR"
    separator
    popup "&Stack Coverage"
    (
      menuitem "&List Stacks"
      (
        if icd()||simulator()
          TASK.STacK.PATtern 0x01
        TASK.STacK
      )
      menuitem "Add Task"        "TASK.STacK.ADD"
      menuitem "Remove Task"     "TASK.STacK.ReMove"
      enable ice()||fire()
      menuitem "&Reset Coverage" "TASK.STacK.RESet"
    )
  )
  popup "Trace"
  (
    popup "List"
    (
      separator
      menuitem "&Task Switches"     "Trace.List List.TASK"
      menuitem "&Default and Tasks" "Trace.List List.TASK DEFault"
    )
  )
  popup "Perf"
  (
    separator
    popup "&Task Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
          Break.Delete /Alpha
          Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
        )
        if a.mode.flow()
        (
          Break.Delete /TraceEnable
          Break.Set task.config(magic) /TraceEnable
        )
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASK"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASK"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASK /Track
      )
    )
    popup "Task &Function Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
          Analyzer.STATistic.PreFetch on
        )

        if (ice()||fire())&&!a.mode.flow()
        (
          if a.config.hac()
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak
               Sample.Enable if BetaBreak
               Mark.A        if AlphaBreak
               Mark.B        if BetaBreak
             )
          )
          else
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak||BetaBreak
               Mark.A if AlphaBreak
               Mark.B if BetaBreak
             )
          )
          Break.Delete /Alpha /Beta /Charly
          Break.SetFunc
	      Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
	    )
        if a.mode.flow()
        (
          Break.Delete /TraceData
          Break.Set task.config(magic) /TraceData
        )
      )
      menuitem "[:perf]Show &Numerical"     "Trace.STATistic.TASKFUNC"
      menuitem "[:perf]Show as &Tree"       "Trace.STATistic.TASKTREE"
      menuitem "[:perf]Show &Detailed Tree" "Trace.STATistic.TASKTREE ALL"
      menuitem "[:achart]Show as &Timing"   "Trace.CHART.TASKFUNC"
      menuitem "[:alist]Show N&esting"      "Trace.List List.TASK FUNC TI.FUNC"
    )
    popup "Task &Status"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
          Break.Delete /Alpha
          Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
          TASK.TASKState
        )
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASKSTATE"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASKSTATE"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASKSTATE /Track
      )
    )
  )
  popup "&Help"
  (
    MENUITEM "[:manual]OS Awareness Manual NORTi" "HELP __RTOS_NORTI_"
  )
)


menu "task.tsk"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.TaSK &address
  )
  menuitem "Display Task struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pTCB[&id-1]
  )
  ;separator
  ;menuitem "Display Stack Frame"
  ;(
  ;  &address=address.offset(track.address())
  ;  Var.Frame /Locals /Caller /Task &address
  ;)
  ;menuitem "Switch Context"      "Register.TASK address.offset(track.address())"
  separator
  menuitem "Add to Stack Cov"    "TASK.STK.ADD address.offset(track.address())"
  menuitem "Rm from Stack Cov"   "TASK.STK.RM  address.offset(track.address())"
  separator
  menuitem "Dump task entry"
  (
    &id=address.offset(track.address())
    &tcb=data.long(D:(_pTCB+((&id-1)*4)))
    Data.dump &tcb /l /dialog
  )
)

menu "task.sem"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.SEMaphore &address
  )
  menuitem "Display semaphore struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pSEM[&id-1]
  )
  menuitem "Dump semaphore entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pSEM+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)

menu "task.flg"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.FLaG &address
  )
  menuitem "Display flag struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pFLG[&id-1]
  )
  menuitem "Dump flag entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pFLG+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)


menu "task.dtq"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.DaTaQueue &address
  )
  menuitem "Display data queue struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pDTQ[&id-1]
  )
  menuitem "Dump data queue entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pDTQ+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)


menu "task.mbx"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.MailBoX &address
  )
  menuitem "Display mailbox struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pMBX[&id-1]
  )
  menuitem "Dump mailbox entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pMBX+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)


menu "task.mtx"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.MuTeX &address
  )
  menuitem "Display mutex struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pMTX[&id-1]
  )
  menuitem "Dump mutex entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pMTX+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)


menu "task.por"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.PORt &address
  )
  menuitem "Display port struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pPOR[&id-1]
  )
  menuitem "Dump port entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pPOR+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)


menu "task.mpf"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.MemPoolF &address
  )
  menuitem "Display memory pool struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pMPF[&id-1]
  )
  menuitem "Dump memory pool entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pMPF+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)

menu "task.mpl"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.MemPoolL &address
  )
  menuitem "Display memory pool struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pMPL[&id-1]
  )
  menuitem "Dump memory pool entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pMPL+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)


menu "task.cyc"
(
  default
  menuitem "Display handler control struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pCYC[&id-1]
  )
  menuitem "Dump handler control entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pCYC+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)


menu "task.alm"
(
  default
  menuitem "Display handler control struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pALM[&id-1]
  )
  menuitem "Dump handler control entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pALM+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)


menu "task.isr"
(
  default
  menuitem "Display ISR control struct"
  (
    &id=address.offset(track.address())
    Var.View %o _pISR[&id-1]
  )
  menuitem "Dump ISR control entry"
  (
    &id=address.offset(track.address())
    &sem=data.long(D:(_pISR+((&id-1)*4)))
    Data.dump &sem /l /dialog
  )
)

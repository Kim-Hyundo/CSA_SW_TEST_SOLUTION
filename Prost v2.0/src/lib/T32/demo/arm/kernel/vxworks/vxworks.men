; --------------------------------------------------------------------------------
; @Title: VxWorks specific menu
; @Description: -
; @Author: DIE
; @Copyright: (c) 1989-2014 Lauterbach GmbH, licensed for use with TRACE32(R) only
; --------------------------------------------------------------------------------
; $Id: vxworks.men 5586 2020-08-13 15:04:39Z rdienstbeck $


add
menu
(
  popup "&VxWorks"
  (
    default
    menuitem "&Task Information"      "TASK.TaskInfo"
    menuitem "Show &Semaphore"
    (
      if task.avail(semlist)!=0
        TASK.SemShow
      else
      (
        dialog
        (
          header "Show Semaphore"
          pos 1. 1. 30.
addr:     defedit "" ""
          pos 32. 1. 7.
          button "Browse..."
          (
            local &wildcard
            &wildcard=dialog.string(addr)
            if "&wildcard"==""
              &wildcard="*"
            if !string.find("&wildcard","*?")
              &wildcard="*&wildcard*"
            sYmbol.Browse.Var &wildcard SEM_ID /Click "dialog.set addr ""*""" /Delete
          )
          pos 3. 2.5
direct:   checkbox "direct id" ""
          pos 5. 4. 7.
          defbutton "Ok"
          (
            local &addr
            &addr=dialog.string(addr)
            if dialog.boolean(direct)
              TASK.SemShow "%i" &addr
            else
              TASK.SemShow &addr
            dialog.end
          )
          pos 28. 4. 7.
          button "Cancel"
          (
            dialog.end
          )
          pos 0. 0. 40. 6.
          box "Semaphore"
        )
      )
    )
    menuitem "Show Message &Queue"
    (
      if task.avail(msgqlist)!=0
        TASK.MsgQShow
      else
      (
        dialog
        (
          header "Show Message Queue"
          pos 0x1 0x1 30.
addr:	  defedit "" ""
          pos 32. 1. 7.
          button "Browse..."
          (
            local &wildcard
            &wildcard=dialog.string(addr)
            if "&wildcard"==""
              &wildcard="*"
            if !string.find("&wildcard","*?")
              &wildcard="*&wildcard*"
            sYmbol.Browse.Var &wildcard MSG_Q_ID /Click "dialog.set addr ""*""" /Delete
          )
          pos 40. 1. 7.
          defbutton "Ok"
          (
            local &addr
            &addr=dialog.string(addr)
            TASK.MsgQShow &addr
            dialog.end
          )
          pos 0. 0. 49. 3.
          box "Message Queue"
        )
      )
    )
    menuitem "Show Memory &Partition"
    (
      if task.avail(memplist)!=0
        TASK.MemPShow
      else
      (
        dialog
        (
          header "Show Memory Partition"
  	pos 0x1 0x1 30.
addr:     defedit "" ""
  	pos 32. 1. 7.
  	button "Browse..."
  	(
  	  local &wildcard
  	  &wildcard=dialog.string(addr)
  	  if "&wildcard"==""
  	    &wildcard="*"
  	  if !string.find("&wildcard","*?")
  	    &wildcard="*&wildcard*"
          sYmbol.Browse.Var &wildcard PART_ID /Click "dialog.set addr ""*""" /Delete
  	)
  	pos 40. 1. 7.
  	defbutton "Ok"
  	(
  	  local &addr
  	  &addr=dialog.string(addr)
  	  if "&addr"==""
  	    &addr="memSysPartId"
  	  TASK.MemPShow &addr
  	  dialog.end
  	)
  	pos 0. 0. 49. 3.
  	box "Memory Partition"
        )
      )
    )
    menuitem "Show &Watchdog"
    (
      if task.avail(wdlist)!=0
        TASK.WDShow
      else
      (
        dialog
        (
            header "Show Watchdog"
            pos 0x1 0x1 30.
    addr:   defedit "" ""
            pos 32. 1. 7.
            button "Browse..."
            (
                local &wildcard
                &wildcard=dialog.string(addr)
                if "&wildcard"==""
                    &wildcard="*"
                if !string.find("&wildcard","*?")
                    &wildcard="*&wildcard*"
                sYmbol.Browse.Var &wildcard WDOG_ID /Click "dialog.set addr ""*""" /Delete
            )
            pos 40. 1. 7.
            defbutton "Ok"
            (
                local &addr
                &addr=dialog.string(addr)
                TASK.WDShow &addr
                dialog.end
            )
            pos 0. 0. 49. 3.
            box "Watchdog"
        )
      )
    )
    menuitem "Show &Modules"                "TASK.ModShow"
    IF sYmbol.EXIST(rtpClassId)
    (
        menuitem "Show &RTPS"               "TASK.RTPShow"
    )
    menuitem "Show &Libraries"              "TASK.SHLShow"
    IF sYmbol.EXIST(pdList)
    (
        menuitem "Show &Protection Domains" "TASK.PDShow"
    )
    separator
    popup "&Stack Coverage"
    (
      menuitem "&List Stacks"
      (
        if !ice()
            TASK.STacK.PATtern 0xee
        TASK.STacK
      )
      menuitem "Add Task"        "TASK.StacK.ADD"
      menuitem "Remove Task"     "TASK.StacK.RM"
      menuitem "&Reset Coverage"
      (
        if icd()||simulator()
        (
          dialog.yesno "Overwrite unused stack space" "with stack fill pattern?"
          entry &yes
          if !&yes
            enddo
        )
        TASK.STacK.Init
      )
    )
    separator
    popup "Symbol &Autoloader"
    (
        menuitem "List Components"  "sYmbol.AutoLoad.List"
        menuitem "Check Now!"       "sYmbol.AutoLoad.CHECK"
        menuitem "Set Loader Script"
        (
            dialog
            (
                header "sYmbol.AutoLoad.CHECKCoMmanD"
                pos 0. 0. 40. 3.
                box "autoload batch script"
                pos 1. 1. 30. 1
mfile:          edit "autoload.cmm" ""
                pos 32. 1. 7. 1.
                button "Browse..."
                (
                    dialog.file "*.cmm"
                    entry %line &file
                    dialog.set cmmfile "&file"
                )
                pos 1. 3. 16. 1.
checkon:        checkbox "automatic check" ""
                pos 10. 4.5 8.
                defbutton "Ok"
                (
                    local &log &cmm
                    &cmm=dialog.string(cmmfile)
                    sYmbol.AutoLoad.CHECKCoMmanD "do &cmm "
                    sYmbol.AutoLoad.CHECK       ; trigger check manually
                    if dialog.boolean(checkon)
                        sYmbol.AutoLoad.CHECK ON    ; automatic check enabled
                    else
                        sYmbol.AutoLoad.CHECK OFF   ; automatic check disabled
                    dialog.end
                )
                pos 22. 4.5 8.
                button "Cancel" "dialog.end"
            )
        )
    )
  )
  popup "Trace"
  (
    popup "List"
    (
      separator
      menuitem "&Task Switches"     "Trace.List List.TASK"
      menuitem "&Default and Tasks" "Trace.List List.TASK DEFault"
    )
  )
  popup "Perf"
  (
    separator
    popup "&Task Runtime"
    (
        menuitem "&Prepare"
        (
          if t.method.analyzer()
          (
            Analyzer.AutoInit on
          )
          if (ice()||fire())&&!a.mode.flow()
          (
            Analyzer.ReProgram
            (
              Sample.Enable if AlphaBreak&&Write
            )
          )
	      Break.Delete /Alpha
	      Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
          Break.Set kernelState /Alpha
        )
        menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASK"
        menuitem "[:achart]Show as &Timing" "Trace.CHART.TASK"
        menuitem "[:achart]Tracking with Trace &List"
        (
          Trace.List List.TASK DEFault /Track
          Trace.CHART.TASK /Track
        )
    )
    popup "Task &Function Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
          Analyzer.STATistic.PreFetch on
        )

        if (ice()||fire())&&!a.mode.flow()
        (
          if a.config.hac()
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak
               Sample.Enable if BetaBreak
               Mark.A        if AlphaBreak
               Mark.B        if BetaBreak
             )
          )
          else
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak||BetaBreak
               Mark.A if AlphaBreak
               Mark.B if BetaBreak
             )
          )
	    )

        Break.Delete /Alpha /Beta /Charly
        Break.SetFunc
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
        Break.Set kernelState /Alpha
      )
      menuitem "[:perf]Show &Numerical"     "Trace.STATistic.TASKFUNC"
      menuitem "[:perf]Show as &Tree"       "Trace.STATistic.TASKTREE"
      menuitem "[:perf]Show &Detailed Tree" "Trace.STATistic.TASKTREE ALL"
      menuitem "[:achart]Show as &Timing"   "Trace.CHART.TASKFUNC"
      menuitem "[:alist]Show N&esting"      "Trace.List List.TASK FUNC TI.FUNC"
    )
    popup "Task &Status"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
        )
	    Break.Delete /Alpha
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
	    TASK.TASKState
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASKSTATE"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASKSTATE"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASKSTATE /Track
      )
    )
  )
  popup "&Help"
  (
    menuitem "VxWorks RTOS Debugger Manual" "HELP __RTOS_VXWORKS_"
  )
)


menu "task.ti"
(
  default
  menuitem "Display Detailed"
  (
    LOCAL &magic
    &magic=address.offset(track.address())
    TASK.TaskInfo &magic
  )
  menuitem "Display Stack Frame"
  (
    LOCAL &magic
    &magic=address.offset(track.address())
    Var.Frame /Locals /Caller /Task &magic
  )
  menuitem "Switch Context" "Register.TASK address.offset(track.address())"
  separator
  menuitem "Add to Stack Cov"  "TASK.STK.ADD address.offset(track.address())"
  menuitem "Rm from Stack Cov" "TASK.STK.RM  address.offset(track.address())"
  separator
  menuitem "Display TCB"
  (
    LOCAL &address
    &address=track.address()
    Var.View %Open %String (WIND_TCB*)(&address)
  )
  menuitem "Dump TCB"
  (
    LOCAL &address
    &address=track.address()
    Data.dump &address /Dialog
  )
)


menu "task.ss"
(
  default
  menuitem "Display Detailed"     "TASK.SemShow track.address()"
  menuitem "Display Semaphore struct"
  (
    &address=address.offset(track.address())
    Var.View %m %s (SEMAPHORE*)&address
  )
  menuitem "Dump Semaphore"
  (
    &address=address.offset(track.address())
    Data.dump &address /Dialog
  )
)


menu "task.mqs"
(
  default
  menuitem "Display Detailed"     "TASK.MsgQShow track.address()"
  menuitem "Display Message Queue struct"
  (
    &address=address.offset(track.address())
    Var.View %m %s (MSG_Q*)&address
  )
  menuitem "Dump Message Queue"
  (
    &address=address.offset(track.address())
    Data.dump &address /Dialog
  )
)


menu "task.mps"
(
  default
  menuitem "Display Detailed"     "TASK.MemPShow track.address()"
  menuitem "Display Memory Partition struct"
  (
    &address=address.offset(track.address())
    Var.View %m %s (PARTITION*)&address
  )
  menuitem "Dump Memory Partition"
  (
    &address=address.offset(track.address())
    Data.dump &address /Dialog
  )
)


menu "task.wds"
(
  default
  menuitem "Display Detailed"     "TASK.WDShow track.address()"
  menuitem "Display Watchdog struct"
  (
    &address=address.offset(track.address())
    Var.View %m %s (WDOG*)&address
  )
  menuitem "Dump Watchdog"
  (
    &address=address.offset(track.address())
    Data.dump &address /Dialog
  )
)


menu "task.mod"
(
  default
  menuitem "Display Detailed"   "TASK.ModShow track.address()"
  menuitem "Load Module Symbols"
  (
    LOCAL &modid &modname
    &modid=address.offset(track.address())
    &modname=task.modname(&modid)
    sYmbol.AutoLOAD.CHECK
    sYmbol.AutoLOAD.TOUCH "&modname"
  )
  separator
  menuitem "Display Module struct"
  (
    LOCAL &address
    &address=track.address()
    Var.View %Open %String (struct module*)(&address)
  )
  menuitem "Dump Module"
  (
    LOCAL &address
    &address=track.address()
    Data.dump &address /Dialog
  )
)


menu "task.rtp"
(
  default
  menuitem "Display Detailed"   "TASK.RTPShow track.address()"
  menuitem "Load RTP Symbols"
  (
    local &rtpid &sid &text
    &rtpid=address.offset(track.address())
    &sid=task.rtp.spaceid(&rtpid)
    &text=task.rtp.segaddr(".text",&rtpid)
    sYmbol.AutoLOAD.CHECK
    sYmbol.AutoLOAD.TOUCH &sid:&text
  )
  separator
  menuitem "Display RTP struct"
  (
    &address=address.offset(track.address())
    Var.View %Open %String (struct wind_rtp*)&address
  )
  menuitem "Dump RTP"
  (
    &address=address.offset(track.address())
    Data.dump &address /Dialog
  )
)


menu "task.shl"
(
  default
  menuitem "Display Detailed"   "TASK.SHLShow track.address()"
  menuitem "Load SHL Symbols"
  (
    local &shlid &sid &text
    &shlid=address.offset(track.address())
    &sid=address.segment(track.address())
    &text=task.shl.segaddr(".text",&shlid)
    sYmbol.AutoLOAD.CHECK
    sYmbol.AutoLOAD.TOUCH &sid:&text
  )
  separator
  menuitem "Display SHL struct"
  (
    &address=address.offset(track.address())
    Var.View %Open %String (SHL_NODE*)&address
  )
  menuitem "Dump SHL"
  (
    &address=address.offset(track.address())
    Data.dump &address /Dialog
  )
)


menu "task.pd"
(
  default
  menuitem "Display Detailed"   "TASK.PDShow track.address()"
  ;menuitem "Scan MMU"
  ;(
  ;  &rtp=address.offset(track.address())
  ;  TASK.MMU.SCAN &rtp task.rtp.segaddr(".text",&rtp)&0xffc00000 0x01000000
  ;  MMU.CLEANUP
  ;)
  ;separator
  menuitem "Display PD struct"
  (
    &address=address.offset(track.address())
    Var.View %o %s (struct wind_pd*)&address
  )
  menuitem "Dump PD"
  (
    &address=address.offset(track.address())
    Data.dump &address /Dialog
  )
)


menu "var"
(
  popup "VxWorks"
  (
    menuitem "Display as Semaphore"
    (
      &var=track.string()
      &obj=var.value(&var)
      TASK.SemShow &obj
    )
    menuitem "Display as Message Queue"
    (
      &var=track.string()
      &obj=var.value(&var)
      TASK.MsgQShow &obj
    )
  )
)

; --------------------------------------------------------------------------------
; @Title: Additional EPOC Menues
; @Description: -
; @Author: DIE
; @Copyright: (c) 1989-2020 Lauterbach GmbH, licensed for use with TRACE32(R) only
; --------------------------------------------------------------------------------
; $Id: symbian.men 15504 2020-01-09 11:14:03Z kjmal $


add
menu
(
  popup "Symbian"
  (
    menuitem "Display &Processes" "TASK.PROCess"
    menuitem "Display &Threads"   "TASK.THRead"
    menuitem "Display &Libraries" "TASK.LIBrary"
    menuitem "Display &Chunks"    "TASK.CHUNK"
    separator
    popup "&Autoloader"
    (
        menuitem "List Modules" "sYmbol.AutoLoad.List"
        menuitem "Force Symbol Loading..."
        (
            dialog
            (
                header "Force Loading"
	            pos 0. 0. 40. 3.
                box "module to load symbols"
                pos 1. 1. 30. 1.
module:         defedit "" ""
                pos 32. 1. 7. 1.
	            defbutton "Ok"
                (
                    local &module
                    &module=dialog.string(module)
                    if "&module"!=""
                        sYmbol.AutoLoad.TOUCH "*&module*"
                    dialog.end
                )
            )
        )
        menuitem "Configuration..."
        (
            dialog
            (
                header "Configure Autoloader"
	            pos 0. 0. 40. 3.
                box "rombuild log file"
                pos 1. 1. 30. 1.
logfile:        defedit "rombuild.log" ""
                pos 32. 1. 7. 1.
                button "Browse..."
                (
                    dialog.file "*.log"
                    entry %line &file
                    dialog.set logfile "&file"
                )
	            pos 0. 2.5 40. 3.
                box "autoload batch script"
                pos 1. 3.5 30. 1
cmmfile:        edit "autoload.cmm" ""
                pos 32. 3.5 7. 1.
                button "Browse..."
                (
                    dialog.file "*.cmm"
                    entry %line &file
                    dialog.set cmmfile "&file"
                )
                pos 1. 5.5 30. 1.
check:          checkbox "dynamic autoloader" ""
                pos 10. 7 8.
	            defbutton "Ok"
                (
                    local &log &cmm
                    &log=dialog.string(logfile)
                    &cmm=dialog.string(cmmfile)
                    if ("&log"!="")&&("&cmm"!="")
                        sYmbol.AutoLoad.LOADEPOC &log "do &cmm "
                    if dialog.boolean(check)&&("&cmm"!="")
                    (
                        sYmbol.AutoLoad.CHECKEPOC "do &cmm "
                        sYmbol.AutoLoad.CHECK       ; trigger check manually
                        sYmbol.AutoLoad.CHECK ON    ; automatic check enabled
                    )
                    dialog.end
                )
        		pos 22. 7 8.
		        button "Cancel" "dialog.end"
            )
        )
    )
    separator
    menuitem "Debug Process on Entry..."
    (
      global &breakaddr
      &breakaddr=0
      dialog
      (
        header "Debug Process on Entry"
        pos 0. 0. 24. 3.
        box "process name (without .exe)"
        pos 1. 1. 22. 1.
proc:   defhotedit ""
        (
          if dialog.string(proc)!=""
            dialog.enable bok
          else
            dialog.disable bok
        )
        pos 2. 3. 8.
bok:    defbutton "Ok"
        (
          local &process
          screen.always
          dialog.disable bok
          dialog.disable proc
          &process=dialog.string(proc)
          dialog.set mess "Checking process &process..."
          if run()
            Break
          if task.proc.codeaddr("&process")!=0xffffffff
          (
            sYmbol.AutoLOAD.CLEAR "*&process*"
            sYmbol.AutoLoad.CHECK
            sYmbol.AutoLOAD.TOUCH "*&process*"
            sYmbol.CASE OFF
            if y.exist(\\&process\Global\E32Main)
              dialog.ok "Process &process already running." "Symbols loaded."
            else
              dialog.ok "Process &process already running." "No symbol file found."
            sYmbol.CASE ON
            dialog.end
            enddo
          )
          dialog.set mess "Please start process &process"
          &breakaddr=address.offset(y.end(svProcessLoaded))&0xfffffffc
          Break.Set R:0:&breakaddr /CONDition task.proc.codeaddr("&process")!=0xffffffff
          on pbreakat &breakaddr goto breaked1
          Go
          stop
breaked1:
          dialog.set mess "Process &process started. Loading symbols..."
          Break.Delete &breakaddr
          &breakaddr=0
          sYmbol.AutoLOAD.CLEAR "*&process*"
          sYmbol.AutoLOAD.CHECK
          sYmbol.AutoLOAD.TOUCH "*&process*"
          sYmbol.CASE OFF
          if !y.exist(\\&process\Global\E32Main)
          (
            dialog.ok "Symbol 'E32Main' of process &process not found."
            sYmbol.CASE ON
            dialog.end
            enddo
          )
          dialog.set mess "Waiting for reaching E32Main..."
          &breakaddr=address.offset(\\&process\Global\E32Main)
          Break.Set \\&process\Global\E32Main   ; don't use &breakaddr -- to retain T:/R:
          on pbreakat &breakaddr goto breaked2
          Go
          stop
breaked2:
          Break.Delete &breakaddr
          &breakaddr=0
          &space=task.proc.spaceid("&process")   ; get space id of process
          sYmbol.RELOcate &space:0 \\&process    ; relocate process symbols to correct space id
          sYmbol.RELOcate 0:0 0x50000000--0x7fffffff ; relocate text symbols to space id 0 (global visibility)
          MMU.Delete &space:0--0xffffffff        ; remove previous entries
          MMU.SCAN   &space:0--0xffffffff        ; rescan MMU of this process
          MMU.CLEANUP
          sYmbol.CASE ON
          dialog.end
        )
   	    pos 14. 3. 8.
		button "Cancel"
		(
		  if &breakaddr!=0
		  (
		    if run()
		      Break
		    b.d &breakaddr
		  )
		  sYmbol.CASE ON
		  dialog.end
		  end
		)
        pos 0. 5. 24. 1.
mess:   edit "Please enter process name" ""
      )
      dialog.disable bok
      dialog.disable mess
    )
    menuitem "Debug App on Entry..."
    (
      global &breakaddr
      &breakaddr=0
      dialog
      (
        header "Debug Application on Entry"
        pos 0. 0. 24. 3.
        box "application name (without .app)"
        pos 1. 1. 22. 1.
app:   defhotedit ""
        (
          if dialog.string(app)!=""
            dialog.enable bok
          else
            dialog.disable bok
        )
        pos 2. 3. 8.
bok:    defbutton "Ok"
        (
          local &appl
          screen.always
          dialog.disable bok
          dialog.disable app
          &appl=dialog.string(app)
          dialog.set mess "Checking application &appl..."
          if run()
            Break
          if task.lib.codeaddr("&appl")!=0xffffffff
          (
            sYmbol.AutoLOAD.CLEAR "*&appl.app*"
            sYmbol.AutoLOAD.TOUCH "*&appl.app*"
            sYmbol.CASE OFF
            if y.exist(\\&appl\Global\NewApplication)
              dialog.ok "Application &appl already running." "Symbols loaded."
            else
              dialog.ok "Application &appl already running." "No symbol file found."
            sYmbol.CASE ON
            dialog.end
            enddo
          )
          dialog.set mess "Please start application &appl"
          &breakaddr=address.offset(y.end(svLibraryLoaded))&0xfffffffc
          Break.Set R:0:&breakaddr /CONDition task.lib.codeaddr("&appl")!=0xffffffff
          on pbreakat &breakaddr goto breaked1
          Go
          stop
breaked1:
          dialog.set mess "Application &appl started. Loading symbols..."
          Break.Delete &breakaddr
          &breakaddr=0
          sYmbol.AutoLOAD.CLEAR "*&appl.app*"
          sYmbol.AutoLOAD.TOUCH "*&appl.app*"
          sYmbol.CASE OFF
          if !y.exist(\\&appl\Global\NewApplication)
          (
            dialog.ok "Symbol 'NewApplication' of application &appl not found."
            sYmbol.CASE ON
            dialog.end
            enddo
          )
          dialog.set mess "Waiting for reaching NewApplication..."
          &breakaddr=address.offset(\\&appl\Global\NewApplication)
          Break.Set \\&appl\Global\NewApplication   ; don't use &breakaddr -- to retain T:/R:
          on pbreakat &breakaddr goto breaked2
          Go
          stop
breaked2:
          Break.Delete &breakaddr
          &breakaddr=0
          dialog.set mess "application started, relocating symbols..."
          &space=task.proc.spaceid("AppRun")
          sYmbol.RELOcate &space:0 \\&appl
          sYmbol.RELOcate 0:0 0x50000000--0x7fffffff
          sYmbol.CASE ON
          mmu.delete &space:0--0xffffffff
          mmu.scan   &space:0--0xffffffff
          mmu.cleanup
          dialog.end
        )
   	    pos 14. 3. 8.
		button "Cancel"
		(
		  if &breakaddr!=0
		  (
		    if run()
		      Break
		    b.d &breakaddr
		  )
		  sYmbol.CASE ON
		  dialog.end
		  end
		)
        pos 0. 5. 24. 1.
mess:   edit "Please enter application name" ""
      )
      dialog.disable bok
      dialog.disable mess
    )
    separator
    popup "&Stack Coverage"
    (
      menuitem "&List Stacks"
      (
        if icd()||simulator()
          TASK.STacK.PATtern 0x29
        TASK.STacK
      )
      menuitem "Add Task"        "TASK.STacK.ADD"
      menuitem "Remove Task"     "TASK.STacK.ReMove"
      enable ice()||fire()
      menuitem "&Reset Coverage" "TASK.STacK.RESet"
    )
  )
  popup "Trace"
  (
    popup "List"
    (
      separator
      menuitem "&Task Switches"     "Trace.List List.TASK"
      menuitem "&Default and Tasks" "Trace.List List.TASK DEFault"
    )
  )
  popup "Perf"
  (
    separator
    popup "&Task Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
        )
        if etm()
        (
          ETM.CLEAR
          ETM.Set Range 0x1 Execute v.range(schedule)
          ETM.Set Range 0x2 Write D:task.config(magic)++3
          ETM.Set TraceEnable Range 0x1
          ETM.Set VDRI 0x2   ; ViewDataRangeInclude
          ETM.Set TRIGGER NOT True
        )
	    Break.Delete /Alpha
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASK"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASK"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASK /Track
      )
    )
    popup "Task &Function Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
          Analyzer.STATistic.PreFetch on
        )

        if (ice()||fire())&&!a.mode.flow()
        (
          if a.config.hac()
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak
               Sample.Enable if BetaBreak
               Mark.A        if AlphaBreak
               Mark.B        if BetaBreak
             )
          )
          else
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak||BetaBreak
               Mark.A if AlphaBreak
               Mark.B if BetaBreak
             )
          )
	    )
        if etm()
        (
          ETM.CLEAR
        )

        Break.Delete /Alpha /Beta /Charly
        Break.SetFunc
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
      )
      menuitem "[:perf]Show &Numerical"     "Trace.STATistic.TASKFUNC"
      menuitem "[:perf]Show as &Tree"       "Trace.STATistic.TASKTREE"
      menuitem "[:perf]Show &Detailed Tree" "Trace.STATistic.TASKTREE ALL"
      menuitem "[:achart]Show as &Timing"   "Trace.CHART.TASKFUNC"
      menuitem "[:alist]Show N&esting"      "Trace.List List.TASK FUNC TI.FUNC"
    )
    popup "Task &State"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
        )
        if etm()
        (
          ETM.CLEAR
          ;trace from "scheduling_functions_start_here" to "\fork"
        )
	    Break.Delete /Alpha
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
	    TASK.TASKState
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASKSTATE"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASKSTATE"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASKSTATE /Track
      )
    )
  )
  ;popup "&Help"
  ;(
  ;  MENUITEM "[:manual]OS Awareness Manual Symbian OS EKA2" "HELP __RTOS_EPOC_"
  ;)
)


menu "task.thr"
(
  default
  menuitem "Display Detailed"  "TASK.THRead track.address()"
  menuitem "Display Thread Object"
  (
    &address=address.offset(track.address())
    Var.View %m %in (DPlatThread*)&address
  )
  separator
  menuitem "Add to Stack Cov"  "TASK.STK.ADD address.offset(track.address())"
  menuitem "Rm from Stack Cov" "TASK.STK.RM  address.offset(track.address())"
  separator
  menuitem "Dump Thread Object"  "Data.dump track.address()"
)

menu "task.proc"
(
  default
  menuitem "Display Detailed"  "TASK.PROCess track.address()"
  menuitem "Display Process Object"
  (
    &address=address.offset(track.address())
    Var.View %m %in (DPlatProcess*)&address
  )
  menuitem "Dump Process Object"
  (
    &address=address.offset(track.address())
    Data.dump &address
  )
)


menu "task.lib"
(
  default
  menuitem "Display Detailed"  "TASK.LIBrary track.address()"
  menuitem "Display Library Object"
  (
    &address=data.long(track.address())
    Var.View %m %in (DPlatLibrary*)&address
  )
  menuitem "Dump Library Object"  "Data.dump track.address()"
)


menu "task.chunk"
(
  default
  menuitem "Display Detailed"  "TASK.CHUNK track.address()"
  menuitem "Display Chunk Object"
  (
    &address=address.offset(track.address())
    Var.View %m %in (DPlatChunk*)&address
  )
  menuitem "Dump Chunk Object"  "Data.dump track.address()"
)

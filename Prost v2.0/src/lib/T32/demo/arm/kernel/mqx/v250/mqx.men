; --------------------------------------------------------------------------------
; @Title: MQX specific menu
; @Description: -
; @Author: DIE
; @Copyright: (c) 1989-2014 Lauterbach GmbH, licensed for use with TRACE32(R) only
; --------------------------------------------------------------------------------
; $Id: mqx.men 3620 2018-09-04 14:23:50Z rweiss $

add
menu
(
  popup "&MQX"
  (
;    if y.exist(T32OUT)
;    menuitem "&RTOS Terminal" "TERM T32OUT T32IN"
;    separator
    default
    menuitem "&Tasks"           "TASK.Task"
    menuitem "Memory &Pools"    "TASK.MEMPool"
    menuitem "LW Memory &Pools" "TASK.LWMEMPool"
    popup    "&Messages"
    (
      menuitem "&Queues"      "TASK.MeSsaGe.QUEUE"
      menuitem "&LW Queues"   "TASK.LWMsgQ"
      menuitem "&Pools"       "TASK.MeSsaGe.POOL"
    )
    menuitem "&Semaphores"    "TASK.SEMaphore"
    menuitem "&LW Semaphores" "TASK.LWSem"
    menuitem "&Mutexes"       "TASK.MuteX"
    menuitem "&Events"        "TASK.EVent"
    menuitem "&LW Events"     "TASK.LWEvent"
    menuitem "Task Queues"    "TASK.TASKQueue"
    menuitem "&Kernel Log"    "TASK.KLog"
    separator
    popup "&Stack Coverage"
    (
      menuitem "List Stacks"     "TASK.STacK"
      menuitem "Add Task"        "TASK.STacK.ADD"
      menuitem "Remove Task"     "TASK.STKac.RM"
      if ice()
      (
        menuitem "&Reset Coverage"   "TASK.STK.RES"
      )
      else
      (
        menuitem "Stack &Pattern..."
        (
         dialog
         (
            header "Stack Pattern"
            pos 0 0 13. 3.
            box "initialized pattern:"
            pos 1 1 11. 1.
pattern:    defedit "" ""
            pos 14. 1 6 1
            defbutton "OK" 
            ( 
              local &pattern
              &pattern=dialog.string(pattern)
              TASK.STK.PAT "&pattern"
              dialog.end
            )
          )
          if cpufamily()=="ARM"
            dialog.set pattern "kats"
          else
            dialog.set pattern "stak"
        )
      )
    )
  )
  popup "Trace"
  (
    popup "List"
    (
      separator
      menuitem "&Task Switches"     "Trace.List List.TASK"
      menuitem "&Default and Tasks" "Trace.List List.TASK DEFault"
    )
  )
  popup "Perf"
  (
    separator
    popup "&Task Runtime"
    (
        menuitem "&Prepare"
        (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
        )
	    Break.Delete /Alpha
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
        )
        menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASK"
        menuitem "[:achart]Show as &Timing" "Trace.CHART.TASK"
        menuitem "[:achart]Tracking with Trace &List"
        (
          Trace.List List.TASK DEFault /Track
          Trace.CHART.TASK /Track
        )
    )
    popup "Task &Function Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
          Analyzer.STATistic.PreFetch on
        )

        if (ice()||fire())&&!a.mode.flow()
        (
          if a.config.hac()
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak
               Sample.Enable if BetaBreak
               Mark.A        if AlphaBreak
               Mark.B        if BetaBreak
             )
          )
          else
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak||BetaBreak
               Mark.A if AlphaBreak
               Mark.B if BetaBreak
             )
          )
	    )

        Break.Delete /Alpha /Beta /Charly
        Break.SetFunc
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
      )
      menuitem "[:perf]Show &Numerical"     "Trace.STATistic.TASKFUNC"
      menuitem "[:perf]Show as &Tree"       "Trace.STATistic.TASKTREE"
      menuitem "[:perf]Show &Detailed Tree" "Trace.STATistic.TASKTREE ALL"
      menuitem "[:achart]Show as &Timing"   "Trace.CHART.TASKFUNC"
      menuitem "[:alist]Show N&esting"      "Trace.List List.TASK FUNC TI.FUNC"
    )
    popup "Task &Status"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
        )
	    Break.Delete /Alpha
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
	    TASK.TASKState
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASKSTATE"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASKSTATE"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASKSTATE /Track
      )
    )
  )
  popup "&Help"
  (
    MENUITEM "[:manual]OS Awareness Manual MQX" "HELP __RTOS_MQX_"
  )
)


menu "task.task"
(
  default
  menuitem "Display Detailed"  "TASK.TASK track.address()"
  menuitem "View task descriptor"
  (
    &magic=address.offset(track.address())
    &struct=task.struct(td)
    Var.View %Open (&struct)*&magic
  )
  separator
  menuitem "Display Stack Frame"
  (
    &address=address.offset(track.address())
    Var.Frame /Locals /Caller /Task &address
  )
  menuitem "Switch Context"      "Register.TASK address.offset(track.address())"
  separator
  menuitem "Add to Stack Cov"    "TASK.STK.ADD address.offset(track.address())"
  menuitem "Rm from Stack Cov"   "TASK.STK.RM  address.offset(track.address())"
  separator
  menuitem "Dump task descriptor"  "Data.dump track.address() /l /dialog"
)


menu "task.sem"
(
  default
  menuitem "Display Detailed"    "TASK.SEMaphore track.address()"
  separator
  menuitem "View semaphore struct"
  (
    &magic=address.offset(track.address())
    Var.View %Open (struct sem_struct)*&magic
  )
  menuitem "Dump semaphore struct"  "Data.dump track.address() /l /dialog"
)

menu "task.memp"
(
  default
  menuitem "Display Detailed"    
  (
    &magic=address.offset(track.address())
    TASK.MEMPool track.address()
  )
  separator
  menuitem "View mem pool struct"
  (
    &magic=address.offset(track.address())
    Var.View %Open (struct mempool_struct)*&magic
  )
  menuitem "Dump mem pool struct"  
  (
    &magic=address.offset(track.address())
    Data.dump &magic /Long /dialog
  )
)

menu "task.msg.queue"
(
  default
  menuitem "Display Detailed"    "TASK.MSQ.QUEUE track.address()"
  separator
  menuitem "View message queue struct"
  (
    &magic=address.offset(track.address())
    Var.View %Open (struct msgq_struct)*&magic
  )
  menuitem "Dump message queue struct"  "Data.dump track.address() /l /dialog"
)

menu "task.lws"
(
  default
  menuitem "Display Detailed"    "TASK.LWSem track.address()"
  separator
  menuitem "View lw semaphore struct"
  (
    &magic=address.offset(track.address())
    Var.View %Open (struct lwsem_struct)*&magic
  )
  menuitem "Dump lw semaphore struct"  "Data.dump track.address() /l /dialog"
)

menu "task.lwe"
(
  default
  menuitem "Display Detailed"    "TASK.LWEvent track.address()"
  separator
  menuitem "View lw event struct"
  (
    &magic=address.offset(track.address())
    Var.View %Open (struct lwevent_struct)*&magic
  )
  menuitem "Dump lw event struct"  "Data.dump track.address() /l /dialog"
)

menu "task.lwmq"
(
  default
  menuitem "Display Detailed"    "TASK.LWMsgQ track.address()"
  separator
  menuitem "View lw msg queue struct"
  (
    &magic=address.offset(track.address())
    Var.View %Open (struct lwmsgq_struct)*&magic
  )
  menuitem "Dump lw msg queue struct"  "Data.dump track.address() /l /dialog"
)

menu "task.lwmemp"
(
  default
  menuitem "Display Detailed"    "TASK.LWMEMPool track.address()"
  separator
  menuitem "View lw mem pool struct"
  (
    &magic=address.offset(track.address())
    Var.View %Open (struct lwmem_pool_struct)*&magic
  )
  menuitem "Dump lw mem pool struct"  "Data.dump track.address() /l /dialog"
)

menu "task.taskq"
(
  default
  menuitem "Display Detailed"    "TASK.TASKQueue track.address()"
  separator
  menuitem "View task queue struct"
  (
    &magic=address.offset(track.address())
    &struct=task.struct(tq)
    Var.View %Open (&struct)*&magic
  )
  menuitem "Dump task queue struct"  "Data.dump track.address() /l /dialog"
)

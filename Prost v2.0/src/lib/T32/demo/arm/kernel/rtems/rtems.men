; --------------------------------------------------------------------------------
; @Title: RTEMS specific menu
; @Description: -
; @Author: DIE
; @Copyright: (c) 1989-2014 Lauterbach GmbH, licensed for use with TRACE32(R) only
; --------------------------------------------------------------------------------
; $Id: rtems.men 4427 2019-07-05 14:15:11Z rdienstbeck $


add
menu
(
  popup "&RTEMS"
  (
    menuitem "Display API &Information" "TASK.INFO"
    default
    menuitem "Display All &Threads"     "TASK.Thread"
    popup    "Display Internal Objects"
    (
        menuitem "Display Threads" "TASK.INTernal.Thread"
        ;menuitem "Display Mutexes" "TASK.INTernal.Mutex"
    )
    popup    "Display Classic Objects"
    (
        menuitem "Display Tasks"          "TASK.CLassic.Task"
        menuitem "Display Timers"         "TASK.CLassic.TImer"
        menuitem "Display Semaphores"     "TASK.CLassic.Semaphore"
        menuitem "Display Message Queues" "TASK.CLassic.MsgQueue"
        menuitem "Display Partitions"     "TASK.CLassic.Partition"
        menuitem "Display Regions"        "TASK.CLassic.Region"
        menuitem "Display Ports"          "TASK.CLassic.POrt"
        menuitem "Display Periods"        "TASK.CLassic.PEriod"
        menuitem "Display Extensions"     "TASK.CLassic.Extension"
    )
    popup    "Display POSIX Objects"
    (
        menuitem "Display Threads"              "TASK.Posix.Thread"
        menuitem "Display Keys"                 "TASK.Posix.Keys"
        ;menuitem "Display Mutexes"              "TASK.Posix.Mutex"
        ;menuitem "Display Condition Variables"  "TASK.Posix.CondVar"
    )
    ;popup    "Display ITRON Objects"
    ;(
    ;)
    separator
    popup "&Stack Coverage"
    (
      menuitem "&List Stacks"    "TASK.STacK.view"
      menuitem "Add Task"        "TASK.STacK.ADD"
      menuitem "Remove Task"     "TASK.STacK.ReMove"
      menuitem "Reset Coverage"
      (
        if icd()||simulator()
        (
          dialog.yesno "Overwrite unused stack space" "with stack fill pattern?"
          entry &yes
          if !&yes
            enddo
        )
        TASK.STacK.Init
      )
    )
  )
  popup "Trace"
  (
    popup "List"
    (
      separator
      menuitem "&Task Switches"     "Trace.List List.TASK"
      menuitem "&Default and Tasks" "Trace.List List.TASK DEFault"
    )
  )
  popup "Perf"
  (
    separator
    popup "&Task Runtime"
    (
        menuitem "&Prepare"
        (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
        )
	    Break.Delete /Alpha
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
        )
        menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASK"
        menuitem "[:achart]Show as &Timing" "Trace.CHART.TASK"
        menuitem "[:achart]Tracking with Trace &List"
        (
          Trace.List List.TASK DEFault /Track
          Trace.CHART.TASK /Track
        )
    )
    popup "Task &Function Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
          Analyzer.STATistic.PreFetch on
        )

        if (ice()||fire())&&!a.mode.flow()
        (
          if a.config.hac()
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak
               Sample.Enable if BetaBreak
               Mark.A        if AlphaBreak
               Mark.B        if BetaBreak
             )
          )
          else
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak||BetaBreak
               Mark.A if AlphaBreak
               Mark.B if BetaBreak
             )
          )
	    )

        Break.Delete /Alpha /Beta /Charly
        Break.SetFunc
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
      )
      menuitem "[:perf]Show &Numerical"     "Trace.STATistic.TASKFUNC"
      menuitem "[:perf]Show as &Tree"       "Trace.STATistic.TASKTREE"
      menuitem "[:perf]Show &Detailed Tree" "Trace.STATistic.TASKTREE ALL"
      menuitem "[:achart]Show as &Timing"   "Trace.CHART.TASKFUNC"
      menuitem "[:alist]Show N&esting"      "Trace.List List.TASK FUNC TI.FUNC"
    )
    popup "Task &Status"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
        )
	    Break.Delete /Alpha
	    Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
	    TASK.TASKState
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASKSTATE"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASKSTATE"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASKSTATE /Track
      )
    )
  )
  popup "&Help"
  (
    MENUITEM "[:manual]OS Awareness Manual RTEMS" "HELP __RTOS_RTEMS_"
  )
)


menu "task.info"
(
    default
    menuitem "Display Open"
    (
        &key=track.string()
        TASK.INFO.&key
    )
    menuitem "Display Object Table"
    (
        &address=address.offset(track.address())
        &symbol=y.name(d:&address)
        Var.View %o &symbol
    )
)


menu "task.info.i"
(
    default
    menuitem "Display Objects"
    (
        &cmd=track.string()
        print "&cmd"
        &cmd
    )
    menuitem "Display Information struct"
    (
        &address=address.offset(track.address())
        &symbol=y.name(d:&address)
        Var.View %o &symbol
    )
)


menu "task.t"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.Thread &address
  )
  menuitem "Display Thread struct"
  (
    &address=address.offset(track.address())
    Var.View %o (Thread_Control*)&address
  )
  separator
  menuitem "Display Stack Frame"
  (
    &magic=track.address()
    Var.Frame /Locals /Caller /Task &magic
  )
  menuitem "Switch Context"      "Register.TASK address.offset(track.address())"
  separator
  menuitem "Add to Stack Cov"    "TASK.STK.ADD address.offset(track.address())"
  menuitem "Rm from Stack Cov"   "TASK.STK.RM  address.offset(track.address())"
  separator
  menuitem "Dump thread entry"   "Data.dump track.address() /l /dialog"
)


menu "task.int.m"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.INTernal.Mutex &address
  )
  menuitem "Display Mutex struct"
  (
    &address=address.offset(track.address())
    Var.View %o (API_Mutex_Control*)&address
  )
  menuitem "Dump Mutex Entry"   "Data.dump track.address() /l /dialog"
)


menu "task.r.ti"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.CLassic.TImer &address
  )
  menuitem "Display Timer struct"
  (
    &address=address.offset(track.address())
    Var.View %o (Timer_Control*)&address
  )
  menuitem "Dump Timer Entry"   "Data.dump track.address() /l /dialog"
)


menu "task.r.s"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.CLassic.Semaphore &address
  )
  menuitem "Display Semaphore struct"
  (
    &address=address.offset(track.address())
    Var.View %o (Semaphore_Control*)&address
  )
  menuitem "Dump Semaphore Entry"   "Data.dump track.address() /l /dialog"
)


menu "task.r.mq"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.CLassic.MsgQueue &address
  )
  menuitem "Display Message queue struct"
  (
    &address=address.offset(track.address())
    Var.View %o (Message_queue_Control*)&address
  )
  menuitem "Dump Message queue Entry"   "Data.dump track.address() /l /dialog"
)


menu "task.r.p"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.CLassic.Partition &address
  )
  menuitem "Display Partition struct"
  (
    &address=address.offset(track.address())
    Var.View %o (Partition_Control*)&address
  )
  menuitem "Dump Partition Entry"   "Data.dump track.address() /l /dialog"
)


menu "task.r.r"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.CLassic.Region &address
  )
  menuitem "Display Region struct"
  (
    &address=address.offset(track.address())
    Var.View %o (Region_Control*)&address
  )
  menuitem "Dump Region Entry"   "Data.dump track.address() /l /dialog"
)


menu "task.r.po"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.CLassic.POrt &address
  )
  menuitem "Display Port struct"
  (
    &address=address.offset(track.address())
    Var.View %o (Dual_ported_memory_Control*)&address
  )
  menuitem "Dump Port Entry"   "Data.dump track.address() /l /dialog"
)


menu "task.r.pe"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.CLassic.PEriod &address
  )
  menuitem "Display Period struct"
  (
    &address=address.offset(track.address())
    Var.View %o (Rate_monotonic_Control*)&address
  )
  menuitem "Dump Period Entry"   "Data.dump track.address() /l /dialog"
)


menu "task.r.e"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.CLassic.Extension &address
  )
  menuitem "Display Extension struct"
  (
    &address=address.offset(track.address())
    Var.View %o (Extension_Control*)&address
  )
  menuitem "Dump Extension Entry"   "Data.dump track.address() /l /dialog"
)


menu "task.p.k"
(
  default
  menuitem "Display Detailed"
  (
    LOCAL &magic
    &magic=address.offset(track.address())
    TASK.Posix.Keys &magic
  )
  menuitem "Display Keys struct"
  (
    LOCAL &address
    &address=track.address()
    Var.View %Open (POSIX_Keys_Control*)(&address)
  )
  menuitem "Dump Keys Entry"
  (
    LOCAL &address
    &address=track.address()
    Data.dump &address /Long /Dialog
  )
)


menu "task.p.m"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.Posix.Mutex &address
  )
  menuitem "Display Mutex struct"
  (
    &address=address.offset(track.address())
    Var.View %o (POSIX_Mutex_Control*)&address
  )
  menuitem "Dump Mutex Entry"   "Data.dump track.address() /l /dialog"
)


menu "task.p.cv"
(
  default
  menuitem "Display Detailed"
  (
    &address=address.offset(track.address())
    TASK.Posix.CondVar &address
  )
  menuitem "Display Condition Variable struct"
  (
    &address=address.offset(track.address())
    Var.View %o (POSIX_Condition_variables_Control*)&address
  )
  menuitem "Dump Condition Variable Entry"   "Data.dump track.address() /l /dialog"
)



<?xml version="1.0" encoding="iso-8859-1" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="t32transform.xsl"?>
<TRACE32 file="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Gen\20210610_TRACE32_20_02\Failsafe-TestSpec_RS4_0104\Report\DCU15_FAILSAFE_001_BAT\MANDO_FailSafe_Integration\prost_cstart\func-p-800058b8-80005b29.xml">
	<coverage>
		<COVerage.EXPORT.ListLine ts="1623300795" t32ver="R.2020.09.000128638" t32pv="TRICORE" cpu="TC397XE" metric="object">
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\Rte_SWC_Diag</tree>
				<cov>partial</cov>
				<exec metric="object">50.847%</exec>
				<branches>-</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>0</never>
				<bytes>590</bytes>
				<bytesok>300</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_HWFailure</tree>
				<cov>partial</cov>
				<exec metric="object">16.831%</exec>
				<branches>10.000%</branches>
				<ok>0</ok>
				<taken>1</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>202</bytes>
				<bytesok>34</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\SWC_Failsafe</tree>
				<cov>partial</cov>
				<exec metric="object">67.441%</exec>
				<branches>-</branches>
				<ok>4</ok>
				<taken>11</taken>
				<nottaken>21</nottaken>
				<bytes>1548</bytes>
				<bytesok>1044</bytesok>
			</module>
			<module>
				<addrFrom>P:80002C38</addrFrom>
				<addrTo>P:80002DC9</addrTo>
				<tree>\\MANDO_FailSafe_Integration\FS_BatteryVoltage</tree>
				<cov>partial</cov>
				<exec metric="object">83.582%</exec>
				<branches>68.750%</branches>
				<ok>12</ok>
				<taken>3</taken>
				<nottaken>6</nottaken>
				<never>3</never>
				<bytes>402</bytes>
				<bytesok>336</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_CANBusOff</tree>
				<cov>partial</cov>
				<exec metric="object">45.736%</exec>
				<branches>1.215%</branches>
				<ok>0</ok>
				<taken>6</taken>
				<nottaken>2</nottaken>
				<never>321</never>
				<bytes>258</bytes>
				<bytesok>118</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_CANTimeout</tree>
				<cov>partial</cov>
				<exec metric="object">37.582%</exec>
				<branches>16.413%</branches>
				<ok>8</ok>
				<taken>82</taken>
				<nottaken>10</nottaken>
				<never>229</never>
				<bytes>2432</bytes>
				<bytesok>914</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_InvalidSignal</tree>
				<cov>partial</cov>
				<exec metric="object">54.381%</exec>
				<branches>34.650%</branches>
				<ok>3</ok>
				<taken>130</taken>
				<nottaken>92</nottaken>
				<never>104</never>
				<bytes>5866</bytes>
				<bytesok>3190</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_SWFailure</tree>
				<cov>partial</cov>
				<exec metric="object">36.224%</exec>
				<branches>1.215%</branches>
				<ok>0</ok>
				<taken>7</taken>
				<nottaken>1</nottaken>
				<never>321</never>
				<bytes>392</bytes>
				<bytesok>142</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>5</never>
				<bytes>806</bytes>
				<bytesok>0</bytesok>
				<function>
					<addrFrom>P:800058B8</addrFrom>
					<addrTo>P:80005B29</addrTo>
					<tree uid="p-800058b8-80005b29">\\MANDO_FailSafe_Integration\prost_cstart\start</tree>
					<cov>never</cov>
					<exec metric="object">0.000%</exec>
					<branches>0.000%</branches>
					<ok>0</ok>
					<taken>0</taken>
					<nottaken>0</nottaken>
					<never>5</never>
					<bytes>626</bytes>
					<bytesok>0</bytesok>
					<line>
						<addrFrom>P:8000595E</addrFrom>
						<addrTo>P:80005969</addrTo>
						<tree>prost_cstart.c \253--266</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800058B8</addrFrom>
						<addrTo>P:800058C9</addrTo>
						<tree>prost_cstart.c \267--283</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800058CA</addrFrom>
						<addrTo>P:800058DB</addrTo>
						<tree>prost_cstart.c \284--291</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800058DC</addrFrom>
						<addrTo>P:800058ED</addrTo>
						<tree>prost_cstart.c \292--299</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800058EE</addrFrom>
						<addrTo>P:800058FF</addrTo>
						<tree>prost_cstart.c \300--307</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005900</addrFrom>
						<addrTo>P:80005911</addrTo>
						<tree>prost_cstart.c \308--315</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005912</addrFrom>
						<addrTo>P:8000591D</addrTo>
						<tree>prost_cstart.c \316--348</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000591E</addrFrom>
						<addrTo>P:80005929</addrTo>
						<tree>prost_cstart.c \349--360</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000592A</addrFrom>
						<addrTo>P:80005935</addrTo>
						<tree>prost_cstart.c \361--367</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005936</addrFrom>
						<addrTo>P:80005941</addrTo>
						<tree>prost_cstart.c \368--373</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005942</addrFrom>
						<addrTo>P:8000594D</addrTo>
						<tree>prost_cstart.c \374--376</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000594E</addrFrom>
						<addrTo>P:80005959</addrTo>
						<tree>prost_cstart.c \377--379</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000595A</addrFrom>
						<addrTo>P:8000595D</addrTo>
						<tree>prost_cstart.c \380--387</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000596A</addrFrom>
						<addrTo>P:8000596D</addrTo>
						<tree>prost_cstart.c \388--393</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000596E</addrFrom>
						<addrTo>P:80005971</addrTo>
						<tree>prost_cstart.c \394--394</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005972</addrFrom>
						<addrTo>P:80005979</addrTo>
						<tree>prost_cstart.c \395--395</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000598A</addrFrom>
						<addrTo>P:80005997</addrTo>
						<tree>prost_cstart.c \396--453</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800059C2</addrFrom>
						<addrTo>P:800059CB</addrTo>
						<tree>prost_cstart.c \454--472</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \473--494</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800059F6</addrFrom>
						<addrTo>P:80005A07</addrTo>
						<tree>prost_cstart.c \495--519</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A08</addrFrom>
						<addrTo>P:80005A15</addrTo>
						<tree>prost_cstart.c \520--530</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A16</addrFrom>
						<addrTo>P:80005A1D</addrTo>
						<tree>prost_cstart.c \531--531</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A1E</addrFrom>
						<addrTo>P:80005A29</addrTo>
						<tree>prost_cstart.c \532--686</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A2A</addrFrom>
						<addrTo>P:80005A35</addrTo>
						<tree>prost_cstart.c \687--690</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A36</addrFrom>
						<addrTo>P:80005A3B</addrTo>
						<tree>prost_cstart.c \691--694</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A3C</addrFrom>
						<addrTo>P:80005A47</addrTo>
						<tree>prost_cstart.c \695--702</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A48</addrFrom>
						<addrTo>P:80005A4F</addrTo>
						<tree>prost_cstart.c \703--704</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A50</addrFrom>
						<addrTo>P:80005A5B</addrTo>
						<tree>prost_cstart.c \705--705</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A5C</addrFrom>
						<addrTo>P:80005A67</addrTo>
						<tree>prost_cstart.c \706--837</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A68</addrFrom>
						<addrTo>P:80005A71</addrTo>
						<tree>prost_cstart.c \838--865</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A8A</addrFrom>
						<addrTo>P:80005A91</addrTo>
						<tree>prost_cstart.c \866--1112</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A92</addrFrom>
						<addrTo>P:80005A93</addrTo>
						<tree>prost_cstart.c \1113--1113</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A94</addrFrom>
						<addrTo>P:80005A9B</addrTo>
						<tree>prost_cstart.c \1114--1115</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A9C</addrFrom>
						<addrTo>P:80005A9D</addrTo>
						<tree>prost_cstart.c \1116--1116</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005A9E</addrFrom>
						<addrTo>P:80005AA5</addrTo>
						<tree>prost_cstart.c \1117--1126</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AA6</addrFrom>
						<addrTo>P:80005AA7</addrTo>
						<tree>prost_cstart.c \1127--1127</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AA8</addrFrom>
						<addrTo>P:80005AAF</addrTo>
						<tree>prost_cstart.c \1128--1129</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AB0</addrFrom>
						<addrTo>P:80005AB1</addrTo>
						<tree>prost_cstart.c \1130--1130</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AB4</addrFrom>
						<addrTo>P:80005ABD</addrTo>
						<tree>prost_cstart.c \1131--1140</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005ABE</addrFrom>
						<addrTo>P:80005AC5</addrTo>
						<tree>prost_cstart.c \1141--1141</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AB2</addrFrom>
						<addrTo>P:80005AB3</addrTo>
						<tree>prost_cstart.c \1142--1157</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AB4</addrFrom>
						<addrTo>P:80005ABD</addrTo>
						<tree>prost_cstart.c \1158--1158</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AC6</addrFrom>
						<addrTo>P:80005ACD</addrTo>
						<tree>prost_cstart.c \1159--1163</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \1164--1165</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AD2</addrFrom>
						<addrTo>P:80005AD3</addrTo>
						<tree>prost_cstart.c \1166--1167</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AD6</addrFrom>
						<addrTo>P:80005AD7</addrTo>
						<tree>prost_cstart.c \1168--1169</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \1170--1171</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AE0</addrFrom>
						<addrTo>P:80005AE3</addrTo>
						<tree>prost_cstart.c \1172--1172</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AE8</addrFrom>
						<addrTo>P:80005AE9</addrTo>
						<tree>prost_cstart.c \1173--1173</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AEA</addrFrom>
						<addrTo>P:80005AEB</addrTo>
						<tree>prost_cstart.c \1174--1174</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AEC</addrFrom>
						<addrTo>P:80005AED</addrTo>
						<tree>prost_cstart.c \1175--1176</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AEE</addrFrom>
						<addrTo>P:80005AF5</addrTo>
						<tree>prost_cstart.c \1177--1177</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005AFC</addrFrom>
						<addrTo>P:80005B03</addrTo>
						<tree>prost_cstart.c \1178--1180</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005B04</addrFrom>
						<addrTo>P:80005B07</addrTo>
						<tree>prost_cstart.c \1181--1196</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005B08</addrFrom>
						<addrTo>P:80005B0F</addrTo>
						<tree>prost_cstart.c \1197--1244</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005B10</addrFrom>
						<addrTo>P:80005B1B</addrTo>
						<tree>prost_cstart.c \1245--1250</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005B1C</addrFrom>
						<addrTo>P:80005B29</addrTo>
						<tree>prost_cstart.c \1251--1261</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \1262--1316</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>22</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \1338--1338</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \1339--1339</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \1340--1340</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \1341--1360</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>20</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \1374--1374</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \1375--1375</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>prost_cstart.c \1376--1376</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<total>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>4</never>
						<bytes>644</bytes>
						<bytesok>0</bytesok>
					</total>
				</function>
				<total>
					<cov>never</cov>
					<exec metric="object">0.000%</exec>
					<branches>0.000%</branches>
					<ok>0</ok>
					<taken>0</taken>
					<nottaken>0</nottaken>
					<never>5</never>
					<bytes>626</bytes>
					<bytesok>0</bytesok>
				</total>
			</module>
			<module>
				<addrFrom>P:80005B2A</addrFrom>
				<addrTo>P:80005CBB</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc1</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>402</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:80005CBC</addrFrom>
				<addrTo>P:80005E4D</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc2</tree>
				<cov>partial</cov>
				<exec metric="object">79.104%</exec>
				<branches>75.000%</branches>
				<ok>2</ok>
				<taken>1</taken>
				<nottaken>1</nottaken>
				<never>0</never>
				<bytes>402</bytes>
				<bytesok>318</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc3</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc4</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_main</tree>
				<cov>partial</cov>
				<exec metric="object">24.691%</exec>
				<branches>25.000%</branches>
				<ok>1</ok>
				<taken>1</taken>
				<nottaken>1</nottaken>
				<never>5</never>
				<bytes>324</bytes>
				<bytesok>80</bytesok>
			</module>
			<module>
				<addrFrom>P:80006180</addrFrom>
				<addrTo>P:80006315</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc5</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:80006456</addrFrom>
				<addrTo>P:80006485</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_stubs</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>2</never>
				<bytes>48</bytes>
				<bytesok>0</bytesok>
			</module>
			<total>
				<cov>partial</cov>
				<exec metric="object">43.492%</exec>
				<branches>15.740%</branches>
				<ok>30</ok>
				<taken>242</taken>
				<nottaken>134</nottaken>
				<never>979</never>
				<bytes>14890</bytes>
				<bytesok>6476</bytesok>
			</total>
		</COVerage.EXPORT.ListLine>
	</coverage>
	<marker>
		<BookMark.EXPORT ts="1623300795" t32ver="R.2020.09.000128638" t32pv="TRICORE" cpu="TC397XE">
		</BookMark.EXPORT>
	</marker>
	<listing>
		<List.EXPORT ts="1623300795" t32ver="R.2020.09.000128638" t32pv="TRICORE" order="source">
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>253</line><src>}</src></hll>
				<hll><line>254</line><src></src></hll>
				<hll><line>255</line><src>static void inline reset_psw( void )</src></hll>
				<hll><line>256</line><src>{</src></hll>
				<hll><line>257</line><src>        unsigned int    value = 0x980;  /* Reset value */</src></hll>
				<hll><line>258</line><src></src></hll>
				<hll><line>259</line><src>        value |= (__CDC &amp; 0x7f);        /* PSW.CDC call depth counter */</src></hll>
				<hll><line>260</line><src></src></hll>
				<hll><line>261</line><src>#if __USER_STACK</src></hll>
				<hll><line>262</line><src>        value &amp;= ~0x200;                /* clear PSW.IS */</src></hll>
				<hll><line>263</line><src>#else</src></hll>
				<hll><line>264</line><src>        value |= 0x200;                 /* set PSW.IS */</src></hll>
				<hll><line>265</line><src>#endif</src></hll>
				<hll><cov>never</cov><line>266</line><src>        __mtcr(PSW, value);</src></hll>
				<asm><cov>never</cov><addr>P:8000595E</addr><code>F098003B</code><mnemonic>mov       d15,#0x980</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005962</addr><code>0FE04FCD</code><mnemonic>mtcr      #0xFE04,d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005966</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>267</line><src>}</src></hll>
				<hll><line>268</line><src></src></hll>
				<hll><line>269</line><src>/*********************************************************************************</src></hll>
				<hll><line>270</line><src> * startup code</src></hll>
				<hll><line>271</line><src> *********************************************************************************/</src></hll>
				<hll><line>272</line><src></src></hll>
				<hll><line>273</line><src>static void __noinline__ __noreturn__ __jump__ _start( void )</src></hll>
				<hll><line>274</line><src>{</src></hll>
				<hll><line>275</line><src></src></hll>
				<hll><line>276</line><src>#if ( defined _REGUSERDEF16X_H || defined _REGUSERDEF162_H || defined _REGTC27X_H || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H || defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC29X_H || defined _REGTC29XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H)</src></hll>
				<hll><line>277</line><src>#if __STADD_INIT_TC1</src></hll>
				<hll><line>278</line><src>        /*</src></hll>
				<hll><line>279</line><src>         * Set start address of TC1</src></hll>
				<hll><line>280</line><src>         * Reset value is 0xAFFFC000</src></hll>
				<hll><line>281</line><src>         */</src></hll>
				<hll><line>282</line><src>        extern void __noinline__ __noreturn__ __jump__ _start_tc1( void );</src></hll>
				<hll><cov>never</cov><line>283</line><src>        CPU1_PC.U = (unsigned int)_start_tc1;</src></hll>
				<asm><cov>never</cov><addr>P:800058B8</addr><code>F8000091</code><label>_start:                                                                                                                                                                                                                                                         </label><mnemonic>movh.a    a15,#0x8000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058BC</addr><code>25F8FFD9</code><mnemonic>lea       a15,[a15]0x5CB8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058C0</addr><code>FF80</code><mnemonic>mov16.d   d15,a15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058C2</addr><code>FF884091</code><mnemonic>movh.a    a15,#0xF884</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058C6</addr><code>8FC8FF59</code><mnemonic>st.w      [a15]-0x1F8,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>284</line><src>#endif</src></hll>
				<hll><line>285</line><src>#if __STADD_INIT_TC2 &amp;&amp; !( defined _REGTC26X_H || defined _REGTC26XB_H )</src></hll>
				<hll><line>286</line><src>        /*</src></hll>
				<hll><line>287</line><src>         * Set start address of TC2</src></hll>
				<hll><line>288</line><src>         * Reset value is 0xAFFFC000</src></hll>
				<hll><line>289</line><src>         */</src></hll>
				<hll><line>290</line><src>        extern void __noinline__ __noreturn__ __jump__ _start_tc2( void );</src></hll>
				<hll><cov>never</cov><line>291</line><src>        CPU2_PC.U = (unsigned int)_start_tc2;</src></hll>
				<asm><cov>never</cov><addr>P:800058CA</addr><code>28000091</code><mnemonic>movh.a    a2,#0x8000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058CE</addr><code>95CA22D9</code><mnemonic>lea       a2,[a2]0x5E4A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058D2</addr><code>2F80</code><mnemonic>mov16.d   d15,a2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058D4</addr><code>2F886091</code><mnemonic>movh.a    a2,#0xF886</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058D8</addr><code>8FC82F59</code><mnemonic>st.w      [a2]-0x1F8,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>292</line><src>#endif</src></hll>
				<hll><line>293</line><src>#if __STADD_INIT_TC3 &amp;&amp; ( defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><line>294</line><src>        /*</src></hll>
				<hll><line>295</line><src>         * Set start address of TC3</src></hll>
				<hll><line>296</line><src>         * Reset value is 0xAFFFC000</src></hll>
				<hll><line>297</line><src>         */</src></hll>
				<hll><line>298</line><src>        extern void __noinline__ __noreturn__ __jump__ _start_tc3( void );</src></hll>
				<hll><cov>never</cov><line>299</line><src>        CPU3_PC.U = (unsigned int)_start_tc3;</src></hll>
				<asm><cov>never</cov><addr>P:800058DC</addr><code>48000091</code><mnemonic>movh.a    a4,#0x8000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058E0</addr><code>95E444D9</code><mnemonic>lea       a4,[a4]0x5E64</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058E4</addr><code>4F80</code><mnemonic>mov16.d   d15,a4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058E6</addr><code>4F888091</code><mnemonic>movh.a    a4,#0xF888</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058EA</addr><code>8FC84F59</code><mnemonic>st.w      [a4]-0x1F8,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>300</line><src>#endif</src></hll>
				<hll><line>301</line><src>#if __STADD_INIT_TC4 &amp;&amp; ( defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><line>302</line><src>        /*</src></hll>
				<hll><line>303</line><src>         * Set start address of TC4</src></hll>
				<hll><line>304</line><src>         * Reset value is 0xAFFFC000</src></hll>
				<hll><line>305</line><src>         */</src></hll>
				<hll><line>306</line><src>        extern void __noinline__ __noreturn__ __jump__ _start_tc4( void );</src></hll>
				<hll><cov>never</cov><line>307</line><src>        CPU4_PC.U = (unsigned int)_start_tc4;</src></hll>
				<asm><cov>never</cov><addr>P:800058EE</addr><code>58000091</code><mnemonic>movh.a    a5,#0x8000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058F2</addr><code>95E855D9</code><mnemonic>lea       a5,[a5]0x5E68</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058F6</addr><code>5F80</code><mnemonic>mov16.d   d15,a5</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058F8</addr><code>5F88A091</code><mnemonic>movh.a    a5,#0xF88A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800058FC</addr><code>8FC85F59</code><mnemonic>st.w      [a5]-0x1F8,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>308</line><src>#endif</src></hll>
				<hll><line>309</line><src>#if __STADD_INIT_TC5 &amp;&amp; ( defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><line>310</line><src>        /*</src></hll>
				<hll><line>311</line><src>         * Set start address of TC5</src></hll>
				<hll><line>312</line><src>         * Reset value is 0xAFFFC000</src></hll>
				<hll><line>313</line><src>         */</src></hll>
				<hll><line>314</line><src>        extern void __noinline__ __noreturn__ __jump__ _start_tc5( void );</src></hll>
				<hll><cov>never</cov><line>315</line><src>        CPU5_PC.U = (unsigned int)_start_tc5;</src></hll>
				<asm><cov>never</cov><addr>P:80005900</addr><code>68000091</code><mnemonic>movh.a    a6,#0x8000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005904</addr><code>C61266D9</code><mnemonic>lea       a6,[a6]0x6312</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005908</addr><code>6F80</code><mnemonic>mov16.d   d15,a6</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000590A</addr><code>6F88E091</code><mnemonic>movh.a    a6,#0xF88E</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000590E</addr><code>8FC86F59</code><mnemonic>st.w      [a6]-0x1F8,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>316</line><src>#endif</src></hll>
				<hll><line>317</line><src></src></hll>
				<hll><line>318</line><src>#if (__HALT_INIT_TC1 &amp;&amp; (__HALT_VALUE_TC1 &amp; 0x2)) || (__HALT_INIT_TC2 &amp;&amp; (__HALT_VALUE_TC2 &amp; 0x2)) || (__HALT_INIT_TC3 &amp;&amp; (__HALT_VALUE_TC3 &amp; 0x2)) || (__HALT_INIT_TC4 &amp;&amp; (__HALT_VALUE_TC4 &amp; 0x2)) || (__HALT_INIT_TC5 &amp;&amp; (__HALT_VALUE_TC5 &amp; 0x2))</src></hll>
				<hll><line>319</line><src>#if __C_INIT || __CLOCKS_PER_SEC_INIT || __PROF_ENABLE__ || _CALL_ENDINIT || (defined __CALL_INIT)</src></hll>
				<hll><line>320</line><src>        /*</src></hll>
				<hll><line>321</line><src>         *      Clear end of c init semaphores for the cores that are released.</src></hll>
				<hll><line>322</line><src>         */</src></hll>
				<hll><line>323</line><src>#if __HALT_INIT_TC1 &amp;&amp; __HALT_VALUE_TC1==2</src></hll>
				<hll><line>324</line><src>#define __TC1_END_C_INIT_MASK   0</src></hll>
				<hll><line>325</line><src>#else</src></hll>
				<hll><line>326</line><src>#define __TC1_END_C_INIT_MASK   1&lt;&lt;1</src></hll>
				<hll><line>327</line><src>#endif</src></hll>
				<hll><line>328</line><src>#if __HALT_INIT_TC2 &amp;&amp; !( defined _REGTC26X_H || defined _REGTC26XB_H ) &amp;&amp; __HALT_VALUE_TC2==2</src></hll>
				<hll><line>329</line><src>#define __TC2_END_C_INIT_MASK   0</src></hll>
				<hll><line>330</line><src>#else</src></hll>
				<hll><line>331</line><src>#define __TC2_END_C_INIT_MASK   1&lt;&lt;2</src></hll>
				<hll><line>332</line><src>#endif</src></hll>
				<hll><line>333</line><src>#if __HALT_INIT_TC3 &amp;&amp; ( defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H ) &amp;&amp; __HALT_VALUE_TC3==2</src></hll>
				<hll><line>334</line><src>#define __TC3_END_C_INIT_MASK   0</src></hll>
				<hll><line>335</line><src>#else</src></hll>
				<hll><line>336</line><src>#define __TC3_END_C_INIT_MASK   1&lt;&lt;3</src></hll>
				<hll><line>337</line><src>#endif</src></hll>
				<hll><line>338</line><src>#if __HALT_INIT_TC4 &amp;&amp; ( defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H ) &amp;&amp; __HALT_VALUE_TC4==2</src></hll>
				<hll><line>339</line><src>#define __TC4_END_C_INIT_MASK   0</src></hll>
				<hll><line>340</line><src>#else</src></hll>
				<hll><line>341</line><src>#define __TC4_END_C_INIT_MASK   1&lt;&lt;4</src></hll>
				<hll><line>342</line><src>#endif</src></hll>
				<hll><line>343</line><src>#if __HALT_INIT_TC5 &amp;&amp; ( defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H ) &amp;&amp; __HALT_VALUE_TC5==2</src></hll>
				<hll><line>344</line><src>#define __TC5_END_C_INIT_MASK   0</src></hll>
				<hll><line>345</line><src>#else</src></hll>
				<hll><line>346</line><src>#define __TC5_END_C_INIT_MASK   1&lt;&lt;5</src></hll>
				<hll><line>347</line><src>#endif</src></hll>
				<hll><cov>never</cov><line>348</line><src>        _tcx_end_c_init = __TC1_END_C_INIT_MASK|__TC2_END_C_INIT_MASK|__TC3_END_C_INIT_MASK|__TC4_END_C_INIT_MASK|__TC5_END_C_INIT_MASK;</src></hll>
				<asm><cov>never</cov><addr>P:80005912</addr><code>C7000091</code><mnemonic>movh.a    a12,#0x7000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005916</addr><code>0A00CC49</code><mnemonic>lea       a12,[a12]0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000591A</addr><code>00DA</code><mnemonic>mov16     d15,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000591C</addr><code>CF74</code><mnemonic>st16.w    [a12],d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>349</line><src>#endif</src></hll>
				<hll><line>350</line><src>#endif</src></hll>
				<hll><line>351</line><src>        /*</src></hll>
				<hll><line>352</line><src>         * A core can be released by resetting its halt state.</src></hll>
				<hll><line>353</line><src>         * HALT: 0 R:running W:unchanged</src></hll>
				<hll><line>354</line><src>         *       1 R:halted  W:unchanged</src></hll>
				<hll><line>355</line><src>         *       2 R:n.a.    W:reset halt</src></hll>
				<hll><line>356</line><src>         *       3 R:n.a.    W:set halt when debug enable</src></hll>
				<hll><line>357</line><src>         */</src></hll>
				<hll><line>358</line><src>#if __HALT_INIT_TC1</src></hll>
				<hll><line>359</line><src>#if ( defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><cov>never</cov><line>360</line><src>        CPU1_SYSCON.B.BHALT=__CLR_BHALT;</src></hll>
				<asm><cov>never</cov><addr>P:8000591E</addr><code>8FD4FF19</code><mnemonic>ld.w      d15,[a15]-0x1EC</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005922</addr><code>FC010FB7</code><mnemonic>insert    d15,d15,#0x0,0x18,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005926</addr><code>8FD4FF59</code><mnemonic>st.w      [a15]-0x1EC,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>361</line><src>#else</src></hll>
				<hll><line>362</line><src>        CPU1_DBGSR.B.HALT=__HALT_VALUE_TC1;</src></hll>
				<hll><line>363</line><src>#endif</src></hll>
				<hll><line>364</line><src>#endif</src></hll>
				<hll><line>365</line><src>#if __HALT_INIT_TC2 &amp;&amp; !( defined _REGTC26X_H || defined _REGTC26XB_H )</src></hll>
				<hll><line>366</line><src>#if ( defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><cov>never</cov><line>367</line><src>        CPU2_SYSCON.B.BHALT=__CLR_BHALT;</src></hll>
				<asm><cov>never</cov><addr>P:8000592A</addr><code>8FD42F19</code><mnemonic>ld.w      d15,[a2]-0x1EC</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000592E</addr><code>FC010FB7</code><mnemonic>insert    d15,d15,#0x0,0x18,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005932</addr><code>8FD42F59</code><mnemonic>st.w      [a2]-0x1EC,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>368</line><src>#else</src></hll>
				<hll><line>369</line><src>        CPU2_DBGSR.B.HALT=__HALT_VALUE_TC2;</src></hll>
				<hll><line>370</line><src>#endif</src></hll>
				<hll><line>371</line><src>#endif</src></hll>
				<hll><line>372</line><src>#if __HALT_INIT_TC3 &amp;&amp; ( defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><cov>never</cov><line>373</line><src>        CPU3_SYSCON.B.BHALT=__CLR_BHALT;</src></hll>
				<asm><cov>never</cov><addr>P:80005936</addr><code>8FD44F19</code><mnemonic>ld.w      d15,[a4]-0x1EC</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000593A</addr><code>FC010FB7</code><mnemonic>insert    d15,d15,#0x0,0x18,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000593E</addr><code>8FD44F59</code><mnemonic>st.w      [a4]-0x1EC,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>374</line><src>#endif</src></hll>
				<hll><line>375</line><src>#if __HALT_INIT_TC4 &amp;&amp; ( defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><cov>never</cov><line>376</line><src>        CPU4_SYSCON.B.BHALT=__CLR_BHALT;</src></hll>
				<asm><cov>never</cov><addr>P:80005942</addr><code>8FD45F19</code><mnemonic>ld.w      d15,[a5]-0x1EC</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005946</addr><code>FC010FB7</code><mnemonic>insert    d15,d15,#0x0,0x18,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000594A</addr><code>8FD45F59</code><mnemonic>st.w      [a5]-0x1EC,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>377</line><src>#endif</src></hll>
				<hll><line>378</line><src>#if __HALT_INIT_TC5 &amp;&amp; ( defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><cov>never</cov><line>379</line><src>        CPU5_SYSCON.B.BHALT=__CLR_BHALT;</src></hll>
				<asm><cov>never</cov><addr>P:8000594E</addr><code>8FD46F19</code><mnemonic>ld.w      d15,[a6]-0x1EC</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005952</addr><code>FC010FB7</code><mnemonic>insert    d15,d15,#0x0,0x18,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005956</addr><code>8FD46F59</code><mnemonic>st.w      [a6]-0x1EC,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>380</line><src>#endif</src></hll>
				<hll><line>381</line><src>#endif  </src></hll>
				<hll><line>382</line><src>        </src></hll>
				<hll><line>383</line><src>        /* Do a dsync before changing any of the csfr values, thus any previous</src></hll>
				<hll><line>384</line><src>         * background state gets flushed first. Required for applications that jump</src></hll>
				<hll><line>385</line><src>         * to the reset address.</src></hll>
				<hll><line>386</line><src>         */</src></hll>
				<hll><cov>never</cov><line>387</line><src>        __dsync();</src></hll>
				<asm><cov>never</cov><addr>P:8000595A</addr><code>0480000D</code><mnemonic>dsync     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>388</line><src>        </src></hll>
				<hll><line>389</line><src>        /* Set the PSW to its reset value in case of a warm start */</src></hll>
				<hll><line>390</line><src>        reset_psw();</src></hll>
				<hll><line>391</line><src></src></hll>
				<hll><line>392</line><src>        /* Set the PCXS and PCXO to its reset value in case of a warm start */</src></hll>
				<hll><cov>never</cov><line>393</line><src>        unsigned int pcxi = __mfcr(PCXI);</src></hll>
				<asm><cov>never</cov><addr>P:8000596A</addr><code>FFE0004D</code><mnemonic>mfcr      d15,#0xFE00</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>394</line><src>        pcxi &amp;= 0xfff00000;</src></hll>
				<asm><cov>never</cov><addr>P:8000596E</addr><code>F0140FB7</code><mnemonic>insert    d15,d15,#0x0,0x0,#0x14</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>395</line><src>        __mtcr(PCXI, pcxi);</src></hll>
				<asm><cov>never</cov><addr>P:80005972</addr><code>0FE00FCD</code><mnemonic>mtcr      #0xFE00,d15</mnemonic><comment>#65024,pcxi</comment></asm>
				<asm><cov>never</cov><addr>P:80005976</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>396</line><src></src></hll>
				<hll><line>397</line><src>        /*</src></hll>
				<hll><line>398</line><src>         * Initialize Compatibility Control Register</src></hll>
				<hll><line>399</line><src>         *</src></hll>
				<hll><line>400</line><src>         * Core is 1.3.1</src></hll>
				<hll><line>401</line><src>         * bit 0 (COMPAT.PIE)</src></hll>
				<hll><line>402</line><src>         *      Program Integrity Error Compatibility</src></hll>
				<hll><line>403</line><src>         *      0B Errors handled by CPU.</src></hll>
				<hll><line>404</line><src>         *      1B Errors flagged off-core. TriCore 1.3 backwards compatibility.</src></hll>
				<hll><line>405</line><src>         * bit 1 (COMPAT.DIE)</src></hll>
				<hll><line>406</line><src>         *      Data Integrity Error Compatibility</src></hll>
				<hll><line>407</line><src>         *      0B Errors handled by CPU.</src></hll>
				<hll><line>408</line><src>         *      1B Errors flagged off-core. TriCore 1.3 backwards compatibility.</src></hll>
				<hll><line>409</line><src>         * bit 2 (COMPAT.BP)</src></hll>
				<hll><line>410</line><src>         *      Branch Predictor Compatibility</src></hll>
				<hll><line>411</line><src>         *      0B Bi-model branch prediction.</src></hll>
				<hll><line>412</line><src>         *      1B Static branch prediction. TriCore 1.3 backwards compatibility.</src></hll>
				<hll><line>413</line><src>         *</src></hll>
				<hll><line>414</line><src>         * Core is 1.3.1, 1.6 or 1.6.x</src></hll>
				<hll><line>415</line><src>         * bit 3 (COMPAT.RM)</src></hll>
				<hll><line>416</line><src>         *      Rounding Mode Compatibility</src></hll>
				<hll><line>417</line><src>         *      0B PSW.RM not restored by RET.</src></hll>
				<hll><line>418</line><src>         *      1B PSW.RM restored by RET. TriCore 1.3 backwards compatibility.</src></hll>
				<hll><line>419</line><src>         *</src></hll>
				<hll><line>420</line><src>         * Core is 1.6 or 1.6.x</src></hll>
				<hll><line>421</line><src>         * bit 4 (COMPAT.SP)</src></hll>
				<hll><line>422</line><src>         *      SYSCON Safety Protection Mode Compatibility</src></hll>
				<hll><line>423</line><src>         *      0B SYSCON[31:1] safety endinit protected.</src></hll>
				<hll><line>424</line><src>         *      1B SYSCON[31:1] not safety endinit protected (TC1.3 behavior).</src></hll>
				<hll><line>425</line><src>         */</src></hll>
				<hll><line>426</line><src>#ifndef __CORE_TC13__</src></hll>
				<hll><line>427</line><src>#ifdef __COMPAT</src></hll>
				<hll><line>428</line><src>#if __COMPAT != 0xf</src></hll>
				<hll><line>429</line><src>#ifdef __CORE_TC131__</src></hll>
				<hll><line>430</line><src>#define __COMPAT_MASK   ~0xf</src></hll>
				<hll><line>431</line><src>#else</src></hll>
				<hll><line>432</line><src>#define __COMPAT_MASK   ~0x18</src></hll>
				<hll><line>433</line><src>#endif</src></hll>
				<hll><line>434</line><src>        __mtcr(COMPAT, (__COMPAT_MASK|__COMPAT));</src></hll>
				<hll><line>435</line><src>#endif</src></hll>
				<hll><line>436</line><src>#endif</src></hll>
				<hll><line>437</line><src>#endif</src></hll>
				<hll><line>438</line><src>        </src></hll>
				<hll><line>439</line><src>#if (  defined _REGUSERDEF16X_H || defined _REGUSERDEF162_H || defined _REGTC21X_H || defined _REGTC22X_H || defined _REGTC23X_ADAS_H || defined _REGTC23X_H || defined _REGTC27X_H || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H || defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC29X_H || defined _REGTC29XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H)</src></hll>
				<hll><line>440</line><src>        /*</src></hll>
				<hll><line>441</line><src>         * Clear the ENDINIT bit in the WDTSCON0 register in order</src></hll>
				<hll><line>442</line><src>         * to disable the write-protection for safety-critical registers</src></hll>
				<hll><line>443</line><src>         * protected via the safety EndInit feature.</src></hll>
				<hll><line>444</line><src>         */</src></hll>
				<hll><line>445</line><src>        safety_endinit_set(_ENDINIT_DISABLE);</src></hll>
				<hll><line>446</line><src>        </src></hll>
				<hll><line>447</line><src>        /*</src></hll>
				<hll><line>448</line><src>         * Disable the safety watchdog if requested. Safety watchdog</src></hll>
				<hll><line>449</line><src>         * is enabled by default. The safety watchdog is disabled after</src></hll>
				<hll><line>450</line><src>         * ENDINIT is set by safety_endinit_set().</src></hll>
				<hll><line>451</line><src>         */       </src></hll>
				<hll><line>452</line><src>#if __SAFETY_WATCHDOG_DISABLE</src></hll>
				<hll><cov>never</cov><line>453</line><src>        SCU_WDTSCON1.U |= 0x8;</src></hll>
				<asm><cov>never</cov><addr>P:8000598A</addr><code>2F003091</code><mnemonic>movh.a    a2,#0xF003</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000598E</addr><code>A62C2F19</code><mnemonic>ld.w      d15,[a2]0x62AC</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005992</addr><code>0896</code><mnemonic>or16      d15,#0x8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005994</addr><code>A62C2F59</code><mnemonic>st.w      [a2]0x62AC,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>454</line><src>        safety_endinit_set(_ENDINIT_ENABLE);</src></hll>
				<hll><line>455</line><src>        safety_endinit_set(_ENDINIT_DISABLE);</src></hll>
				<hll><line>456</line><src>#endif</src></hll>
				<hll><line>457</line><src>        </src></hll>
				<hll><line>458</line><src>#endif</src></hll>
				<hll><line>459</line><src>        </src></hll>
				<hll><line>460</line><src>        /*</src></hll>
				<hll><line>461</line><src>         * Clear the ENDINIT bit in the WDT_CON0 register in order</src></hll>
				<hll><line>462</line><src>         * to disable the write-protection for registers protected </src></hll>
				<hll><line>463</line><src>         * via the EndInit feature (for example: WDT_CON1).</src></hll>
				<hll><line>464</line><src>         */</src></hll>
				<hll><line>465</line><src>        endinit_set(_ENDINIT_DISABLE);</src></hll>
				<hll><line>466</line><src>        </src></hll>
				<hll><line>467</line><src>        /*</src></hll>
				<hll><line>468</line><src>         * Disable the Watchdog if requested. Watchdog is enabled by default.</src></hll>
				<hll><line>469</line><src>         * The Watchdog is disabled after ENDINIT is set by endinit_set().</src></hll>
				<hll><line>470</line><src>         */       </src></hll>
				<hll><line>471</line><src>#if __WATCHDOG_DISABLE</src></hll>
				<hll><cov>never</cov><line>472</line><src>        WDT_CON1.U |= 0x8;</src></hll>
				<asm><cov>never</cov><addr>P:800059C2</addr><code>96102F19</code><mnemonic>ld.w      d15,[a2]0x6250</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059C6</addr><code>0896</code><mnemonic>or16      d15,#0x8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059C8</addr><code>96102F59</code><mnemonic>st.w      [a2]0x6250,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><line>473</line><src>        endinit_set(_ENDINIT_ENABLE);</src></hll>
				<hll><line>474</line><src>        endinit_set(_ENDINIT_DISABLE);</src></hll>
				<hll><line>475</line><src>#endif</src></hll>
				<hll><line>476</line><src></src></hll>
				<hll><line>477</line><src>        /*</src></hll>
				<hll><line>478</line><src>         * PMI_TC.003 workaround:</src></hll>
				<hll><line>479</line><src>         * The TLB-A and TLB-B mappings are set to a page size of 16KB.</src></hll>
				<hll><line>480</line><src>         */</src></hll>
				<hll><line>481</line><src>#if __PMI_TC003_INITIAL__  &amp;&amp; defined MMU_CON</src></hll>
				<hll><line>482</line><src>        unsigned int mmu_con = __mfcr(MMU_CON);</src></hll>
				<hll><line>483</line><src>        mmu_con &amp;= 0xffffffe1;      /* clear SZA and SZB */</src></hll>
				<hll><line>484</line><src>        mmu_con |= 0x00000014;      /* set SZA=SZB=16k   */       </src></hll>
				<hll><line>485</line><src>        __mtcr(MMU_CON, mmu_con);</src></hll>
				<hll><line>486</line><src>#endif</src></hll>
				<hll><line>487</line><src></src></hll>
				<hll><line>488</line><src>        /*</src></hll>
				<hll><line>489</line><src>         * Load Base Address of Trap Vector Table.</src></hll>
				<hll><line>490</line><src>         * Disable this if not started from RESET vector. (E.g.</src></hll>
				<hll><line>491</line><src>         * ROM monitors require to keep in control of vectors)</src></hll>
				<hll><line>492</line><src>         */</src></hll>
				<hll><line>493</line><src>#if __BTV_INIT</src></hll>
				<hll><cov>never</cov><line>494</line><src>        __mtcr(BTV,  (unsigned int)_lc_u_trap_tab);</src></hll>
				<asm><cov>never</cov><addr>P:800059E2</addr><code>5A010091</code><mnemonic>movh.a    a5,#0xA010</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059E6</addr><code>0C0055D9</code><mnemonic>lea       a5,[a5]-0x4000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059EC</addr><code>5F80</code><mnemonic>mov16.d   d15,a5</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059EE</addr><code>0FE24FCD</code><mnemonic>mtcr      #0xFE24,d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059F2</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>495</line><src>#endif</src></hll>
				<hll><line>496</line><src></src></hll>
				<hll><line>497</line><src>        /*</src></hll>
				<hll><line>498</line><src>         * Load Base Address of Interrupt Vector Table.</src></hll>
				<hll><line>499</line><src>         * Disable this if not started from RESET vector. (E.g.</src></hll>
				<hll><line>500</line><src>         * ROM monitors require to keep in control of vectors)</src></hll>
				<hll><line>501</line><src>         */</src></hll>
				<hll><line>502</line><src>#if __BIV_INIT</src></hll>
				<hll><line>503</line><src>#if __BIV_SINGLE_INIT &amp;&amp; (defined _REGUSERDEF16X_H || defined _REGUSERDEF162_H || defined _REGTC21X_H || defined _REGTC22X_H || defined _REGTC23X_ADAS_H || defined _REGTC23X_H || defined _REGTC27X_H || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H || defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC29X_H || defined _REGTC29XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H)</src></hll>
				<hll><line>504</line><src>        /*</src></hll>
				<hll><line>505</line><src>         * Single Entry Vector Table for core tc1.6.1 or tc1.6.2 is supported</src></hll>
				<hll><line>506</line><src>         * by _sevt_isr_tc0() calling interrupt handlers installed</src></hll>
				<hll><line>507</line><src>         * with _sevt_isr_install() stored in _sevt_isrs_tc0 list.</src></hll>
				<hll><line>508</line><src>         * The _sevt_isr_tc0() is located at interrupt vector table</src></hll>
				<hll><line>509</line><src>         * entry 64. The start address of the interrupt vector table</src></hll>
				<hll><line>510</line><src>         * is defined by linker definition INTTAB0, default value</src></hll>
				<hll><line>511</line><src>         *_lc_u_int_tab is 0xa00f0000+0x800.</src></hll>
				<hll><line>512</line><src>         */</src></hll>
				<hll><line>513</line><src>#pragma extern _sevt_isr_tc0</src></hll>
				<hll><line>514</line><src>        __mtcr(BIV, (unsigned int)(_lc_u_int_tab) | (0xff&lt;&lt;3) | 1 );</src></hll>
				<hll><line>515</line><src>#else</src></hll>
				<hll><line>516</line><src>#if __BIV_8BYTE_INIT &amp;&amp; (defined _REGUSERDEF16X_H || defined _REGUSERDEF162_H || defined _REGTC21X_H || defined _REGTC22X_H || defined _REGTC23X_ADAS_H || defined _REGTC23X_H || defined _REGTC27X_H || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H || defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC29X_H || defined _REGTC29XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H)</src></hll>
				<hll><line>517</line><src>        __mtcr(BIV, (unsigned int)(_lc_u_int_tab) | 1 );        /* 8 Byte vector spacing */</src></hll>
				<hll><line>518</line><src>#else</src></hll>
				<hll><cov>never</cov><line>519</line><src>        __mtcr(BIV, (unsigned int)(_lc_u_int_tab));             /* 32 Byte vector spacing */</src></hll>
				<asm><cov>never</cov><addr>P:800059F6</addr><code>5A00F091</code><mnemonic>movh.a    a5,#0xA00F</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059FA</addr><code>000055D9</code><mnemonic>lea       a5,[a5]0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059FE</addr><code>5F80</code><mnemonic>mov16.d   d15,a5</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A00</addr><code>0FE20FCD</code><mnemonic>mtcr      #0xFE20,d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A04</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>520</line><src>#endif</src></hll>
				<hll><line>521</line><src>#endif</src></hll>
				<hll><line>522</line><src>#endif</src></hll>
				<hll><line>523</line><src></src></hll>
				<hll><line>524</line><src>        /*</src></hll>
				<hll><line>525</line><src>         * Load interrupt stack pointer.</src></hll>
				<hll><line>526</line><src>         * Disable this if not started from RESET vector. (E.g.</src></hll>
				<hll><line>527</line><src>         * ROM monitors require to keep in control of vectors)</src></hll>
				<hll><line>528</line><src>         */</src></hll>
				<hll><line>529</line><src>#if __ISP_INIT</src></hll>
				<hll><cov>never</cov><line>530</line><src>        unsigned int isp = (unsigned int)(_lc_ue_istack) &amp; STACK_ALIGN;</src></hll>
				<asm><cov>never</cov><addr>P:80005A08</addr><code>57000091</code><mnemonic>movh.a    a5,#0x7000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A0C</addr><code>004855D9</code><mnemonic>lea       a5,[a5]0x408</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A10</addr><code>5F80</code><mnemonic>mov16.d   d15,a5</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A12</addr><code>F0030FB7</code><mnemonic>insert    d15,d15,#0x0,0x0,#0x3</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>531</line><src>        __mtcr(ISP, isp);</src></hll>
				<asm><cov>never</cov><addr>P:80005A16</addr><code>0FE28FCD</code><mnemonic>mtcr      #0xFE28,d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A1A</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>532</line><src>#endif</src></hll>
				<hll><line>533</line><src>                                                          </src></hll>
				<hll><line>534</line><src>        /*</src></hll>
				<hll><line>535</line><src>         * PMU/PMI configuration.</src></hll>
				<hll><line>536</line><src>         */</src></hll>
				<hll><line>537</line><src>#if defined PMI_CON0 &amp;&amp; defined __PMI_CON0_VALUE</src></hll>
				<hll><line>538</line><src>        if(__PMI_CON0_INIT)  PMI_CON0.U = __PMI_CON0_VALUE;        </src></hll>
				<hll><line>539</line><src>#endif</src></hll>
				<hll><line>540</line><src>#if defined PMI_CON1 &amp;&amp; defined __PMI_CON1_VALUE</src></hll>
				<hll><line>541</line><src>        if(__PMI_CON1_INIT)  PMI_CON1.U = __PMI_CON1_VALUE;        </src></hll>
				<hll><line>542</line><src>#endif  </src></hll>
				<hll><line>543</line><src>#if     defined PMI_CON2 &amp;&amp; defined __PMI_CON2_VALUE &amp;&amp; \</src></hll>
				<hll><line>544</line><src>        (  defined _REGTC1337_H || defined _REGTC1367_H || defined _REGTC1387_H || defined _REGTC1728_H \</src></hll>
				<hll><line>545</line><src>        || defined _REGTC1746_H || defined _REGTC1747_H || defined _REGTC1768_H || defined _REGTC1782_H \</src></hll>
				<hll><line>546</line><src>        || defined _REGTC1784_H || defined _REGTC1184_H || defined _REGTC1797_H || defined _REGTC1197_H \</src></hll>
				<hll><line>547</line><src>        || defined _REGTC1767_H || defined _REGTC1736_H \</src></hll>
				<hll><line>548</line><src>        || defined _REGTC1738_H || defined _REGTC1167_H || defined _REGTC1724_H )</src></hll>
				<hll><line>549</line><src>        if(__PMI_CON2_INIT)  PMI_CON2.U = __PMI_CON2_VALUE;        </src></hll>
				<hll><line>550</line><src>#endif</src></hll>
				<hll><line>551</line><src>        </src></hll>
				<hll><line>552</line><src>#if defined PMU_EIFCON &amp;&amp; defined __PMU_EIFCON_VALUE</src></hll>
				<hll><line>553</line><src>        if(__PMU_EIFCON_INIT)  PMU_EIFCON.U = __PMU_EIFCON_VALUE;</src></hll>
				<hll><line>554</line><src>#endif</src></hll>
				<hll><line>555</line><src></src></hll>
				<hll><line>556</line><src>        /*</src></hll>
				<hll><line>557</line><src>         * DMI configuration.</src></hll>
				<hll><line>558</line><src>         */</src></hll>
				<hll><line>559</line><src>#if     defined DMI_CON &amp;&amp; defined __DMI_CON_VALUE &amp;&amp; \</src></hll>
				<hll><line>560</line><src>        (  defined _REGTC1167_H || defined _REGTC1197_H || defined _REGTC1337_H || defined _REGTC1367_H \</src></hll>
				<hll><line>561</line><src>        || defined _REGTC1387_H || defined _REGTC1728_H || defined _REGTC1738_H \</src></hll>
				<hll><line>562</line><src>        || defined _REGTC1746_H || defined _REGTC1747_H || defined _REGTC1767_H || defined _REGTC1768_H \</src></hll>
				<hll><line>563</line><src>        || defined _REGTC1782_H || defined _REGTC1784_H || defined _REGTC1184_H || defined _REGTC1797_H \</src></hll>
				<hll><line>564</line><src>        || defined _REGTC1724_H )</src></hll>
				<hll><line>565</line><src>        if(__DMI_CON_INIT)  DMI_CON.U = __DMI_CON_VALUE;        </src></hll>
				<hll><line>566</line><src>#endif</src></hll>
				<hll><line>567</line><src>        </src></hll>
				<hll><line>568</line><src>        /*</src></hll>
				<hll><line>569</line><src>         * Data cache control (Reset 0H).</src></hll>
				<hll><line>570</line><src>         * CPU_TC013 workaround:</src></hll>
				<hll><line>571</line><src>         * The 16KB D-Cache is enabled to workaround</src></hll>
				<hll><line>572</line><src>         * the CPU_TC013 functional problem.     </src></hll>
				<hll><line>573</line><src>         * NOTE: Setting the D-Cache size must be done at the</src></hll>
				<hll><line>574</line><src>         *       very beginning of the startup code.</src></hll>
				<hll><line>575</line><src>         */</src></hll>
				<hll><line>576</line><src>#if defined  DMU_CON</src></hll>
				<hll><line>577</line><src>#  if __CPU_TC013_INITIAL__ </src></hll>
				<hll><line>578</line><src>        DMU_CON.U = 0x1;</src></hll>
				<hll><line>579</line><src>#  endif</src></hll>
				<hll><line>580</line><src>#endif</src></hll>
				<hll><line>581</line><src></src></hll>
				<hll><line>582</line><src>        /*</src></hll>
				<hll><line>583</line><src>         * PCON0 configuration.</src></hll>
				<hll><line>584</line><src>         */</src></hll>
				<hll><line>585</line><src>#if     defined PCON0 &amp;&amp; defined __PCON0_VALUE</src></hll>
				<hll><line>586</line><src>        if(__PCON0_INIT) __mtcr(PCON0, __PCON0_VALUE);</src></hll>
				<hll><line>587</line><src>#endif</src></hll>
				<hll><line>588</line><src></src></hll>
				<hll><line>589</line><src>        /*</src></hll>
				<hll><line>590</line><src>         * DCON0 configuration.</src></hll>
				<hll><line>591</line><src>         */</src></hll>
				<hll><line>592</line><src>#if     defined DCON0 &amp;&amp; defined __DCON0_VALUE</src></hll>
				<hll><line>593</line><src>        if(__DCON0_INIT) __mtcr(DCON0, __DCON0_VALUE);</src></hll>
				<hll><line>594</line><src>#endif</src></hll>
				<hll><line>595</line><src></src></hll>
				<hll><line>596</line><src>        /*</src></hll>
				<hll><line>597</line><src>         *      TC29x requires configuration of Pad Driver Mode to support EBU</src></hll>
				<hll><line>598</line><src>         */</src></hll>
				<hll><line>599</line><src>#if defined P24_PDR0 &amp;&amp; defined __P24_PDR0_VALUE</src></hll>
				<hll><line>600</line><src>        if(__P24_PDR0_INIT)  P24_PDR0.U = __P24_PDR0_VALUE;</src></hll>
				<hll><line>601</line><src>#endif</src></hll>
				<hll><line>602</line><src>#if defined P24_PDR1 &amp;&amp; defined __P24_PDR1_VALUE</src></hll>
				<hll><line>603</line><src>        if(__P24_PDR1_INIT)  P24_PDR1.U = __P24_PDR1_VALUE;</src></hll>
				<hll><line>604</line><src>#endif</src></hll>
				<hll><line>605</line><src>#if defined P25_PDR0 &amp;&amp; defined __P25_PDR0_VALUE</src></hll>
				<hll><line>606</line><src>        if(__P25_PDR0_INIT)  P25_PDR0.U = __P25_PDR0_VALUE;</src></hll>
				<hll><line>607</line><src>#endif</src></hll>
				<hll><line>608</line><src>#if defined P25_PDR1 &amp;&amp; defined __P25_PDR1_VALUE</src></hll>
				<hll><line>609</line><src>        if(__P25_PDR1_INIT)  P25_PDR1.U = __P25_PDR1_VALUE;</src></hll>
				<hll><line>610</line><src>#endif</src></hll>
				<hll><line>611</line><src>#if defined P30_PDR0 &amp;&amp; defined __P30_PDR0_VALUE</src></hll>
				<hll><line>612</line><src>        if(__P30_PDR0_INIT)  P30_PDR0.U = __P30_PDR0_VALUE;</src></hll>
				<hll><line>613</line><src>#endif</src></hll>
				<hll><line>614</line><src>#if defined P30_PDR1 &amp;&amp; defined __P30_PDR1_VALUE</src></hll>
				<hll><line>615</line><src>        if(__P30_PDR1_INIT)  P30_PDR1.U = __P30_PDR1_VALUE;</src></hll>
				<hll><line>616</line><src>#endif</src></hll>
				<hll><line>617</line><src>#if defined P31_PDR0 &amp;&amp; defined __P31_PDR0_VALUE</src></hll>
				<hll><line>618</line><src>        if(__P31_PDR0_INIT)  P31_PDR0.U = __P31_PDR0_VALUE;</src></hll>
				<hll><line>619</line><src>#endif</src></hll>
				<hll><line>620</line><src>#if defined P31_PDR1 &amp;&amp; defined __P31_PDR1_VALUE</src></hll>
				<hll><line>621</line><src>        if(__P31_PDR1_INIT)  P31_PDR1.U = __P31_PDR1_VALUE;</src></hll>
				<hll><line>622</line><src>#endif</src></hll>
				<hll><line>623</line><src>        </src></hll>
				<hll><line>624</line><src>        /*</src></hll>
				<hll><line>625</line><src>         * Bus configuration EBU_CLC within endinit.</src></hll>
				<hll><line>626</line><src>         */</src></hll>
				<hll><line>627</line><src>#  if defined EBU_CLC &amp;&amp; defined __EBU_CLC_VALUE</src></hll>
				<hll><line>628</line><src>        if(__EBU_CLC_INIT)  EBU_CLC.U = __EBU_CLC_VALUE;</src></hll>
				<hll><line>629</line><src>#  endif</src></hll>
				<hll><line>630</line><src></src></hll>
				<hll><line>631</line><src>        /*</src></hll>
				<hll><line>632</line><src>         *      Setting up the PLL after Reset.</src></hll>
				<hll><line>633</line><src>         *</src></hll>
				<hll><line>634</line><src>         *      After reset, the system clock will be running at the VCO</src></hll>
				<hll><line>635</line><src>         *      base frequency divided by a factor KDIV. To set up the PLL</src></hll>
				<hll><line>636</line><src>         *      after reset, next action must be executed.</src></hll>
				<hll><line>637</line><src>         */</src></hll>
				<hll><line>638</line><src>#if defined PLL_CLC &amp;&amp; defined __PLL_CLC_VALUE</src></hll>
				<hll><line>639</line><src>#if     __PLL_CLC_INIT</src></hll>
				<hll><line>640</line><src>#define __PLL_CLC_SYSFS_VALUE   ((__PLL_CLC_VALUE&gt;&gt;2)&amp;0x1)</src></hll>
				<hll><line>641</line><src>#define __PLL_CLC_VCOBYP_VALUE  ((__PLL_CLC_VALUE&gt;&gt;5)&amp;0x1)</src></hll>
				<hll><line>642</line><src>#define __PLL_CLC_VCOSEL_VALUE  ((__PLL_CLC_VALUE&gt;&gt;6)&amp;0x3)</src></hll>
				<hll><line>643</line><src>#define __PLL_CLC_KDIV_VALUE    ((__PLL_CLC_VALUE&gt;&gt;8)&amp;0xf)</src></hll>
				<hll><line>644</line><src>#define __PLL_CLC_PDIV_VALUE    ((__PLL_CLC_VALUE&gt;&gt;13)&amp;0x3)</src></hll>
				<hll><line>645</line><src>#define __PLL_CLC_NDIV_VALUE    ((__PLL_CLC_VALUE&gt;&gt;16)&amp;0x7f)</src></hll>
				<hll><line>646</line><src>        if ( PLL_CLC.B.BYPPIN == 0 )</src></hll>
				<hll><line>647</line><src>        {</src></hll>
				<hll><line>648</line><src>#if     ( defined _REGTC1130_H )</src></hll>
				<hll><line>649</line><src>                while (OSC_CON.B.OSCR==1);                      /* Wait until the oscillator is running */</src></hll>
				<hll><line>650</line><src>#else</src></hll>
				<hll><line>651</line><src>                while (OSC_CON.B.OSCR==0);                      /* Wait until the oscillator is running */</src></hll>
				<hll><line>652</line><src>#endif</src></hll>
				<hll><line>653</line><src>                PLL_CLC.B.VCOBYP = 1;                           /* Enabled the VCO Bypass Mode */</src></hll>
				<hll><line>654</line><src>                PLL_CLC.B.VCOSEL = __PLL_CLC_VCOSEL_VALUE;      /* Select the VCO band */</src></hll>
				<hll><line>655</line><src>                PLL_CLC.B.PDIV = __PLL_CLC_PDIV_VALUE;</src></hll>
				<hll><line>656</line><src>                PLL_CLC.B.KDIV = __PLL_CLC_KDIV_VALUE;</src></hll>
				<hll><line>657</line><src>                PLL_CLC.B.NDIV = __PLL_CLC_NDIV_VALUE;</src></hll>
				<hll><line>658</line><src>#if __PLL_CLC_VCOBYP_VALUE==0</src></hll>
				<hll><line>659</line><src>                PLL_CLC.B.OSCDISC = 0;                          /* Connect the oscillator to the PLL */</src></hll>
				<hll><line>660</line><src>                while( PLL_CLC.B.LOCK==0);                      /* Wait until the PLL becomes locked */</src></hll>
				<hll><line>661</line><src>                PLL_CLC.B.VCOBYP = 0;                           /* Disabled the VCO Bypass Mode */</src></hll>
				<hll><line>662</line><src>#endif</src></hll>
				<hll><line>663</line><src>        }</src></hll>
				<hll><line>664</line><src>#if     ( defined _REGTC1130_H )</src></hll>
				<hll><line>665</line><src>        PLL_CLC.B.SYSFSL = __PLL_CLC_SYSFS_VALUE;                /* System frequency select */</src></hll>
				<hll><line>666</line><src>#else</src></hll>
				<hll><line>667</line><src>#if     (  defined _REGTC1762_H || defined _REGTC1764_H || defined _REGTC1766B_H \</src></hll>
				<hll><line>668</line><src>        || defined _REGTC1164_H || defined _REGTC1166_H )</src></hll>
				<hll><line>669</line><src>        PLL_CLC.B.RSV = __PLL_CLC_SYSFS_VALUE;                  /* System frequency select */</src></hll>
				<hll><line>670</line><src>#else</src></hll>
				<hll><line>671</line><src>        PLL_CLC.B.SYSFS = __PLL_CLC_SYSFS_VALUE;                /* System frequency select */</src></hll>
				<hll><line>672</line><src>#endif</src></hll>
				<hll><line>673</line><src>#endif</src></hll>
				<hll><line>674</line><src>#endif</src></hll>
				<hll><line>675</line><src>#endif</src></hll>
				<hll><line>676</line><src></src></hll>
				<hll><line>677</line><src>         /*</src></hll>
				<hll><line>678</line><src>          * Configure CCU Clock Control</src></hll>
				<hll><line>679</line><src>          *</src></hll>
				<hll><line>680</line><src>          * For AURIX derivatives it is required to set the update request only</src></hll>
				<hll><line>681</line><src>          * in the last CCUCON that is initialized. Set CCUCONx.UP where x is</src></hll>
				<hll><line>682</line><src>          * the last one. A new complete parameter set is transferred to</src></hll>
				<hll><line>683</line><src>          * the CCU.</src></hll>
				<hll><line>684</line><src>          */</src></hll>
				<hll><line>685</line><src>#if defined SCU_CCUCON0 &amp;&amp; defined __SCU_CCUCON0_VALUE</src></hll>
				<hll><cov>never</cov><line>686</line><src>         if(__SCU_CCUCON0_INIT)  SCU_CCUCON0.U = __SCU_CCUCON0_VALUE;</src></hll>
				<asm><cov>never</cov><addr>P:80005A1E</addr><code>F013303B</code><mnemonic>mov       d15,#0x133</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A22</addr><code>F1723F9B</code><mnemonic>addih     d15,d15,#0x1723</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A26</addr><code>06302F59</code><mnemonic>st.w      [a2]0x6030,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>687</line><src>#endif</src></hll>
				<hll><line>688</line><src></src></hll>
				<hll><line>689</line><src>#if defined SCU_CCUCON1 &amp;&amp; defined __SCU_CCUCON1_VALUE</src></hll>
				<hll><cov>never</cov><line>690</line><src>         if(__SCU_CCUCON1_INIT)  SCU_CCUCON1.U = __SCU_CCUCON1_VALUE;</src></hll>
				<asm><cov>never</cov><addr>P:80005A2A</addr><code>F029203B</code><mnemonic>mov       d15,#0x292</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A2E</addr><code>F1800F9B</code><mnemonic>addih     d15,d15,#0x1800</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A32</addr><code>06342F59</code><mnemonic>st.w      [a2]0x6034,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>691</line><src>#endif</src></hll>
				<hll><line>692</line><src></src></hll>
				<hll><line>693</line><src>#if defined SCU_CCUCON2 &amp;&amp; defined __SCU_CCUCON2_VALUE</src></hll>
				<hll><cov>never</cov><line>694</line><src>         if(__SCU_CCUCON2_INIT)  SCU_CCUCON2.U = __SCU_CCUCON2_VALUE;</src></hll>
				<asm><cov>never</cov><addr>P:80005A36</addr><code>0ADA</code><mnemonic>mov16     d15,#0x0A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A38</addr><code>16002F59</code><mnemonic>st.w      [a2]0x6040,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>695</line><src>#endif</src></hll>
				<hll><line>696</line><src>         </src></hll>
				<hll><line>697</line><src>        /*</src></hll>
				<hll><line>698</line><src>         * System Oscillator configuration</src></hll>
				<hll><line>699</line><src>         */</src></hll>
				<hll><line>700</line><src>#if defined SCU_OSCCON &amp;&amp; defined __SCU_OSCCON_VALUE</src></hll>
				<hll><line>701</line><src>#if __SCU_OSCCON_INIT</src></hll>
				<hll><cov>never</cov><line>702</line><src>        SCU_OSCCON.U=__SCU_OSCCON_VALUE;</src></hll>
				<asm><cov>never</cov><addr>P:80005A3C</addr><code>F031A03B</code><mnemonic>mov       d15,#0x31A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A40</addr><code>F0005F9B</code><mnemonic>addih     d15,d15,#0x5</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A44</addr><code>06102F59</code><mnemonic>st.w      [a2]0x6010,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>703</line><src>        </src></hll>
				<hll><cov>never</cov><line>704</line><src>        while(SCU_OSCCON.B.PLLLV==0);           /* Oscillator not too low */</src></hll>
				<asm><cov>never</cov><addr>P:80005A48</addr><code>06102F39</code><mnemonic>ld.bu     d15,[a2]0x6010</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A4C</addr><code>7FFE1F6F</code><mnemonic>jz.t      d15,#0x1,0x80005A48</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>705</line><src>        while(SCU_OSCCON.B.PLLHV==0);           /* Oscillator not too high */</src></hll>
				<asm><cov>never</cov><addr>P:80005A50</addr><code>2F003091</code><mnemonic>movh.a    a2,#0xF003</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A54</addr><code>06112F39</code><mnemonic>ld.bu     d15,[a2]0x6011</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A58</addr><code>7FFC0F6F</code><mnemonic>jz.t      d15,#0x0,0x80005A50</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>706</line><src>#endif</src></hll>
				<hll><line>707</line><src>#endif</src></hll>
				<hll><line>708</line><src></src></hll>
				<hll><line>709</line><src>        /*</src></hll>
				<hll><line>710</line><src>         * Configure PLL Prescaler Mode.</src></hll>
				<hll><line>711</line><src>         */</src></hll>
				<hll><line>712</line><src>#if defined SCU_PLLCON1 &amp;&amp; defined __SCU_PLLCON1_VALUE</src></hll>
				<hll><line>713</line><src>#if __SCU_PLLCON1_INIT</src></hll>
				<hll><line>714</line><src>#define __SCU_PLLCON1__K1DIV_VALUE      ((__SCU_PLLCON1_VALUE&gt;&gt;16)&amp;0x3f)</src></hll>
				<hll><line>715</line><src>        SCU_PLLCON1.B.K1DIV=__SCU_PLLCON1__K1DIV_VALUE;</src></hll>
				<hll><line>716</line><src>        while(SCU_PLLSTAT.B.K1RDY==0);          /* Wait until K1-Divider is ready to operate */</src></hll>
				<hll><line>717</line><src>#endif</src></hll>
				<hll><line>718</line><src>#endif</src></hll>
				<hll><line>719</line><src></src></hll>
				<hll><line>720</line><src>#if defined SCU_PLLCON0 &amp;&amp; defined __SCU_PLLCON0_VALUE</src></hll>
				<hll><line>721</line><src>#if     __SCU_PLLCON0_INIT</src></hll>
				<hll><line>722</line><src>        SCU_PLLCON0.B.VCOBYP=1;                 /* Enabled the VCO Bypass Mode */</src></hll>
				<hll><line>723</line><src>        while(SCU_PLLSTAT.B.VCOBYST==0);        /* Wait until prescaler mode is entered */</src></hll>
				<hll><line>724</line><src></src></hll>
				<hll><line>725</line><src>#define __SCU_PLLCON0__VCOPWD_VALUE     ((__SCU_PLLCON0_VALUE&gt;&gt;1)&amp;0x1)</src></hll>
				<hll><line>726</line><src>#define __SCU_PLLCON0__NDIV_VALUE       ((__SCU_PLLCON0_VALUE&gt;&gt;9)&amp;0x7f)</src></hll>
				<hll><line>727</line><src>#define __SCU_PLLCON0__PDIV_VALUE       ((__SCU_PLLCON0_VALUE&gt;&gt;24)&amp;0xf)</src></hll>
				<hll><line>728</line><src>        SCU_PLLCON0.B.PDIV=__SCU_PLLCON0__PDIV_VALUE;</src></hll>
				<hll><line>729</line><src>        SCU_PLLCON0.B.NDIV=__SCU_PLLCON0__NDIV_VALUE;</src></hll>
				<hll><line>730</line><src>        SCU_PLLCON0.B.VCOPWD=__SCU_PLLCON0__VCOPWD_VALUE; /* power down VCO */</src></hll>
				<hll><line>731</line><src></src></hll>
				<hll><line>732</line><src>#if __SCU_PLLCON0__VCOPWD_VALUE==0</src></hll>
				<hll><line>733</line><src>        /*</src></hll>
				<hll><line>734</line><src>         * Configure PLL normal mode.</src></hll>
				<hll><line>735</line><src>         */</src></hll>
				<hll><line>736</line><src>        SCU_PLLCON0.B.OSCDISCDIS=1;             /* Automatic oscillator disconnect disabled */</src></hll>
				<hll><line>737</line><src>        SCU_PLLCON0.B.CLRFINDIS=1;              /* Connect VCO to the oscillator */</src></hll>
				<hll><line>738</line><src>        while(SCU_PLLSTAT.B.FINDIS==1);         /* Wait until oscillator is connected to the VCO */</src></hll>
				<hll><line>739</line><src>        SCU_PLLCON0.B.RESLD=1;                  /* Restart VCO lock detection */</src></hll>
				<hll><line>740</line><src>        while(SCU_PLLSTAT.B.VCOLOCK==0);        /* Wait until the VCO becomes locked */</src></hll>
				<hll><line>741</line><src>        SCU_PLLCON0.B.VCOBYP=0;                 /* Disable the VCO Bypass Mode */</src></hll>
				<hll><line>742</line><src>        while(SCU_PLLSTAT.B.VCOBYST==1);        /* Wait until normal mode is entered */</src></hll>
				<hll><line>743</line><src>        SCU_PLLCON0.B.OSCDISCDIS=0;             /* Automatic oscillator disconnect enabled */</src></hll>
				<hll><line>744</line><src>#endif</src></hll>
				<hll><line>745</line><src>#endif</src></hll>
				<hll><line>746</line><src>#endif</src></hll>
				<hll><line>747</line><src></src></hll>
				<hll><line>748</line><src>#if defined SCU_SYSPLLCON0 &amp;&amp; defined __SCU_SYSPLLCON0_VALUE</src></hll>
				<hll><line>749</line><src>        /*</src></hll>
				<hll><line>750</line><src>         *      AURIX PLUS System PLL Configuration</src></hll>
				<hll><line>751</line><src>         */</src></hll>
				<hll><line>752</line><src>#if __SCU_SYSPLLCON0_INIT</src></hll>
				<hll><line>753</line><src>#define __SCU_SYSPLLCON0__NDIV_VALUE    ((__SCU_SYSPLLCON0_VALUE&gt;&gt;9)&amp;0xff)</src></hll>
				<hll><line>754</line><src>#define __SCU_SYSPLLCON0__PDIV_VALUE    ((__SCU_SYSPLLCON0_VALUE&gt;&gt;24)&amp;0x7)</src></hll>
				<hll><line>755</line><src>        /*</src></hll>
				<hll><line>756</line><src>         * After power-on and system reset fsource=fback,</src></hll>
				<hll><line>757</line><src>         * fOSC0 is used as clock source PLL and K2=6.</src></hll>
				<hll><line>758</line><src>         */</src></hll>
				<hll><line>759</line><src>        SCU_SYSPLLCON0.B.PDIV=__SCU_SYSPLLCON0__PDIV_VALUE;</src></hll>
				<hll><line>760</line><src>        SCU_SYSPLLCON0.B.NDIV=__SCU_SYSPLLCON0__NDIV_VALUE;</src></hll>
				<hll><line>761</line><src></src></hll>
				<hll><line>762</line><src>        SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart DCO Lock Detection */</src></hll>
				<hll><line>763</line><src>        while(!SCU_SYSPLLSTAT.B.LOCK);          /* Wait for PLL lock */</src></hll>
				<hll><line>764</line><src></src></hll>
				<hll><line>765</line><src>        while(SCU_CCUCON0.B.LCK);               /* Wait for CCUCON0 unlocked */</src></hll>
				<hll><line>766</line><src>        SCU_CCUCON0.B.CLKSEL = 1;               /* fsource=fpll */</src></hll>
				<hll><line>767</line><src>        SCU_CCUCON0.B.UP = 1;                   /* Update */</src></hll>
				<hll><line>768</line><src>#endif</src></hll>
				<hll><line>769</line><src>#endif</src></hll>
				<hll><line>770</line><src></src></hll>
				<hll><line>771</line><src>        /*</src></hll>
				<hll><line>772</line><src>         *      PLL K2 ramp up</src></hll>
				<hll><line>773</line><src>         */</src></hll>
				<hll><line>774</line><src>#if ( defined SCU_PLLCON1 &amp;&amp; defined __SCU_PLLCON1_VALUE ) || ( defined SCU_SYSPLLCON1 &amp;&amp; defined SCU_SYSPLLCON0 &amp;&amp; defined __SCU_SYSPLLCON1_VALUE )</src></hll>
				<hll><line>775</line><src>#if __SCU_PLLCON1_INIT || __SCU_SYSPLLCON1_INIT</src></hll>
				<hll><line>776</line><src>#if ( defined SCU_PLLCON1 )</src></hll>
				<hll><line>777</line><src>#define __K2DIV_VALUE   (__SCU_PLLCON1_VALUE&amp;0x3f)</src></hll>
				<hll><line>778</line><src>#define __K2DIV         SCU_PLLCON1.B.K2DIV</src></hll>
				<hll><line>779</line><src>#define __NDIV          SCU_PLLCON0.B.NDIV</src></hll>
				<hll><line>780</line><src>#define __PDIV          SCU_PLLCON0.B.PDIV</src></hll>
				<hll><line>781</line><src>#else</src></hll>
				<hll><line>782</line><src>#define __K2DIV_VALUE   (__SCU_SYSPLLCON1_VALUE&amp;0x3)</src></hll>
				<hll><line>783</line><src>#define __K2DIV         SCU_SYSPLLCON1.B.K2DIV</src></hll>
				<hll><line>784</line><src>#define __NDIV          SCU_SYSPLLCON0.B.NDIV</src></hll>
				<hll><line>785</line><src>#define __PDIV          SCU_SYSPLLCON0.B.PDIV</src></hll>
				<hll><line>786</line><src>#endif</src></hll>
				<hll><line>787</line><src>#if __PLL_K2_RAMPUP</src></hll>
				<hll><line>788</line><src>#if ( defined SCU_PLLSTAT || defined SCU_SYSPLLSTAT ) &amp;&amp; defined __fOSC</src></hll>
				<hll><line>789</line><src>#if     (  defined _REGTC1167_H || defined _REGTC1197_H || defined _REGTC1337_H || defined _REGTC1367_H \</src></hll>
				<hll><line>790</line><src>        || defined _REGTC1387_H || defined _REGTC1728_H \</src></hll>
				<hll><line>791</line><src>        || defined _REGTC1736_H || defined _REGTC1738_H || defined _REGTC1746_H \</src></hll>
				<hll><line>792</line><src>        || defined _REGTC1747_H || defined _REGTC1748_H || defined _REGTC1767_H || defined _REGTC1768_H \</src></hll>
				<hll><line>793</line><src>        || defined _REGTC1782_H || defined _REGTC1784_H || defined _REGTC1184_H || defined _REGTC1797_H \</src></hll>
				<hll><line>794</line><src>        || defined _REGTC1791_H || defined _REGTC1793_H || defined _REGTC1798_H || defined _REGTC1724_H \</src></hll>
				<hll><line>795</line><src>        || defined _REGTC21X_H  || defined _REGTC22X_H  || defined _REGTC23X_ADAS_H || defined _REGTC23X_H \</src></hll>
				<hll><line>796</line><src>        || defined _REGTC27X_H  || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H \</src></hll>
				<hll><line>797</line><src>        || defined _REGTC26X_H  || defined _REGTC26XB_H || defined _REGTC29X_H  || defined _REGTC29XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><line>798</line><src>#if ( defined _REGTC21X_H || defined _REGTC22X_H || defined _REGTC23X_ADAS_H || defined _REGTC23X_H || defined _REGTC27X_H || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H || defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC29X_H || defined _REGTC29XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><line>799</line><src>#define PLL_K2_RAMPUP_STM_CLC_RMC       1</src></hll>
				<hll><line>800</line><src>#else</src></hll>
				<hll><line>801</line><src>#define PLL_K2_RAMPUP_STM_CLC_RMC       (STM_CLC.B.RMC)</src></hll>
				<hll><line>802</line><src>#endif</src></hll>
				<hll><line>803</line><src>#if ( defined _REGTC1337_H || defined _REGTC1367_H || defined _REGTC1387_H || defined _REGTC1768_H )</src></hll>
				<hll><line>804</line><src>#define PLL_K2_RAMPUP_SYSCLK(CPUCLK)    (CPUCLK)</src></hll>
				<hll><line>805</line><src>#else</src></hll>
				<hll><line>806</line><src>#if ( defined _REGTC21X_H || defined _REGTC22X_H || defined _REGTC23X_ADAS_H || defined _REGTC23X_H || defined _REGTC27X_H || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H || defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC29X_H || defined _REGTC29XB_H )</src></hll>
				<hll><line>807</line><src>#define PLL_K2_RAMPUP_SYSCLK(CPUCLK)    (CPUCLK/SCU_CCUCON1.B.STMDIV)</src></hll>
				<hll><line>808</line><src>#else</src></hll>
				<hll><line>809</line><src>#if ( defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><line>810</line><src>#define PLL_K2_RAMPUP_SYSCLK(CPUCLK)    (CPUCLK/SCU_CCUCON0.B.STMDIV)   </src></hll>
				<hll><line>811</line><src>#else</src></hll>
				<hll><line>812</line><src>#define PLL_K2_RAMPUP_SYSCLK(CPUCLK)    (CPUCLK/(SCU_CCUCON0.B.FPIDIV+1))</src></hll>
				<hll><line>813</line><src>#endif</src></hll>
				<hll><line>814</line><src>#endif</src></hll>
				<hll><line>815</line><src>#endif</src></hll>
				<hll><line>816</line><src>#define USECCLK         (PLL_K2_RAMPUP_SYSCLK(((__NDIV+1)*(__fOSC/1000000))/((__PDIV+1)*(__K2DIV+1)))/PLL_K2_RAMPUP_STM_CLC_RMC)</src></hll>
				<hll><line>817</line><src>#if ( defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H || defined _REGUSERDEF162_H )</src></hll>
				<hll><line>818</line><src>#define USEC            100             /* wait 100 usec */</src></hll>
				<hll><line>819</line><src>#else</src></hll>
				<hll><line>820</line><src>#define USEC            20              /* wait 20 usec */</src></hll>
				<hll><line>821</line><src>#endif</src></hll>
				<hll><line>822</line><src>#define WAITUSEC        (USECCLK*USEC)</src></hll>
				<hll><line>823</line><src>#endif</src></hll>
				<hll><line>824</line><src>#endif</src></hll>
				<hll><line>825</line><src>#pragma tradeoff 0      /* avoid call to run-time function */</src></hll>
				<hll><line>826</line><src>        while ( __K2DIV &gt; __K2DIV_VALUE )</src></hll>
				<hll><line>827</line><src>        {</src></hll>
				<hll><line>828</line><src>                unsigned int wait;</src></hll>
				<hll><line>829</line><src></src></hll>
				<hll><line>830</line><src>                __K2DIV-=1;</src></hll>
				<hll><line>831</line><src>                wait = SYSTIME_LOW+WAITUSEC;</src></hll>
				<hll><line>832</line><src></src></hll>
				<hll><line>833</line><src>                while( SYSTIME_LOW &lt; wait ) ;</src></hll>
				<hll><line>834</line><src>        }</src></hll>
				<hll><line>835</line><src>#pragma tradeoff restore</src></hll>
				<hll><line>836</line><src>#else</src></hll>
				<hll><cov>never</cov><line>837</line><src>        __K2DIV=__K2DIV_VALUE;</src></hll>
				<asm><cov>never</cov><addr>P:80005A5C</addr><code>061C2F39</code><mnemonic>ld.bu     d15,[a2]0x601C</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A60</addr><code>F0031FB7</code><mnemonic>insert    d15,d15,#0x1,0x0,#0x3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A64</addr><code>061C2FE9</code><mnemonic>st.b      [a2]0x601C,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>838</line><src>#endif</src></hll>
				<hll><line>839</line><src>#endif</src></hll>
				<hll><line>840</line><src>#endif</src></hll>
				<hll><line>841</line><src></src></hll>
				<hll><line>842</line><src>        /*</src></hll>
				<hll><line>843</line><src>         * Configure flash registers.</src></hll>
				<hll><line>844</line><src>         */</src></hll>
				<hll><line>845</line><src>#if defined FLASH0_FCON &amp;&amp; defined __FLASH0_FCON_VALUE</src></hll>
				<hll><line>846</line><src>        if(__FLASH0_FCON_INIT)  FLASH0_FCON.U = __FLASH0_FCON_VALUE;        </src></hll>
				<hll><line>847</line><src>#endif</src></hll>
				<hll><line>848</line><src>#if defined FLASH1_FCON &amp;&amp; defined __FLASH1_FCON_VALUE</src></hll>
				<hll><line>849</line><src>        if(__FLASH1_FCON_INIT)  FLASH1_FCON.U = __FLASH1_FCON_VALUE;        </src></hll>
				<hll><line>850</line><src>#endif</src></hll>
				<hll><line>851</line><src>        </src></hll>
				<hll><line>852</line><src>        /*</src></hll>
				<hll><line>853</line><src>         * Configure system clock register.</src></hll>
				<hll><line>854</line><src>         */</src></hll>
				<hll><line>855</line><src>#if defined STM_CLC &amp;&amp; defined __STM_CLC_VALUE</src></hll>
				<hll><line>856</line><src>        if(__STM_CLC_INIT)  STM_CLC.U = __STM_CLC_VALUE;        </src></hll>
				<hll><line>857</line><src>#endif</src></hll>
				<hll><line>858</line><src></src></hll>
				<hll><line>859</line><src>        /*</src></hll>
				<hll><line>860</line><src>         * Enable the GTM to get MCS memory access,</src></hll>
				<hll><line>861</line><src>         * required for MCS initialization which</src></hll>
				<hll><line>862</line><src>         * is performed by _c_init.</src></hll>
				<hll><line>863</line><src>         */</src></hll>
				<hll><line>864</line><src>#if defined GTM_CLC &amp;&amp; defined __GTM_CLC_VALUE</src></hll>
				<hll><cov>never</cov><line>865</line><src>        if(__GTM_CLC_INIT)  GTM_CLC.U = __GTM_CLC_VALUE;</src></hll>
				<asm><cov>never</cov><addr>P:80005A68</addr><code>00DA</code><mnemonic>mov16     d15,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A6A</addr><code>2F01A091</code><mnemonic>movh.a    a2,#0xF01A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A6E</addr><code>4FC02F59</code><mnemonic>st.w      [a2]-0x300,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>866</line><src>#endif</src></hll>
				<hll><line>867</line><src></src></hll>
				<hll><line>868</line><src>        /*</src></hll>
				<hll><line>869</line><src>         * Set the rounding mode (PSW.RM)</src></hll>
				<hll><line>870</line><src>         */</src></hll>
				<hll><line>871</line><src>#ifdef __RM_INIT</src></hll>
				<hll><line>872</line><src>#if __RM_INIT</src></hll>
				<hll><line>873</line><src>        __fesetround( __RM_VALUE );</src></hll>
				<hll><line>874</line><src>#endif</src></hll>
				<hll><line>875</line><src>#endif</src></hll>
				<hll><line>876</line><src>        </src></hll>
				<hll><line>877</line><src>        /*</src></hll>
				<hll><line>878</line><src>         * Set the ENDINIT bit in the WDT_CON0 register again</src></hll>
				<hll><line>879</line><src>         * to enable the write-protection.</src></hll>
				<hll><line>880</line><src>         */</src></hll>
				<hll><line>881</line><src>        endinit_set(_ENDINIT_ENABLE);</src></hll>
				<hll><line>882</line><src></src></hll>
				<hll><line>883</line><src>#if ( defined _REGUSERDEF16X_H || defined _REGUSERDEF162_H || defined _REGTC21X_H || defined _REGTC22X_H || defined _REGTC23X_ADAS_H || defined _REGTC23X_H || defined _REGTC27X_H || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H || defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC29X_H || defined _REGTC29XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H )</src></hll>
				<hll><line>884</line><src>        /*</src></hll>
				<hll><line>885</line><src>         * Set the ENDINIT bit in the WDTSCON0 register to enable the</src></hll>
				<hll><line>886</line><src>         * safety-critical register write-protection.</src></hll>
				<hll><line>887</line><src>         */</src></hll>
				<hll><line>888</line><src>        safety_endinit_set(_ENDINIT_ENABLE);</src></hll>
				<hll><line>889</line><src>#endif</src></hll>
				<hll><line>890</line><src>        </src></hll>
				<hll><line>891</line><src>        /*</src></hll>
				<hll><line>892</line><src>         * Initialize Bus configuration registers:</src></hll>
				<hll><line>893</line><src>         * Set register-values according to define&apos;s created by the GUI</src></hll>
				<hll><line>894</line><src>         * </src></hll>
				<hll><line>895</line><src>         * The recommended sequence of setting registers is as follows:</src></hll>
				<hll><line>896</line><src>         * 1.EBUCON</src></hll>
				<hll><line>897</line><src>         * 2.All other EBU registers except SDRAM specific registers</src></hll>
				<hll><line>898</line><src>         * 3.SDRMCON0</src></hll>
				<hll><line>899</line><src>         * 4.SDRMMOD0</src></hll>
				<hll><line>900</line><src>         * 5.SDRMREF0</src></hll>
				<hll><line>901</line><src>         * 6.SDRMCON1</src></hll>
				<hll><line>902</line><src>         * 7.SDRMMOD1</src></hll>
				<hll><line>903</line><src>         * 8.SDRMREF1</src></hll>
				<hll><line>904</line><src>         */</src></hll>
				<hll><line>905</line><src>#if defined EBU_CON &amp;&amp; defined __EBU_CON_VALUE</src></hll>
				<hll><line>906</line><src>        if(__EBU_CON_INIT)  EBU_CON.U = __EBU_CON_VALUE;</src></hll>
				<hll><line>907</line><src>#endif</src></hll>
				<hll><line>908</line><src>#if defined EBU_ADDRSEL0 &amp;&amp; defined __EBU_ADDRSEL0_VALUE</src></hll>
				<hll><line>909</line><src>        if(__EBU_ADDRSEL0_INIT)  EBU_ADDRSEL0.U = __EBU_ADDRSEL0_VALUE;</src></hll>
				<hll><line>910</line><src>#endif</src></hll>
				<hll><line>911</line><src>#if defined EBU_ADDRSEL1 &amp;&amp; defined __EBU_ADDRSEL1_VALUE</src></hll>
				<hll><line>912</line><src>        if(__EBU_ADDRSEL1_INIT)  EBU_ADDRSEL1.U = __EBU_ADDRSEL1_VALUE;</src></hll>
				<hll><line>913</line><src>#endif</src></hll>
				<hll><line>914</line><src>#if defined EBU_ADDRSEL2 &amp;&amp; defined __EBU_ADDRSEL2_VALUE</src></hll>
				<hll><line>915</line><src>        if(__EBU_ADDRSEL2_INIT)  EBU_ADDRSEL2.U = __EBU_ADDRSEL2_VALUE;</src></hll>
				<hll><line>916</line><src>#endif</src></hll>
				<hll><line>917</line><src>#if defined EBU_ADDRSEL3 &amp;&amp; defined __EBU_ADDRSEL3_VALUE</src></hll>
				<hll><line>918</line><src>        if(__EBU_ADDRSEL3_INIT)  EBU_ADDRSEL3.U = __EBU_ADDRSEL3_VALUE;</src></hll>
				<hll><line>919</line><src>#endif</src></hll>
				<hll><line>920</line><src>#if defined EBU_ADDRSEL4 &amp;&amp; defined __EBU_ADDRSEL4_VALUE</src></hll>
				<hll><line>921</line><src>        if(__EBU_ADDRSEL4_INIT)  EBU_ADDRSEL4.U = __EBU_ADDRSEL4_VALUE;</src></hll>
				<hll><line>922</line><src>#endif</src></hll>
				<hll><line>923</line><src>#if defined EBU_ADDRSEL5 &amp;&amp; defined __EBU_ADDRSEL5_VALUE</src></hll>
				<hll><line>924</line><src>        if(__EBU_ADDRSEL5_INIT)  EBU_ADDRSEL5.U = __EBU_ADDRSEL5_VALUE;</src></hll>
				<hll><line>925</line><src>#endif</src></hll>
				<hll><line>926</line><src>#if defined EBU_ADDRSEL6 &amp;&amp; defined __EBU_ADDRSEL6_VALUE</src></hll>
				<hll><line>927</line><src>        if(__EBU_ADDRSEL6_INIT)  EBU_ADDRSEL6.U = __EBU_ADDRSEL6_VALUE;</src></hll>
				<hll><line>928</line><src>#endif</src></hll>
				<hll><line>929</line><src>#if defined EBU_BFCON &amp;&amp; defined __EBU_BFCON_VALUE</src></hll>
				<hll><line>930</line><src>        if(__EBU_BFCON_INIT)  EBU_BFCON.U = __EBU_BFCON_VALUE;</src></hll>
				<hll><line>931</line><src>#endif</src></hll>
				<hll><line>932</line><src>#if defined EBU_BUSAP0 &amp;&amp; defined __EBU_BUSAP0_VALUE</src></hll>
				<hll><line>933</line><src>        if(__EBU_BUSAP0_INIT)  EBU_BUSAP0.U = __EBU_BUSAP0_VALUE;</src></hll>
				<hll><line>934</line><src>#endif</src></hll>
				<hll><line>935</line><src>#if defined EBU_BUSAP1 &amp;&amp; defined __EBU_BUSAP1_VALUE</src></hll>
				<hll><line>936</line><src>        if(__EBU_BUSAP1_INIT)  EBU_BUSAP1.U = __EBU_BUSAP1_VALUE;</src></hll>
				<hll><line>937</line><src>#endif</src></hll>
				<hll><line>938</line><src>#if defined EBU_BUSAP2 &amp;&amp; defined __EBU_BUSAP2_VALUE</src></hll>
				<hll><line>939</line><src>        if(__EBU_BUSAP2_INIT)  EBU_BUSAP2.U = __EBU_BUSAP2_VALUE;</src></hll>
				<hll><line>940</line><src>#endif</src></hll>
				<hll><line>941</line><src>#if defined EBU_BUSAP3 &amp;&amp; defined __EBU_BUSAP3_VALUE</src></hll>
				<hll><line>942</line><src>        if(__EBU_BUSAP3_INIT)  EBU_BUSAP3.U = __EBU_BUSAP3_VALUE;</src></hll>
				<hll><line>943</line><src>#endif</src></hll>
				<hll><line>944</line><src>#if defined EBU_BUSAP4 &amp;&amp; defined __EBU_BUSAP4_VALUE</src></hll>
				<hll><line>945</line><src>        if(__EBU_BUSAP4_INIT)  EBU_BUSAP4.U = __EBU_BUSAP4_VALUE;</src></hll>
				<hll><line>946</line><src>#endif</src></hll>
				<hll><line>947</line><src>#if defined EBU_BUSAP5 &amp;&amp; defined __EBU_BUSAP5_VALUE</src></hll>
				<hll><line>948</line><src>        if(__EBU_BUSAP5_INIT)  EBU_BUSAP5.U = __EBU_BUSAP5_VALUE;</src></hll>
				<hll><line>949</line><src>#endif</src></hll>
				<hll><line>950</line><src>#if defined EBU_BUSAP6 &amp;&amp; defined __EBU_BUSAP6_VALUE</src></hll>
				<hll><line>951</line><src>        if(__EBU_BUSAP6_INIT)  EBU_BUSAP6.U = __EBU_BUSAP6_VALUE;</src></hll>
				<hll><line>952</line><src>#endif</src></hll>
				<hll><line>953</line><src>#if defined EBU_BUSCON0 &amp;&amp; defined __EBU_BUSCON0_VALUE</src></hll>
				<hll><line>954</line><src>        if(__EBU_BUSCON0_INIT)  EBU_BUSCON0.U = __EBU_BUSCON0_VALUE;</src></hll>
				<hll><line>955</line><src>#endif</src></hll>
				<hll><line>956</line><src>#if defined EBU_BUSCON1 &amp;&amp; defined __EBU_BUSCON1_VALUE</src></hll>
				<hll><line>957</line><src>        if(__EBU_BUSCON1_INIT)  EBU_BUSCON1.U = __EBU_BUSCON1_VALUE;</src></hll>
				<hll><line>958</line><src>#endif</src></hll>
				<hll><line>959</line><src>#if defined EBU_BUSCON2 &amp;&amp; defined __EBU_BUSCON2_VALUE</src></hll>
				<hll><line>960</line><src>        if(__EBU_BUSCON2_INIT)  EBU_BUSCON2.U = __EBU_BUSCON2_VALUE;</src></hll>
				<hll><line>961</line><src>#endif</src></hll>
				<hll><line>962</line><src>#if defined EBU_BUSCON3 &amp;&amp; defined __EBU_BUSCON3_VALUE</src></hll>
				<hll><line>963</line><src>        if(__EBU_BUSCON3_INIT)  EBU_BUSCON3.U = __EBU_BUSCON3_VALUE;</src></hll>
				<hll><line>964</line><src>#endif</src></hll>
				<hll><line>965</line><src>#if defined EBU_BUSCON4 &amp;&amp; defined __EBU_BUSCON4_VALUE</src></hll>
				<hll><line>966</line><src>        if(__EBU_BUSCON4_INIT)  EBU_BUSCON4.U = __EBU_BUSCON4_VALUE;</src></hll>
				<hll><line>967</line><src>#endif</src></hll>
				<hll><line>968</line><src>#if defined EBU_BUSCON5 &amp;&amp; defined __EBU_BUSCON5_VALUE</src></hll>
				<hll><line>969</line><src>        if(__EBU_BUSCON5_INIT)  EBU_BUSCON5.U = __EBU_BUSCON5_VALUE;</src></hll>
				<hll><line>970</line><src>#endif</src></hll>
				<hll><line>971</line><src>#if defined EBU_BUSCON6 &amp;&amp; defined __EBU_BUSCON6_VALUE</src></hll>
				<hll><line>972</line><src>        if(__EBU_BUSCON6_INIT)  EBU_BUSCON6.U = __EBU_BUSCON6_VALUE;</src></hll>
				<hll><line>973</line><src>#endif</src></hll>
				<hll><line>974</line><src>#if defined EBU_EMUAS &amp;&amp; defined __EBU_EMUAS_VALUE</src></hll>
				<hll><line>975</line><src>        if(__EBU_EMUAS_INIT)  EBU_EMUAS.U = __EBU_EMUAS_VALUE;</src></hll>
				<hll><line>976</line><src>#endif</src></hll>
				<hll><line>977</line><src>#if defined EBU_EMUBAP &amp;&amp; defined __EBU_EMUBAP_VALUE</src></hll>
				<hll><line>978</line><src>        if(__EBU_EMUBAP_INIT)  EBU_EMUBAP.U = __EBU_EMUBAP_VALUE;</src></hll>
				<hll><line>979</line><src>#endif</src></hll>
				<hll><line>980</line><src>#if defined EBU_EMUBC &amp;&amp; defined __EBU_EMUBC_VALUE</src></hll>
				<hll><line>981</line><src>        if(__EBU_EMUBC_INIT)  EBU_EMUBC.U = __EBU_EMUBC_VALUE;</src></hll>
				<hll><line>982</line><src>#endif</src></hll>
				<hll><line>983</line><src>#if defined EBU_EMUCON &amp;&amp; defined __EBU_EMUCON_VALUE</src></hll>
				<hll><line>984</line><src>        if(__EBU_EMUCON_INIT)  EBU_EMUCON.U = __EBU_EMUCON_VALUE;</src></hll>
				<hll><line>985</line><src>#endif</src></hll>
				<hll><line>986</line><src>#if defined EBU_EMUOVL &amp;&amp; defined __EBU_EMUOVL_VALUE</src></hll>
				<hll><line>987</line><src>        if(__EBU_EMUOVL_INIT)  EBU_EMUOVL.U = __EBU_EMUOVL_VALUE;</src></hll>
				<hll><line>988</line><src>#endif</src></hll>
				<hll><line>989</line><src>#if defined EBU_SDRMCON0 &amp;&amp; defined __EBU_SDRMCON0_VALUE</src></hll>
				<hll><line>990</line><src>        if(__EBU_SDRMCON0_INIT)  EBU_SDRMCON0.U = __EBU_SDRMCON0_VALUE;</src></hll>
				<hll><line>991</line><src>#endif</src></hll>
				<hll><line>992</line><src>#if defined EBU_SDRMOD0 &amp;&amp; defined __EBU_SDRMOD0_VALUE</src></hll>
				<hll><line>993</line><src>        if(__EBU_SDRMOD0_INIT)  EBU_SDRMOD0.U = __EBU_SDRMOD0_VALUE;</src></hll>
				<hll><line>994</line><src>#endif</src></hll>
				<hll><line>995</line><src>#if defined EBU_SDRMREF0 &amp;&amp; defined __EBU_SDRMREF0_VALUE</src></hll>
				<hll><line>996</line><src>        if(__EBU_SDRMREF0_INIT)  EBU_SDRMREF0.U = __EBU_SDRMREF0_VALUE;</src></hll>
				<hll><line>997</line><src>#endif</src></hll>
				<hll><line>998</line><src>#if defined EBU_SDRMCON1 &amp;&amp; defined __EBU_SDRMCON1_VALUE</src></hll>
				<hll><line>999</line><src>        if(__EBU_SDRMCON1_INIT)  EBU_SDRMCON1.U = __EBU_SDRMCON1_VALUE;</src></hll>
				<hll><line>1000</line><src>#endif</src></hll>
				<hll><line>1001</line><src>#if defined EBU_SDRMOD1 &amp;&amp; defined __EBU_SDRMOD1_VALUE</src></hll>
				<hll><line>1002</line><src>        if(__EBU_SDRMOD1_INIT)  EBU_SDRMOD1.U = __EBU_SDRMOD1_VALUE;</src></hll>
				<hll><line>1003</line><src>#endif</src></hll>
				<hll><line>1004</line><src>#if defined EBU_SDRMREF1 &amp;&amp; defined __EBU_SDRMREF1_VALUE</src></hll>
				<hll><line>1005</line><src>        if(__EBU_SDRMREF1_INIT)  EBU_SDRMREF1.U = __EBU_SDRMREF1_VALUE;</src></hll>
				<hll><line>1006</line><src>#endif</src></hll>
				<hll><line>1007</line><src>#if defined CBS_MCDBBS &amp;&amp; defined __CBS_MCDBBS_VALUE</src></hll>
				<hll><line>1008</line><src>        if(__CBS_MCDBBS_INIT)  CBS_MCDBBS .U = __CBS_MCDBBS_VALUE;</src></hll>
				<hll><line>1009</line><src>#endif</src></hll>
				<hll><line>1010</line><src>#if defined SBCU_CON &amp;&amp; defined __SBCU_CON_VALUE</src></hll>
				<hll><line>1011</line><src>        if(__SBCU_CON_INIT)  SBCU_CON.U = __SBCU_CON_VALUE;</src></hll>
				<hll><line>1012</line><src>#endif</src></hll>
				<hll><line>1013</line><src>#if defined EBU_BUSRAP1 &amp;&amp; defined __EBU_BUSRAP1_VALUE</src></hll>
				<hll><line>1014</line><src>        if(__EBU_BUSRAP1_INIT)  EBU_BUSRAP1.U = __EBU_BUSRAP1_VALUE;</src></hll>
				<hll><line>1015</line><src>#endif</src></hll>
				<hll><line>1016</line><src>#if defined EBU_BUSRAP0 &amp;&amp; defined __EBU_BUSRAP0_VALUE</src></hll>
				<hll><line>1017</line><src>        if(__EBU_BUSRAP0_INIT)  EBU_BUSRAP0.U = __EBU_BUSRAP0_VALUE;</src></hll>
				<hll><line>1018</line><src>#endif</src></hll>
				<hll><line>1019</line><src>#if defined EBU_BUSRAP2 &amp;&amp; defined __EBU_BUSRAP2_VALUE</src></hll>
				<hll><line>1020</line><src>        if(__EBU_BUSRAP2_INIT)  EBU_BUSRAP2.U = __EBU_BUSRAP2_VALUE;</src></hll>
				<hll><line>1021</line><src>#endif</src></hll>
				<hll><line>1022</line><src>#if defined EBU_BUSRAP3 &amp;&amp; defined __EBU_BUSRAP3_VALUE</src></hll>
				<hll><line>1023</line><src>        if(__EBU_BUSRAP3_INIT)  EBU_BUSRAP3.U = __EBU_BUSRAP3_VALUE;</src></hll>
				<hll><line>1024</line><src>#endif</src></hll>
				<hll><line>1025</line><src>#if defined EBU_BUSRCON0 &amp;&amp; defined __EBU_BUSRCON0_VALUE</src></hll>
				<hll><line>1026</line><src>        if(__EBU_BUSRCON0_INIT)  EBU_BUSRCON0.U = __EBU_BUSRCON0_VALUE;</src></hll>
				<hll><line>1027</line><src>#endif</src></hll>
				<hll><line>1028</line><src>#if defined EBU_BUSRCON1 &amp;&amp; defined __EBU_BUSRCON1_VALUE</src></hll>
				<hll><line>1029</line><src>        if(__EBU_BUSRCON1_INIT)  EBU_BUSRCON1.U = __EBU_BUSRCON1_VALUE;</src></hll>
				<hll><line>1030</line><src>#endif</src></hll>
				<hll><line>1031</line><src>#if defined EBU_BUSRCON2 &amp;&amp; defined __EBU_BUSRCON2_VALUE</src></hll>
				<hll><line>1032</line><src>        if(__EBU_BUSRCON2_INIT)  EBU_BUSRCON2.U = __EBU_BUSRCON2_VALUE;</src></hll>
				<hll><line>1033</line><src>#endif</src></hll>
				<hll><line>1034</line><src>#if defined EBU_BUSRCON3 &amp;&amp; defined __EBU_BUSRCON3_VALUE</src></hll>
				<hll><line>1035</line><src>        if(__EBU_BUSRCON3_INIT)  EBU_BUSRCON3.U = __EBU_BUSRCON3_VALUE;</src></hll>
				<hll><line>1036</line><src>#endif</src></hll>
				<hll><line>1037</line><src>#if defined EBU_BUSWAP0 &amp;&amp; defined __EBU_BUSWAP0_VALUE</src></hll>
				<hll><line>1038</line><src>        if(__EBU_BUSWAP0_INIT)  EBU_BUSWAP0.U = __EBU_BUSWAP0_VALUE;</src></hll>
				<hll><line>1039</line><src>#endif</src></hll>
				<hll><line>1040</line><src>#if defined EBU_BUSWAP1 &amp;&amp; defined __EBU_BUSWAP1_VALUE</src></hll>
				<hll><line>1041</line><src>        if(__EBU_BUSWAP1_INIT)  EBU_BUSWAP1.U = __EBU_BUSWAP1_VALUE;</src></hll>
				<hll><line>1042</line><src>#endif</src></hll>
				<hll><line>1043</line><src>#if defined EBU_BUSWAP2 &amp;&amp; defined __EBU_BUSWAP2_VALUE</src></hll>
				<hll><line>1044</line><src>        if(__EBU_BUSWAP2_INIT)  EBU_BUSWAP2.U = __EBU_BUSWAP2_VALUE;</src></hll>
				<hll><line>1045</line><src>#endif</src></hll>
				<hll><line>1046</line><src>#if defined EBU_BUSWAP3 &amp;&amp; defined __EBU_BUSWAP3_VALUE</src></hll>
				<hll><line>1047</line><src>        if(__EBU_BUSWAP3_INIT)  EBU_BUSWAP3.U = __EBU_BUSWAP3_VALUE;</src></hll>
				<hll><line>1048</line><src>#endif</src></hll>
				<hll><line>1049</line><src>#if defined EBU_BUSWCON0 &amp;&amp; defined __EBU_BUSWCON0_VALUE</src></hll>
				<hll><line>1050</line><src>        if(__EBU_BUSWCON0_INIT)  EBU_BUSWCON0.U = __EBU_BUSWCON0_VALUE;</src></hll>
				<hll><line>1051</line><src>#endif</src></hll>
				<hll><line>1052</line><src>#if defined EBU_BUSWCON1 &amp;&amp; defined __EBU_BUSWCON1_VALUE</src></hll>
				<hll><line>1053</line><src>        if(__EBU_BUSWCON1_INIT)  EBU_BUSWCON1.U = __EBU_BUSWCON1_VALUE;</src></hll>
				<hll><line>1054</line><src>#endif</src></hll>
				<hll><line>1055</line><src>#if defined EBU_BUSWCON2 &amp;&amp; defined __EBU_BUSWCON2_VALUE</src></hll>
				<hll><line>1056</line><src>        if(__EBU_BUSWCON2_INIT)  EBU_BUSWCON2.U = __EBU_BUSWCON2_VALUE;</src></hll>
				<hll><line>1057</line><src>#endif</src></hll>
				<hll><line>1058</line><src>#if defined EBU_BUSWCON3 &amp;&amp; defined __EBU_BUSWCON3_VALUE</src></hll>
				<hll><line>1059</line><src>        if(__EBU_BUSWCON3_INIT)  EBU_BUSWCON3.U = __EBU_BUSWCON3_VALUE;</src></hll>
				<hll><line>1060</line><src>#endif</src></hll>
				<hll><line>1061</line><src>#if defined EBU_EXTBOOT &amp;&amp; defined __EBU_EXTBOOT_VALUE</src></hll>
				<hll><line>1062</line><src>        if(__EBU_EXTBOOT_INIT)  EBU_EXTBOOT.U = __EBU_EXTBOOT_VALUE;</src></hll>
				<hll><line>1063</line><src>#endif</src></hll>
				<hll><line>1064</line><src>#if defined EBU_MODCON &amp;&amp; defined __EBU_MODCON_VALUE</src></hll>
				<hll><line>1065</line><src>        if(__EBU_MODCON_INIT)  EBU_MODCON.U = __EBU_MODCON_VALUE;</src></hll>
				<hll><line>1066</line><src>#endif</src></hll>
				<hll><line>1067</line><src>#if defined EBU_DDRNCON &amp;&amp; defined __EBU_DDRNCON_VALUE</src></hll>
				<hll><line>1068</line><src>        if(__EBU_DDRNCON_INIT)  EBU_DDRNCON.U = __EBU_DDRNCON_VALUE;</src></hll>
				<hll><line>1069</line><src>#endif</src></hll>
				<hll><line>1070</line><src>#if defined EBU_DDRNMOD &amp;&amp; defined __EBU_DDRNMOD_VALUE</src></hll>
				<hll><line>1071</line><src>        if(__EBU_DDRNMOD_INIT)  EBU_DDRNMOD.U = __EBU_DDRNMOD_VALUE;</src></hll>
				<hll><line>1072</line><src>#endif</src></hll>
				<hll><line>1073</line><src>#if defined EBU_DDRNMOD2 &amp;&amp; defined __EBU_DDRNMOD2_VALUE</src></hll>
				<hll><line>1074</line><src>        if(__EBU_DDRNMOD2_INIT)  EBU_DDRNMOD2.U = __EBU_DDRNMOD2_VALUE;</src></hll>
				<hll><line>1075</line><src>#endif</src></hll>
				<hll><line>1076</line><src>#if defined EBU_DDRNPRLD &amp;&amp; defined __EBU_DDRNPRLD_VALUE</src></hll>
				<hll><line>1077</line><src>        if(__EBU_DDRNPRLD_INIT)  EBU_DDRNPRLD.U = __EBU_DDRNPRLD_VALUE;</src></hll>
				<hll><line>1078</line><src>#endif</src></hll>
				<hll><line>1079</line><src>#if defined EBU_DDRNTAG0 &amp;&amp; defined __EBU_DDRNTAG0_VALUE</src></hll>
				<hll><line>1080</line><src>        if(__EBU_DDRNTAG0_INIT)  EBU_DDRNTAG0.U = __EBU_DDRNTAG0_VALUE;</src></hll>
				<hll><line>1081</line><src>#endif</src></hll>
				<hll><line>1082</line><src>#if defined EBU_DDRNTAG1 &amp;&amp; defined __EBU_DDRNTAG1_VALUE</src></hll>
				<hll><line>1083</line><src>        if(__EBU_DDRNTAG1_INIT)  EBU_DDRNTAG1.U = __EBU_DDRNTAG1_VALUE;</src></hll>
				<hll><line>1084</line><src>#endif</src></hll>
				<hll><line>1085</line><src>#if defined EBU_DDRNTAG2 &amp;&amp; defined __EBU_DDRNTAG2_VALUE</src></hll>
				<hll><line>1086</line><src>        if(__EBU_DDRNTAG2_INIT)  EBU_DDRNTAG2.U = __EBU_DDRNTAG2_VALUE;</src></hll>
				<hll><line>1087</line><src>#endif</src></hll>
				<hll><line>1088</line><src>#if defined EBU_DDRNTAG3 &amp;&amp; defined __EBU_DDRNTAG3_VALUE</src></hll>
				<hll><line>1089</line><src>        if(__EBU_DDRNTAG3_INIT)  EBU_DDRNTAG3.U = __EBU_DDRNTAG3_VALUE;</src></hll>
				<hll><line>1090</line><src>#endif</src></hll>
				<hll><line>1091</line><src>#if defined EBU_DLLCON &amp;&amp; defined __EBU_DLLCON_VALUE</src></hll>
				<hll><line>1092</line><src>        if(__EBU_DLLCON_INIT)  EBU_DLLCON.U = __EBU_DLLCON_VALUE;</src></hll>
				<hll><line>1093</line><src>#endif</src></hll>
				<hll><line>1094</line><src>#if defined EBU_SDRMCON &amp;&amp; defined __EBU_SDRMCON_VALUE</src></hll>
				<hll><line>1095</line><src>        if(__EBU_SDRMCON_INIT)  EBU_SDRMCON.U = __EBU_SDRMCON_VALUE;</src></hll>
				<hll><line>1096</line><src>#endif</src></hll>
				<hll><line>1097</line><src>#if defined EBU_SDRMOD &amp;&amp; defined __EBU_SDRMOD_VALUE</src></hll>
				<hll><line>1098</line><src>        if(__EBU_SDRMOD_INIT)  EBU_SDRMOD.U = __EBU_SDRMOD_VALUE;</src></hll>
				<hll><line>1099</line><src>#endif</src></hll>
				<hll><line>1100</line><src>#if defined EBU_SDRMREF &amp;&amp; defined __EBU_SDRMREF_VALUE</src></hll>
				<hll><line>1101</line><src>        if(__EBU_SDRMREF_INIT)  EBU_SDRMREF.U = __EBU_SDRMREF_VALUE;</src></hll>
				<hll><line>1102</line><src>#endif</src></hll>
				<hll><line>1103</line><src>#if defined EBU_SDRSTAT &amp;&amp; defined __EBU_SDRSTAT_VALUE</src></hll>
				<hll><line>1104</line><src>        if(__EBU_SDRSTAT_INIT)  EBU_SDRSTAT.U = __EBU_SDRSTAT_VALUE;</src></hll>
				<hll><line>1105</line><src>#endif</src></hll>
				<hll><line>1106</line><src></src></hll>
				<hll><line>1107</line><src>        /*</src></hll>
				<hll><line>1108</line><src>         * Initialize global address registers a0/a1 to support</src></hll>
				<hll><line>1109</line><src>         * __a0/__a1 storage qualifiers of the C compiler.</src></hll>
				<hll><line>1110</line><src>         */</src></hll>
				<hll><line>1111</line><src>#if __A0A1_INIT</src></hll>
				<hll><cov>never</cov><line>1112</line><src>        void * a0 = _SMALL_DATA_;        </src></hll>
				<asm><cov>never</cov><addr>P:80005A8A</addr><code>F0000091</code><mnemonic>movh.a    a15,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A8E</addr><code>0000FFD9</code><mnemonic>lea       a15,[a15]0x0</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>1113</line><src>        __asm( &quot;mov.aa\ta0,%0&quot;::&quot;a&quot;(a0) );</src></hll>
				<asm><cov>never</cov><addr>P:80005A92</addr><code>F040</code><mnemonic>mov16.aa  a0,a15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1114</line><src></src></hll>
				<hll><cov>never</cov><line>1115</line><src>        void * a1 = _LITERAL_DATA_;        </src></hll>
				<asm><cov>never</cov><addr>P:80005A94</addr><code>F0000091</code><mnemonic>movh.a    a15,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A98</addr><code>0000FFD9</code><mnemonic>lea       a15,[a15]0x0</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>1116</line><src>        __asm( &quot;mov.aa\ta1,%0&quot;::&quot;a&quot;(a1) );</src></hll>
				<asm><cov>never</cov><addr>P:80005A9C</addr><code>F140</code><mnemonic>mov16.aa  a1,a15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1117</line><src>#endif</src></hll>
				<hll><line>1118</line><src></src></hll>
				<hll><line>1119</line><src>        /*</src></hll>
				<hll><line>1120</line><src>         * Initialize global address registers a8/a9 to support</src></hll>
				<hll><line>1121</line><src>         * __a8/__a9 storage qualifiers of the C compiler. A8 and A9</src></hll>
				<hll><line>1122</line><src>         * are reserved for OS use, or for application use in cases </src></hll>
				<hll><line>1123</line><src>         * where the application ans OS are tightly coupled.</src></hll>
				<hll><line>1124</line><src>         */</src></hll>
				<hll><line>1125</line><src>#if __A8A9_INIT</src></hll>
				<hll><cov>never</cov><line>1126</line><src>        void * a8 = _A8_DATA_;        </src></hll>
				<asm><cov>never</cov><addr>P:80005A9E</addr><code>F0000091</code><mnemonic>movh.a    a15,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005AA2</addr><code>0000FFD9</code><mnemonic>lea       a15,[a15]0x0</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>1127</line><src>        __asm( &quot;mov.aa\ta8,%0&quot;::&quot;a&quot;(a8) );</src></hll>
				<asm><cov>never</cov><addr>P:80005AA6</addr><code>F840</code><mnemonic>mov16.aa  a8,a15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1128</line><src></src></hll>
				<hll><cov>never</cov><line>1129</line><src>        void * a9 = _A9_DATA_;        </src></hll>
				<asm><cov>never</cov><addr>P:80005AA8</addr><code>F0000091</code><mnemonic>movh.a    a15,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005AAC</addr><code>0000FFD9</code><mnemonic>lea       a15,[a15]0x0</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>1130</line><src>        __asm( &quot;mov.aa\ta9,%0&quot;::&quot;a&quot;(a9) );</src></hll>
				<asm><cov>never</cov><addr>P:80005AB0</addr><code>F940</code><mnemonic>mov16.aa  a9,a15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1131</line><src>#endif</src></hll>
				<hll><line>1132</line><src>        </src></hll>
				<hll><line>1133</line><src>        /* Setup the context save area linked list. */</src></hll>
				<hll><line>1134</line><src>#if __CSA_INIT</src></hll>
				<hll><line>1135</line><src>        </src></hll>
				<hll><line>1136</line><src>#  if !__CPU_TC051_INITIAL__</src></hll>
				<hll><line>1137</line><src>#  define MAX_NR_OF_CSA_AREAS     1</src></hll>
				<hll><line>1138</line><src>extern int _lc_ub_csa_01[][16];    /* context save area 1 begin */</src></hll>
				<hll><line>1139</line><src>extern int _lc_ue_csa_01[][16];    /* context save area 1 end   */</src></hll>
				<hll><cov>never</cov><line>1140</line><src>static __far int (* const csa_area_begin[])[16] = { _lc_ub_csa_01 }; </src></hll>
				<asm><cov>never</cov><addr>P:80005AB4</addr><code>01DA</code><mnemonic>mov16     d15,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005AB6</addr><code>FD000091</code><mnemonic>movh.a    a15,#0xD000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005ABA</addr><code>0400FFD9</code><mnemonic>lea       a15,[a15]0x4000</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>1141</line><src>static __far int (* const csa_area_end[])[16]   = { _lc_ue_csa_01 };</src></hll>
				<asm><cov>never</cov><addr>P:80005ABE</addr><code>2D000091</code><mnemonic>movh.a    a2,#0xD000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005AC2</addr><code>050022D9</code><mnemonic>lea       a2,[a2]0x5000</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1142</line><src>#  else</src></hll>
				<hll><line>1143</line><src>#  define MAX_NR_OF_CSA_AREAS     3</src></hll>
				<hll><line>1144</line><src>extern int _lc_ub_csa_01[][16];    /* context save area 1 begin */</src></hll>
				<hll><line>1145</line><src>extern int _lc_ue_csa_01[][16];    /* context save area 1 end   */</src></hll>
				<hll><line>1146</line><src>extern int _lc_ub_csa_02[][16];    /* context save area 2 begin */</src></hll>
				<hll><line>1147</line><src>extern int _lc_ue_csa_02[][16];    /* context save area 2 end   */</src></hll>
				<hll><line>1148</line><src>extern int _lc_ub_csa_03[][16];    /* context save area 3 begin */</src></hll>
				<hll><line>1149</line><src>extern int _lc_ue_csa_03[][16];    /* context save area 3 end   */</src></hll>
				<hll><line>1150</line><src>static __far int (* const csa_area_begin[])[16] = { _lc_ub_csa_01, _lc_ub_csa_02, _lc_ub_csa_03 };        </src></hll>
				<hll><line>1151</line><src>static __far int (* const csa_area_end[])[16]   = { _lc_ue_csa_01, _lc_ue_csa_02, _lc_ue_csa_03 };</src></hll>
				<hll><line>1152</line><src>#  endif</src></hll>
				<hll><line>1153</line><src></src></hll>
				<hll><line>1154</line><src>        int  i, k;</src></hll>
				<hll><line>1155</line><src>        int  no_of_csas;</src></hll>
				<hll><line>1156</line><src>        int * csa;</src></hll>
				<hll><cov>never</cov><line>1157</line><src>        unsigned int  seg_nr, seg_idx, pcxi_val=0;</src></hll>
				<asm><cov>never</cov><addr>P:80005AB2</addr><code>0082</code><mnemonic>mov16     d0,#0x0</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>1158</line><src>        _Bool first=true;</src></hll>
				<asm><cov>never</cov><addr>P:80005AB4</addr><code>01DA</code><mnemonic>mov16     d15,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005AB6</addr><code>FD000091</code><mnemonic>movh.a    a15,#0xD000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005ABA</addr><code>0400FFD9</code><mnemonic>lea       a15,[a15]0x4000</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1159</line><src>        </src></hll>
				<hll><line>1160</line><src>        for (i=0; i &lt; MAX_NR_OF_CSA_AREAS; i++)</src></hll>
				<hll><line>1161</line><src>        {</src></hll>
				<hll><line>1162</line><src>                /* first calculate nr of CSAs in this area */</src></hll>
				<hll><cov>never</cov><line>1163</line><src>                no_of_csas = csa_area_end[i] - csa_area_begin[i]; </src></hll>
				<asm><cov>never</cov><addr>P:80005AC6</addr><code>2020F201</code><mnemonic>sub.a     a2,a2,a15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005ACA</addr><code>2180</code><mnemonic>mov16.d   d1,a2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005ACC</addr><code>A186</code><mnemonic>sha16     d1,#-0x6</mnemonic><comment>no_of_csas,#-6</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><line>1164</line><src>                </src></hll>
				<hll><cov>never</cov><line>1165</line><src>                for (k=0; k &lt; no_of_csas; k++)</src></hll>
				<asm><cov>never</cov><addr>P:80005ACE</addr><code>0202</code><mnemonic>mov16     d2,d0</mnemonic><comment>d2,pcxi_val</comment></asm>
				<asm><cov>never</cov><addr>P:80005AD0</addr><code>143C</code><mnemonic>j16       0x80005AF8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005AD8</addr><code>001E438F</code><mnemonic>sh        d0,d3,#-0x1C</mnemonic><comment>pcxi_val,csa,#-28</comment></asm>
				<asm><cov>never</cov><addr>P:80005ADC</addr><code>1A00FF49</code><mnemonic>lea       a15,[a15]0x40</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005AF6</addr><code>12C2</code><mnemonic>add16     d2,#0x1</mnemonic><comment>k,#1</comment></asm>
				<asm><cov>never</cov><addr>P:80005AF8</addr><code>7FED123F</code><mnemonic>jlt       d2,d1,0x80005AD2</mnemonic><comment>k,no_of_csas,0x80005AD2</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1166</line><src>                {</src></hll>
				<hll><cov>never</cov><line>1167</line><src>                        csa = csa_area_begin[i][k];</src></hll>
				<asm><cov>never</cov><addr>P:80005AD2</addr><code>F240</code><mnemonic>mov16.aa  a2,a15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1168</line><src>                        /* Store null pointer in last CSA (= very first time!) */</src></hll>
				<hll><cov>never</cov><line>1169</line><src>                        *csa = pcxi_val;                        </src></hll>
				<asm><cov>never</cov><addr>P:80005AD6</addr><code>2074</code><mnemonic>st16.w    [a2],d0</mnemonic><comment>[a2],pcxi_val</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><line>1170</line><src></src></hll>
				<hll><cov>never</cov><line>1171</line><src>                        seg_nr  = (((unsigned int)csa &gt;&gt; 28) &amp; 0xf) &lt;&lt; 16;</src></hll>
				<asm><cov>never</cov><addr>P:80005AD4</addr><code>2380</code><mnemonic>mov16.d   d3,a2</mnemonic><comment>d3,csa</comment></asm>
				<asm><cov>never</cov><addr>P:80005AD8</addr><code>001E438F</code><mnemonic>sh        d0,d3,#-0x1C</mnemonic><comment>pcxi_val,csa,#-28</comment></asm>
				<asm><cov>never</cov><addr>P:80005ADC</addr><code>1A00FF49</code><mnemonic>lea       a15,[a15]0x40</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005AE4</addr><code>0001008F</code><mnemonic>sh        d0,d0,#0x10</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>1172</line><src>                        seg_idx = (((unsigned int)csa &gt;&gt; 6) &amp; 0xffff);</src></hll>
				<asm><cov>never</cov><addr>P:80005AE0</addr><code>33700337</code><mnemonic>extr.u    d3,d3,0x6,#0x10</mnemonic><comment>csa,csa,6,#16</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>1173</line><src>                        pcxi_val = seg_nr | seg_idx;</src></hll>
				<asm><cov>never</cov><addr>P:80005AE8</addr><code>30A6</code><mnemonic>or16      d0,d3</mnemonic><comment>seg_nr,seg_idx</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>1174</line><src>                        if (first)</src></hll>
				<asm><cov>never</cov><addr>P:80005AEA</addr><code>066E</code><mnemonic>jz16      d15,0x80005AF6</mnemonic><comment>first,0x80005AF6</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1175</line><src>                        {</src></hll>
				<hll><cov>never</cov><line>1176</line><src>                                first = false;                                </src></hll>
				<asm><cov>never</cov><addr>P:80005AEC</addr><code>00DA</code><mnemonic>mov16     d15,#0x0</mnemonic><comment>first,#0</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><cov>never</cov><line>1177</line><src>                                __mtcr(LCX, pcxi_val);</src></hll>
				<asm><cov>never</cov><addr>P:80005AEE</addr><code>0FE3C0CD</code><mnemonic>mtcr      #0xFE3C,d0</mnemonic><comment>#65084,pcxi_val</comment></asm>
				<asm><cov>never</cov><addr>P:80005AF2</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1178</line><src>                        }                        </src></hll>
				<hll><line>1179</line><src>                }</src></hll>
				<hll><cov>never</cov><line>1180</line><src>                __mtcr(FCX, pcxi_val);</src></hll>
				<asm><cov>never</cov><addr>P:80005AFC</addr><code>0FE380CD</code><mnemonic>mtcr      #0xFE38,d0</mnemonic><comment>#65080,pcxi_val</comment></asm>
				<asm><cov>never</cov><addr>P:80005B00</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1181</line><src>        }</src></hll>
				<hll><line>1182</line><src>#endif</src></hll>
				<hll><line>1183</line><src>        </src></hll>
				<hll><line>1184</line><src>        /*</src></hll>
				<hll><line>1185</line><src>         * PMU_TC.004 workaround:</src></hll>
				<hll><line>1186</line><src>         * The split mode is disabled on the LMB bus to workaround.</src></hll>
				<hll><line>1187</line><src>         */</src></hll>
				<hll><line>1188</line><src>#if __PMU_TC004_INITIAL__  &amp;&amp; defined LFI_CON</src></hll>
				<hll><line>1189</line><src>        LFI_CON.U &amp;= 0xfffffffe;        </src></hll>
				<hll><line>1190</line><src>#endif</src></hll>
				<hll><line>1191</line><src>        </src></hll>
				<hll><line>1192</line><src>        /*</src></hll>
				<hll><line>1193</line><src>         * Initialize and clear C variables.</src></hll>
				<hll><line>1194</line><src>         */</src></hll>
				<hll><line>1195</line><src>#if __C_INIT</src></hll>
				<hll><cov>never</cov><line>1196</line><src>        _c_init();      /* initialize data */</src></hll>
				<asm><cov>never</cov><addr>P:80005B04</addr><code>D284FF6D</code><mnemonic>call      0x8000000C</mnemonic><comment>_c_init</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1197</line><src>#endif  </src></hll>
				<hll><line>1198</line><src></src></hll>
				<hll><line>1199</line><src>        /*</src></hll>
				<hll><line>1200</line><src>         * initialize __clocks_per_sec,</src></hll>
				<hll><line>1201</line><src>         * the oscillator frequency is defined by __fOSC.</src></hll>
				<hll><line>1202</line><src>         */</src></hll>
				<hll><line>1203</line><src>#if __CLOCKS_PER_SEC_INIT</src></hll>
				<hll><line>1204</line><src>        setclockpersec();</src></hll>
				<hll><line>1205</line><src>#endif  </src></hll>
				<hll><line>1206</line><src></src></hll>
				<hll><line>1207</line><src>        /* initialize profiling if required </src></hll>
				<hll><line>1208</line><src>         */        </src></hll>
				<hll><line>1209</line><src>#if __PROF_ENABLE__</src></hll>
				<hll><line>1210</line><src>        __prof_init();</src></hll>
				<hll><line>1211</line><src>#endif</src></hll>
				<hll><line>1212</line><src></src></hll>
				<hll><line>1213</line><src>        /*</src></hll>
				<hll><line>1214</line><src>         * Call a user function called _endinit() within one can initialize the </src></hll>
				<hll><line>1215</line><src>         * registers protected via the EndInit feature.</src></hll>
				<hll><line>1216</line><src>         * Beware that protected registers are unlocked </src></hll>
				<hll><line>1217</line><src>         * for the duration of the Time-out Period only!</src></hll>
				<hll><line>1218</line><src>         */</src></hll>
				<hll><line>1219</line><src>#ifdef _CALL_ENDINIT</src></hll>
				<hll><line>1220</line><src>        endinit_set(_ENDINIT_DISABLE);  /* disable the write-protection */</src></hll>
				<hll><line>1221</line><src>        _endinit();        </src></hll>
				<hll><line>1222</line><src>        endinit_set(_ENDINIT_ENABLE);    /* enable the write-protection  */</src></hll>
				<hll><line>1223</line><src>#endif</src></hll>
				<hll><line>1224</line><src>        </src></hll>
				<hll><line>1225</line><src>        /*</src></hll>
				<hll><line>1226</line><src>         * Call a user function before starting main().</src></hll>
				<hll><line>1227</line><src>         */</src></hll>
				<hll><line>1228</line><src>#ifdef __CALL_INIT</src></hll>
				<hll><line>1229</line><src>        _call_init();        </src></hll>
				<hll><line>1230</line><src>#endif</src></hll>
				<hll><line>1231</line><src></src></hll>
				<hll><line>1232</line><src>        /*</src></hll>
				<hll><line>1233</line><src>         *      Download image to xc800 XRAM</src></hll>
				<hll><line>1234</line><src>         */</src></hll>
				<hll><line>1235</line><src>#if ( defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H )</src></hll>
				<hll><line>1236</line><src>#if __XC800_INIT</src></hll>
				<hll><line>1237</line><src>        _xc800_init();</src></hll>
				<hll><line>1238</line><src>#endif</src></hll>
				<hll><line>1239</line><src>#endif</src></hll>
				<hll><line>1240</line><src>        </src></hll>
				<hll><line>1241</line><src>#if ( defined _REGUSERDEF16X_H || defined _REGUSERDEF162_H || defined _REGTC27X_H || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H || defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC29X_H || defined _REGTC29XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H )</src></hll>
				<hll><line>1242</line><src>#if (__HALT_INIT_TC1 &amp;&amp; (__HALT_VALUE_TC1 &amp; 0x2)) || (__HALT_INIT_TC2 &amp;&amp; (__HALT_VALUE_TC2 &amp; 0x2)) || (__HALT_INIT_TC3 &amp;&amp; (__HALT_VALUE_TC3 &amp; 0x2)) || (__HALT_INIT_TC4 &amp;&amp; (__HALT_VALUE_TC4 &amp; 0x2)) || (__HALT_INIT_TC5 &amp;&amp; (__HALT_VALUE_TC5 &amp; 0x2))</src></hll>
				<hll><line>1243</line><src>#if __C_INIT || __CLOCKS_PER_SEC_INIT || __PROF_ENABLE__ || _CALL_ENDINIT || (defined __CALL_INIT)</src></hll>
				<hll><cov>never</cov><line>1244</line><src>        __swapmskw( (unsigned int *)&amp;_tcx_end_c_init, 0x1, 0x1 );       /* tc0 end of initialization */</src></hll>
				<asm><cov>never</cov><addr>P:80005B08</addr><code>1082</code><mnemonic>mov16     d0,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005B0A</addr><code>1182</code><mnemonic>mov16     d1,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005B0C</addr><code>0880C049</code><mnemonic>swapmsk.w [a12]0x0,e0</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1245</line><src>        /*</src></hll>
				<hll><line>1246</line><src>         * Before calling main, which has code core association share,</src></hll>
				<hll><line>1247</line><src>         * wait until all cores have done the global initializations</src></hll>
				<hll><line>1248</line><src>         * to avoid race conditions on initialized shared global data.</src></hll>
				<hll><line>1249</line><src>         */</src></hll>
				<hll><cov>never</cov><line>1250</line><src>        while ( ( _tcx_end_c_init &amp; 0x3f ) != 0x3f ) ;</src></hll>
				<asm><cov>never</cov><addr>P:80005B10</addr><code>0003F03B</code><mnemonic>mov       d0,#0x3F</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005B14</addr><code>CF54</code><mnemonic>ld16.w    d15,[a12]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005B16</addr><code>3F16</code><mnemonic>and16     d15,#0x3F</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005B18</addr><code>FFFE0F5F</code><mnemonic>jne       d15,d0,0x80005B14</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>1251</line><src>#endif</src></hll>
				<hll><line>1252</line><src>#endif</src></hll>
				<hll><line>1253</line><src>#endif</src></hll>
				<hll><line>1254</line><src>        </src></hll>
				<hll><line>1255</line><src>        /*</src></hll>
				<hll><line>1256</line><src>         * Call C main program.</src></hll>
				<hll><line>1257</line><src>         */</src></hll>
				<hll><line>1258</line><src>#if __USE_ARGC_ARGV</src></hll>
				<hll><line>1259</line><src>        exit( main_core0( _argcv( argcv, __ARGCV_BUFSIZE ), (char **)argcv ) );</src></hll>
				<hll><line>1260</line><src>#else</src></hll>
				<hll><cov>never</cov><line>1261</line><src>        exit( main_core0( 0, NULL ) );                /* argc is 0 */</src></hll>
				<asm><cov>never</cov><addr>P:80005B1C</addr><code>0482</code><mnemonic>mov16     d4,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005B1E</addr><code>04A0</code><mnemonic>mov16.a   a4,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005B20</addr><code>046D006D</code><mnemonic>call      0x800063FA</mnemonic><comment>main_core0</comment></asm>
				<asm><cov>never</cov><addr>P:80005B24</addr><code>2402</code><mnemonic>mov16     d4,d2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005B26</addr><code>D271FF1D</code><mnemonic>j         0x80000008</mnemonic><comment>exit</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><line>1262</line><src>#endif</src></hll>
				<hll><line>1263</line><src></src></hll>
				<hll><line>1264</line><src>        /*</src></hll>
				<hll><line>1265</line><src>         * Default trap vectors are resolved from the C-library.</src></hll>
				<hll><line>1266</line><src>         */</src></hll>
				<hll><line>1267</line><src>#if __BTV_INIT</src></hll>
				<hll><line>1268</line><src>#  if __RESOLVE_TRAP_0</src></hll>
				<hll><line>1269</line><src>#    pragma extern  _trapmmu</src></hll>
				<hll><line>1270</line><src>#  endif</src></hll>
				<hll><line>1271</line><src>#  if __RESOLVE_TRAP_1</src></hll>
				<hll><line>1272</line><src>#    pragma extern  _trapprotection</src></hll>
				<hll><line>1273</line><src>#  endif</src></hll>
				<hll><line>1274</line><src>#  if __RESOLVE_TRAP_2</src></hll>
				<hll><line>1275</line><src>#    pragma extern  _trapinstruction</src></hll>
				<hll><line>1276</line><src>#  endif</src></hll>
				<hll><line>1277</line><src>#  if __RESOLVE_TRAP_3</src></hll>
				<hll><line>1278</line><src>#    pragma extern  _trapcontext</src></hll>
				<hll><line>1279</line><src>#  endif</src></hll>
				<hll><line>1280</line><src>#  if __RESOLVE_TRAP_4</src></hll>
				<hll><line>1281</line><src>#    pragma extern  _trapbus</src></hll>
				<hll><line>1282</line><src>#  endif</src></hll>
				<hll><line>1283</line><src>#  if __RESOLVE_TRAP_5</src></hll>
				<hll><line>1284</line><src>#    pragma extern  _trapassertion</src></hll>
				<hll><line>1285</line><src>#  endif</src></hll>
				<hll><line>1286</line><src>#  if __RESOLVE_TRAP_6</src></hll>
				<hll><line>1287</line><src>#    pragma extern  _trapsystem</src></hll>
				<hll><line>1288</line><src>#  endif</src></hll>
				<hll><line>1289</line><src>#  if __RESOLVE_TRAP_7</src></hll>
				<hll><line>1290</line><src>#    pragma extern  _trapnmi</src></hll>
				<hll><line>1291</line><src>#  endif</src></hll>
				<hll><line>1292</line><src>#endif</src></hll>
				<hll><line>1293</line><src>        </src></hll>
				<hll><line>1294</line><src>}</src></hll>
				<hll><line>1295</line><src></src></hll>
				<hll><line>1296</line><src>/**************************************************************************</src></hll>
				<hll><line>1297</line><src> *</src></hll>
				<hll><line>1298</line><src> * FUNCTION:     endinit_set</src></hll>
				<hll><line>1299</line><src> *</src></hll>
				<hll><line>1300</line><src> * DESCRIPTION:  Sets or Clears the ENDINIT bit in the WDT_CON0 register</src></hll>
				<hll><line>1301</line><src> *               in order to enabled or disable the write-protection for</src></hll>
				<hll><line>1302</line><src> *               registers protected via the EndInit feature</src></hll>
				<hll><line>1303</line><src> *               (ie. BTV, BIV, ISP, PCON0, DCON0).</src></hll>
				<hll><line>1304</line><src> *</src></hll>
				<hll><line>1305</line><src> *************************************************************************/</src></hll>
				<hll><line>1306</line><src>static void inline endinit_set( _endinit_t endinit_value )</src></hll>
				<hll><line>1307</line><src>{</src></hll>
				<hll><line>1308</line><src>        unsigned int wdt_con0;</src></hll>
				<hll><line>1309</line><src></src></hll>
				<hll><line>1310</line><src>#if !( defined _REGUSERDEF16X_H || defined _REGUSERDEF162_H || defined _REGTC21X_H || defined _REGTC22X_H || defined _REGTC23X_ADAS_H || defined _REGTC23X_H || defined _REGTC27X_H || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H || defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC29X_H || defined _REGTC29XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H )</src></hll>
				<hll><line>1311</line><src>        unsigned int wdt_con1;</src></hll>
				<hll><line>1312</line><src>#endif</src></hll>
				<hll><line>1313</line><src>        /*</src></hll>
				<hll><line>1314</line><src>         * 1st step: Password access (create password and send to WDT_CON0)</src></hll>
				<hll><line>1315</line><src>         */        </src></hll>
				<hll><cov>never</cov><line>1316</line><src>        wdt_con0 = WDT_CON0.U;</src></hll>
				<asm><cov>never</cov><addr>P:800059AE</addr><code>2440</code><mnemonic>mov16.aa  a4,a2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059B2</addr><code>960C44D9</code><mnemonic>lea       a4,[a4]0x624C</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059B6</addr><code>FF39FF61</code><mnemonic>fcall     0x80005828</mnemonic><comment>.cocofun_3</comment></asm>
				<asm><cov>never</cov><addr>P:800059CC</addr><code>FF36FF61</code><mnemonic>fcall     0x80005838</mnemonic><comment>.cocofun_4</comment></asm>
				<asm><cov>never</cov><addr>P:800059D8</addr><code>FF28FF61</code><mnemonic>fcall     0x80005828</mnemonic><comment>.cocofun_3</comment></asm>
				<asm><cov>never</cov><addr>P:80005A72</addr><code>FEE3FF61</code><mnemonic>fcall     0x80005838</mnemonic><comment>.cocofun_4</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><cov>never</cov><line>1338</line><src>        __isync();</src></hll>
				<asm><cov>never</cov><addr>P:800059BA</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059D0</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059DC</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A76</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><cov>never</cov><line>1339</line><src>        WDT_CON0.U = wdt_con0;          </src></hll>
				<asm><cov>never</cov><addr>P:800059BE</addr><code>4F74</code><mnemonic>st16.w    [a4],d15</mnemonic><comment>[a4],wdt_con0</comment></asm>
				<asm><cov>never</cov><addr>P:800059D4</addr><code>4F74</code><mnemonic>st16.w    [a4],d15</mnemonic><comment>[a4],wdt_con0</comment></asm>
				<asm><cov>never</cov><addr>P:800059E0</addr><code>4F74</code><mnemonic>st16.w    [a4],d15</mnemonic><comment>[a4],wdt_con0</comment></asm>
				<asm><cov>never</cov><addr>P:80005A7A</addr><code>4F74</code><mnemonic>st16.w    [a4],d15</mnemonic><comment>[a4],wdt_con0</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><cov>never</cov><line>1340</line><src>        WDT_CON0.U;                     /* read is required */</src></hll>
				<asm><cov>never</cov><addr>P:800059C0</addr><code>4F54</code><mnemonic>ld16.w    d15,[a4]</mnemonic><comment>wdt_con0,[a4]</comment></asm>
				<asm><cov>never</cov><addr>P:800059D6</addr><code>4F54</code><mnemonic>ld16.w    d15,[a4]</mnemonic><comment>wdt_con0,[a4]</comment></asm>
				<asm><cov>never</cov><addr>P:800059EA</addr><code>4F54</code><mnemonic>ld16.w    d15,[a4]</mnemonic><comment>wdt_con0,[a4]</comment></asm>
				<asm><cov>never</cov><addr>P:80005A7C</addr><code>4F54</code><mnemonic>ld16.w    d15,[a4]</mnemonic><comment>wdt_con0,[a4]</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><line>1341</line><src>}</src></hll>
				<hll><line>1342</line><src></src></hll>
				<hll><line>1343</line><src>#if ( defined _REGUSERDEF16X_H || defined _REGUSERDEF162_H || defined _REGTC21X_H || defined _REGTC22X_H || defined _REGTC23X_ADAS_H || defined _REGTC23X_H || defined _REGTC27X_H || defined _REGTC27XB_H || defined _REGTC27XC_H || defined _REGTC27XD_H || defined _REGTC26X_H || defined _REGTC26XB_H || defined _REGTC29X_H || defined _REGTC29XB_H || defined _REGTC38X_H || defined _REGTC39X_H || defined _REGTC39XB_H )</src></hll>
				<hll><line>1344</line><src>/**************************************************************************</src></hll>
				<hll><line>1345</line><src> *</src></hll>
				<hll><line>1346</line><src> * FUNCTION:     safety_endinit_set</src></hll>
				<hll><line>1347</line><src> *</src></hll>
				<hll><line>1348</line><src> * DESCRIPTION:  Sets or Clears the ENDINIT bit in the WDTSCON0 register</src></hll>
				<hll><line>1349</line><src> *               in order to enabled or disable the write-protection for</src></hll>
				<hll><line>1350</line><src> *               safety-critical registers protected via the EndInit feature.</src></hll>
				<hll><line>1351</line><src> *</src></hll>
				<hll><line>1352</line><src> *************************************************************************/</src></hll>
				<hll><line>1353</line><src>static void inline safety_endinit_set( _endinit_t endinit_value )</src></hll>
				<hll><line>1354</line><src>{</src></hll>
				<hll><line>1355</line><src>        unsigned int wdtscon0;</src></hll>
				<hll><line>1356</line><src></src></hll>
				<hll><line>1357</line><src>        /*</src></hll>
				<hll><line>1358</line><src>         * 1st step: Password access (create password and send to WDTSCON0)</src></hll>
				<hll><line>1359</line><src>         */</src></hll>
				<hll><cov>never</cov><line>1360</line><src>        wdtscon0 = SCU_WDTSCON0.U;</src></hll>
				<asm><cov>never</cov><addr>P:8000597A</addr><code>FF67FF61</code><mnemonic>fcall     0x80005848</mnemonic><comment>.cocofun_5</comment></asm>
				<asm><cov>never</cov><addr>P:8000597E</addr><code>FF45FF61</code><mnemonic>fcall     0x80005808</mnemonic><comment>.cocofun_1</comment></asm>
				<asm><cov>never</cov><addr>P:80005998</addr><code>FF40FF61</code><mnemonic>fcall     0x80005818</mnemonic><comment>.cocofun_2</comment></asm>
				<asm><cov>never</cov><addr>P:800059A4</addr><code>FF32FF61</code><mnemonic>fcall     0x80005808</mnemonic><comment>.cocofun_1</comment></asm>
				<asm><cov>never</cov><addr>P:80005A7E</addr><code>FECDFF61</code><mnemonic>fcall     0x80005818</mnemonic><comment>.cocofun_2</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><cov>never</cov><line>1374</line><src>        __isync();</src></hll>
				<asm><cov>never</cov><addr>P:80005982</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000599C</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
				<asm><cov>never</cov><addr>P:800059A8</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005A82</addr><code>04C0000D</code><mnemonic>isync     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><cov>never</cov><line>1375</line><src>        SCU_WDTSCON0.U = wdtscon0;          </src></hll>
				<asm><cov>never</cov><addr>P:80005986</addr><code>FF74</code><mnemonic>st16.w    [a15],d15</mnemonic><comment>[a15],wdtscon0</comment></asm>
				<asm><cov>never</cov><addr>P:800059A0</addr><code>FF74</code><mnemonic>st16.w    [a15],d15</mnemonic><comment>[a15],wdtscon0</comment></asm>
				<asm><cov>never</cov><addr>P:800059AC</addr><code>FF74</code><mnemonic>st16.w    [a15],d15</mnemonic><comment>[a15],wdtscon0</comment></asm>
				<asm><cov>never</cov><addr>P:80005A86</addr><code>FF74</code><mnemonic>st16.w    [a15],d15</mnemonic><comment>[a15],wdtscon0</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c" type="multiple">
				<hll><cov>never</cov><line>1376</line><src>        SCU_WDTSCON0.U;                 /* read is required */</src></hll>
				<asm><cov>never</cov><addr>P:80005988</addr><code>FF54</code><mnemonic>ld16.w    d15,[a15]</mnemonic><comment>wdtscon0,[a15]</comment></asm>
				<asm><cov>never</cov><addr>P:800059A2</addr><code>FF54</code><mnemonic>ld16.w    d15,[a15]</mnemonic><comment>wdtscon0,[a15]</comment></asm>
				<asm><cov>never</cov><addr>P:800059B0</addr><code>FF54</code><mnemonic>ld16.w    d15,[a15]</mnemonic><comment>wdtscon0,[a15]</comment></asm>
				<asm><cov>never</cov><addr>P:80005A88</addr><code>FF54</code><mnemonic>ld16.w    d15,[a15]</mnemonic><comment>wdtscon0,[a15]</comment></asm>
			</mixed>
		</List.EXPORT>
	</listing>
</TRACE32>

<?xml version="1.0" encoding="iso-8859-1" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="t32transform.xsl"?>
<TRACE32 file="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Gen\20210610_TRACE32_20_02\Failsafe-TestSpec_RS4_0104\Report\DCU15_FAILSAFE_001_BAT\MANDO_FailSafe_Integration\FS_InvalidSignal\func-p-8000412a-800044db.xml">
	<coverage>
		<COVerage.EXPORT.ListLine ts="1623300793" t32ver="R.2020.09.000128638" t32pv="TRICORE" cpu="TC397XE" metric="object">
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\Rte_SWC_Diag</tree>
				<cov>partial</cov>
				<exec metric="object">50.847%</exec>
				<branches>-</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>0</never>
				<bytes>590</bytes>
				<bytesok>300</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_HWFailure</tree>
				<cov>partial</cov>
				<exec metric="object">16.831%</exec>
				<branches>10.000%</branches>
				<ok>0</ok>
				<taken>1</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>202</bytes>
				<bytesok>34</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\SWC_Failsafe</tree>
				<cov>partial</cov>
				<exec metric="object">67.441%</exec>
				<branches>-</branches>
				<ok>4</ok>
				<taken>11</taken>
				<nottaken>21</nottaken>
				<bytes>1548</bytes>
				<bytesok>1044</bytesok>
			</module>
			<module>
				<addrFrom>P:80002C38</addrFrom>
				<addrTo>P:80002DC9</addrTo>
				<tree>\\MANDO_FailSafe_Integration\FS_BatteryVoltage</tree>
				<cov>partial</cov>
				<exec metric="object">83.582%</exec>
				<branches>68.750%</branches>
				<ok>12</ok>
				<taken>3</taken>
				<nottaken>6</nottaken>
				<never>3</never>
				<bytes>402</bytes>
				<bytesok>336</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_CANBusOff</tree>
				<cov>partial</cov>
				<exec metric="object">45.736%</exec>
				<branches>1.215%</branches>
				<ok>0</ok>
				<taken>6</taken>
				<nottaken>2</nottaken>
				<never>321</never>
				<bytes>258</bytes>
				<bytesok>118</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_CANTimeout</tree>
				<cov>partial</cov>
				<exec metric="object">37.582%</exec>
				<branches>16.413%</branches>
				<ok>8</ok>
				<taken>82</taken>
				<nottaken>10</nottaken>
				<never>229</never>
				<bytes>2432</bytes>
				<bytesok>914</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_InvalidSignal</tree>
				<cov>partial</cov>
				<exec metric="object">54.381%</exec>
				<branches>34.650%</branches>
				<ok>3</ok>
				<taken>130</taken>
				<nottaken>92</nottaken>
				<never>104</never>
				<bytes>5866</bytes>
				<bytesok>3190</bytesok>
				<function>
					<addrFrom>P:8000412A</addrFrom>
					<addrTo>P:800044DB</addrTo>
					<tree uid="p-8000412a-800044db">\\MANDO_FailSafe_Integration\FS_InvalidSignal\FS_UpdateInfo_InvalidSignal</tree>
					<cov>partial</cov>
					<exec metric="object">58.139%</exec>
					<branches>38.709%</branches>
					<ok>0</ok>
					<taken>27</taken>
					<nottaken>21</nottaken>
					<never>14</never>
					<bytes>946</bytes>
					<bytesok>550</bytesok>
					<line>
						<addrFrom>P:80004216</addrFrom>
						<addrTo>P:80004219</addrTo>
						<tree>FS_InvalidSignal.c \713--716</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000421A</addrFrom>
						<addrTo>P:8000421F</addrTo>
						<tree>FS_InvalidSignal.c \717--717</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>6</bytesok>
					</line>
					<line>
						<addrFrom>P:80004222</addrFrom>
						<addrTo>P:80004225</addrTo>
						<tree>FS_InvalidSignal.c \718--719</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000422A</addrFrom>
						<addrTo>P:8000422D</addrTo>
						<tree>FS_InvalidSignal.c \720--720</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000422E</addrFrom>
						<addrTo>P:80004231</addrTo>
						<tree>FS_InvalidSignal.c \721--722</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>not taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>1</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004268</addrFrom>
						<addrTo>P:8000426F</addrTo>
						<tree>FS_InvalidSignal.c \723--723</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>8</bytesok>
					</line>
					<line>
						<addrFrom>P:80004232</addrFrom>
						<addrTo>P:80004243</addrTo>
						<tree>FS_InvalidSignal.c \724--724</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">55.555%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>2</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>10</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \725--725</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">11.111%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<bytes>18</bytes>
						<bytesok>2</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \726--726</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>12</bytesok>
					</line>
					<line>
						<addrFrom>P:80004130</addrFrom>
						<addrTo>P:80004133</addrTo>
						<tree>FS_InvalidSignal.c \762--765</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004134</addrFrom>
						<addrTo>P:8000413B</addrTo>
						<tree>FS_InvalidSignal.c \766--766</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>8</bytesok>
					</line>
					<line>
						<addrFrom>P:8000413C</addrFrom>
						<addrTo>P:80004141</addrTo>
						<tree>FS_InvalidSignal.c \767--768</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>6</bytesok>
					</line>
					<line>
						<addrFrom>P:8000414C</addrFrom>
						<addrTo>P:8000414F</addrTo>
						<tree>FS_InvalidSignal.c \769--770</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>not taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>1</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004178</addrFrom>
						<addrTo>P:8000417F</addrTo>
						<tree>FS_InvalidSignal.c \771--771</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>8</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \772--772</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">50.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>1</nottaken>
						<bytes>12</bytes>
						<bytesok>6</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \773--773</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">44.444%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<bytes>18</bytes>
						<bytesok>8</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \774--774</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>12</bytesok>
					</line>
					<line>
						<addrFrom>P:80004194</addrFrom>
						<addrTo>P:80004197</addrTo>
						<tree>FS_InvalidSignal.c \775--859</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004198</addrFrom>
						<addrTo>P:8000419D</addrTo>
						<tree>FS_InvalidSignal.c \860--860</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>6</bytesok>
					</line>
					<line>
						<addrFrom>P:8000419E</addrFrom>
						<addrTo>P:800041A1</addrTo>
						<tree>FS_InvalidSignal.c \861--862</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:800041A4</addrFrom>
						<addrTo>P:800041A7</addrTo>
						<tree>FS_InvalidSignal.c \863--863</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:800041AC</addrFrom>
						<addrTo>P:800041AF</addrTo>
						<tree>FS_InvalidSignal.c \864--864</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:800041B0</addrFrom>
						<addrTo>P:800041B3</addrTo>
						<tree>FS_InvalidSignal.c \865--865</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:800041B4</addrFrom>
						<addrTo>P:800041B7</addrTo>
						<tree>FS_InvalidSignal.c \866--867</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>not taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>1</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800041F4</addrFrom>
						<addrTo>P:800041FB</addrTo>
						<tree>FS_InvalidSignal.c \868--868</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>8</bytesok>
					</line>
					<line>
						<addrFrom>P:800041B8</addrFrom>
						<addrTo>P:800041D7</addrTo>
						<tree>FS_InvalidSignal.c \869--869</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">6.250%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>7</nottaken>
						<never>0</never>
						<bytes>32</bytes>
						<bytesok>2</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \870--870</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">14.285%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<bytes>14</bytes>
						<bytesok>2</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \871--871</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>12</bytesok>
					</line>
					<line>
						<addrFrom>P:80004204</addrFrom>
						<addrTo>P:80004209</addrTo>
						<tree>FS_InvalidSignal.c \872--874</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>taken</cov>
						<exec metric="object">66.666%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \875--875</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004278</addrFrom>
						<addrTo>P:8000427B</addrTo>
						<tree>FS_InvalidSignal.c \876--880</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000427C</addrFrom>
						<addrTo>P:80004281</addrTo>
						<tree>FS_InvalidSignal.c \881--881</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>6</bytesok>
					</line>
					<line>
						<addrFrom>P:80004282</addrFrom>
						<addrTo>P:80004285</addrTo>
						<tree>FS_InvalidSignal.c \882--883</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004288</addrFrom>
						<addrTo>P:8000428B</addrTo>
						<tree>FS_InvalidSignal.c \884--884</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004290</addrFrom>
						<addrTo>P:80004293</addrTo>
						<tree>FS_InvalidSignal.c \885--885</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004294</addrFrom>
						<addrTo>P:80004297</addrTo>
						<tree>FS_InvalidSignal.c \886--887</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>not taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>1</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800042CE</addrFrom>
						<addrTo>P:800042DF</addrTo>
						<tree>FS_InvalidSignal.c \888--888</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>18</bytesok>
					</line>
					<line>
						<addrFrom>P:80004298</addrFrom>
						<addrTo>P:800042A9</addrTo>
						<tree>FS_InvalidSignal.c \889--889</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">44.444%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>3</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>8</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \890--890</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">11.111%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<bytes>18</bytes>
						<bytesok>2</bytesok>
					</line>
					<line>
						<addrFrom>P:800042CA</addrFrom>
						<addrTo>P:800042CD</addrTo>
						<tree>FS_InvalidSignal.c \891--891</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:800042E0</addrFrom>
						<addrTo>P:800042E3</addrTo>
						<tree>FS_InvalidSignal.c \892--897</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:800042E4</addrFrom>
						<addrTo>P:800042E9</addrTo>
						<tree>FS_InvalidSignal.c \898--898</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>6</bytesok>
					</line>
					<line>
						<addrFrom>P:800042F0</addrFrom>
						<addrTo>P:800042F3</addrTo>
						<tree>FS_InvalidSignal.c \899--901</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>not taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>1</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000430C</addrFrom>
						<addrTo>P:80004319</addrTo>
						<tree>FS_InvalidSignal.c \902--902</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>14</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \903--904</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">50.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<bytes>8</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000431A</addrFrom>
						<addrTo>P:80004325</addrTo>
						<tree>FS_InvalidSignal.c \905--905</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>12</bytesok>
					</line>
					<line>
						<addrFrom>P:80004190</addrFrom>
						<addrTo>P:80004193</addrTo>
						<tree>FS_InvalidSignal.c \963--966</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004332</addrFrom>
						<addrTo>P:80004335</addrTo>
						<tree>FS_InvalidSignal.c \1383--1386</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004336</addrFrom>
						<addrTo>P:80004347</addrTo>
						<tree>FS_InvalidSignal.c \1387--1387</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">22.222%</exec>
						<branches>16.666%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>18</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000434E</addrFrom>
						<addrTo>P:80004351</addrTo>
						<tree>FS_InvalidSignal.c \1388--1389</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004352</addrFrom>
						<addrTo>P:80004355</addrTo>
						<tree>FS_InvalidSignal.c \1390--1390</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004356</addrFrom>
						<addrTo>P:80004359</addrTo>
						<tree>FS_InvalidSignal.c \1391--1391</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>not taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>1</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000435A</addrFrom>
						<addrTo>P:80004367</addrTo>
						<tree>FS_InvalidSignal.c \1392--1392</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>14</bytesok>
					</line>
					<line>
						<addrFrom>P:80004368</addrFrom>
						<addrTo>P:80004377</addrTo>
						<tree>FS_InvalidSignal.c \1393--1393</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>16</bytesok>
					</line>
					<line>
						<addrFrom>P:8000435A</addrFrom>
						<addrTo>P:80004367</addrTo>
						<tree>FS_InvalidSignal.c \1394--1395</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>14</bytesok>
					</line>
					<line>
						<addrFrom>P:80004378</addrFrom>
						<addrTo>P:80004383</addrTo>
						<tree>FS_InvalidSignal.c \1396--1397</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>12</bytesok>
					</line>
					<line>
						<addrFrom>P:80004384</addrFrom>
						<addrTo>P:80004387</addrTo>
						<tree>FS_InvalidSignal.c \1398--1398</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1399--1400</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>20</bytes>
						<bytesok>20</bytesok>
					</line>
					<line>
						<addrFrom>P:80004392</addrFrom>
						<addrTo>P:80004395</addrTo>
						<tree>FS_InvalidSignal.c \1401--1404</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>not taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>1</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1405--1405</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>10</bytesok>
					</line>
					<line>
						<addrFrom>P:8000439E</addrFrom>
						<addrTo>P:800043A5</addrTo>
						<tree>FS_InvalidSignal.c \1406--1406</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>8</bytesok>
					</line>
					<line>
						<addrFrom>P:80004396</addrFrom>
						<addrTo>P:8000439D</addrTo>
						<tree>FS_InvalidSignal.c \1407--1407</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">50.000%</exec>
						<branches>25.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>8</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1408--1408</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>16</bytesok>
					</line>
					<line>
						<addrFrom>P:800043B8</addrFrom>
						<addrTo>P:800043BB</addrTo>
						<tree>FS_InvalidSignal.c \1409--1415</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:800043BC</addrFrom>
						<addrTo>P:800043CD</addrTo>
						<tree>FS_InvalidSignal.c \1416--1416</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">22.222%</exec>
						<branches>16.666%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>18</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:800043D0</addrFrom>
						<addrTo>P:800043D3</addrTo>
						<tree>FS_InvalidSignal.c \1417--1418</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:800043D4</addrFrom>
						<addrTo>P:800043D7</addrTo>
						<tree>FS_InvalidSignal.c \1419--1419</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>not taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>1</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800043D8</addrFrom>
						<addrTo>P:800043DB</addrTo>
						<tree>FS_InvalidSignal.c \1420--1420</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:800043E2</addrFrom>
						<addrTo>P:800043E5</addrTo>
						<tree>FS_InvalidSignal.c \1421--1421</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1422--1423</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>18</bytesok>
					</line>
					<line>
						<addrFrom>P:800043F2</addrFrom>
						<addrTo>P:800043FB</addrTo>
						<tree>FS_InvalidSignal.c \1424--1425</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>10</bytesok>
					</line>
					<line>
						<addrFrom>P:800043FC</addrFrom>
						<addrTo>P:80004409</addrTo>
						<tree>FS_InvalidSignal.c \1426--1426</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>14</bytesok>
					</line>
					<line>
						<addrFrom>P:800043F2</addrFrom>
						<addrTo>P:800043FB</addrTo>
						<tree>FS_InvalidSignal.c \1427--1428</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>10</bytesok>
					</line>
					<line>
						<addrFrom>P:8000412A</addrFrom>
						<addrTo>P:8000412B</addrTo>
						<tree>FS_InvalidSignal.c \1483--1484</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>2</bytesok>
					</line>
					<line>
						<addrFrom>P:8000412C</addrFrom>
						<addrTo>P:8000412F</addrTo>
						<tree>FS_InvalidSignal.c \1485--1489</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004188</addrFrom>
						<addrTo>P:8000418B</addrTo>
						<tree>FS_InvalidSignal.c \1490--1498</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000418C</addrFrom>
						<addrTo>P:8000418F</addrTo>
						<tree>FS_InvalidSignal.c \1499--1499</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004212</addrFrom>
						<addrTo>P:80004215</addrTo>
						<tree>FS_InvalidSignal.c \1500--1502</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004326</addrFrom>
						<addrTo>P:80004329</addrTo>
						<tree>FS_InvalidSignal.c \1503--1506</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000432A</addrFrom>
						<addrTo>P:8000432D</addrTo>
						<tree>FS_InvalidSignal.c \1507--1507</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000432E</addrFrom>
						<addrTo>P:80004331</addrTo>
						<tree>FS_InvalidSignal.c \1508--1520</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000440A</addrFrom>
						<addrTo>P:8000440D</addrTo>
						<tree>FS_InvalidSignal.c \1521--1525</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:8000440E</addrFrom>
						<addrTo>P:80004411</addrTo>
						<tree>FS_InvalidSignal.c \1526--1528</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>4</bytesok>
					</line>
					<line>
						<addrFrom>P:80004412</addrFrom>
						<addrTo>P:8000441D</addrTo>
						<tree>FS_InvalidSignal.c \1529--1533</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>taken</cov>
						<exec metric="object">83.333%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>10</bytesok>
					</line>
					<line>
						<addrFrom>P:8000441E</addrFrom>
						<addrTo>P:8000442B</addrTo>
						<tree>FS_InvalidSignal.c \1534--1534</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000442C</addrFrom>
						<addrTo>P:8000442D</addrTo>
						<tree>FS_InvalidSignal.c \1535--1535</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000442E</addrFrom>
						<addrTo>P:8000443B</addrTo>
						<tree>FS_InvalidSignal.c \1536--1536</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000443C</addrFrom>
						<addrTo>P:8000443D</addrTo>
						<tree>FS_InvalidSignal.c \1537--1537</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000443E</addrFrom>
						<addrTo>P:8000444B</addrTo>
						<tree>FS_InvalidSignal.c \1538--1538</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1539--1539</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">0.000%</exec>
						<branches>25.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000444E</addrFrom>
						<addrTo>P:80004451</addrTo>
						<tree>FS_InvalidSignal.c \1540--1540</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004456</addrFrom>
						<addrTo>P:80004457</addrTo>
						<tree>FS_InvalidSignal.c \1541--1542</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004458</addrFrom>
						<addrTo>P:80004465</addrTo>
						<tree>FS_InvalidSignal.c \1543--1543</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1544--1544</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">0.000%</exec>
						<branches>25.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004468</addrFrom>
						<addrTo>P:8000446B</addrTo>
						<tree>FS_InvalidSignal.c \1545--1545</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1546--1552</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">0.000%</exec>
						<branches>25.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004472</addrFrom>
						<addrTo>P:80004475</addrTo>
						<tree>FS_InvalidSignal.c \1553--1553</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1554--1554</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">0.000%</exec>
						<branches>25.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000447C</addrFrom>
						<addrTo>P:8000447F</addrTo>
						<tree>FS_InvalidSignal.c \1555--1555</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1556--1565</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">25.000%</exec>
						<branches>25.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>8</bytes>
						<bytesok>2</bytesok>
					</line>
					<line>
						<addrFrom>P:80004488</addrFrom>
						<addrTo>P:8000448B</addrTo>
						<tree>FS_InvalidSignal.c \1566--1566</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1567--1567</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>partial</cov>
						<exec metric="object">0.000%</exec>
						<branches>25.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000449A</addrFrom>
						<addrTo>P:8000449B</addrTo>
						<tree>FS_InvalidSignal.c \1568--1569</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000449C</addrFrom>
						<addrTo>P:800044A9</addrTo>
						<tree>FS_InvalidSignal.c \1570--1570</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800044AA</addrFrom>
						<addrTo>P:800044AB</addrTo>
						<tree>FS_InvalidSignal.c \1571--1571</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800044AC</addrFrom>
						<addrTo>P:800044B9</addrTo>
						<tree>FS_InvalidSignal.c \1572--1572</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800044BA</addrFrom>
						<addrTo>P:800044BB</addrTo>
						<tree>FS_InvalidSignal.c \1573--1573</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800044BC</addrFrom>
						<addrTo>P:800044C9</addrTo>
						<tree>FS_InvalidSignal.c \1574--1574</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800044CA</addrFrom>
						<addrTo>P:800044CB</addrTo>
						<tree>FS_InvalidSignal.c \1575--1575</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>taken</cov>
						<exec metric="object">0.000%</exec>
						<branches>50.000%</branches>
						<ok>0</ok>
						<taken>1</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800044CC</addrFrom>
						<addrTo>P:800044D9</addrTo>
						<tree>FS_InvalidSignal.c \1576--1576</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800044DA</addrFrom>
						<addrTo>P:800044DB</addrTo>
						<tree>FS_InvalidSignal.c \1577--1606</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>2</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>SWC_Failsafe.h \1--708</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\SWC_Failsafe.h</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>44</bytes>
						<bytesok>44</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>SWC_Failsafe.h \709--724</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\SWC_Failsafe.h</srcpath>
						<cov>ok</cov>
						<exec metric="object">100.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>40</bytes>
						<bytesok>40</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>SWC_Failsafe.h \725--729</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\SWC_Failsafe.h</srcpath>
						<cov>partial</cov>
						<exec metric="object">56.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>50</bytes>
						<bytesok>28</bytesok>
					</line>
					<total>
						<cov>partial</cov>
						<exec metric="object">61.176%</exec>
						<branches>46.153%</branches>
						<ok>0</ok>
						<taken>27</taken>
						<nottaken>21</nottaken>
						<never>4</never>
						<bytes>1020</bytes>
						<bytesok>624</bytesok>
					</total>
				</function>
				<total>
					<cov>partial</cov>
					<exec metric="object">58.139%</exec>
					<branches>38.709%</branches>
					<ok>0</ok>
					<taken>27</taken>
					<nottaken>21</nottaken>
					<never>14</never>
					<bytes>946</bytes>
					<bytesok>550</bytesok>
				</total>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_SWFailure</tree>
				<cov>partial</cov>
				<exec metric="object">36.224%</exec>
				<branches>1.215%</branches>
				<ok>0</ok>
				<taken>7</taken>
				<nottaken>1</nottaken>
				<never>321</never>
				<bytes>392</bytes>
				<bytesok>142</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>5</never>
				<bytes>806</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:80005B2A</addrFrom>
				<addrTo>P:80005CBB</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc1</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>402</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:80005CBC</addrFrom>
				<addrTo>P:80005E4D</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc2</tree>
				<cov>partial</cov>
				<exec metric="object">79.104%</exec>
				<branches>75.000%</branches>
				<ok>2</ok>
				<taken>1</taken>
				<nottaken>1</nottaken>
				<never>0</never>
				<bytes>402</bytes>
				<bytesok>318</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc3</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc4</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_main</tree>
				<cov>partial</cov>
				<exec metric="object">24.691%</exec>
				<branches>25.000%</branches>
				<ok>1</ok>
				<taken>1</taken>
				<nottaken>1</nottaken>
				<never>5</never>
				<bytes>324</bytes>
				<bytesok>80</bytesok>
			</module>
			<module>
				<addrFrom>P:80006180</addrFrom>
				<addrTo>P:80006315</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc5</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:80006456</addrFrom>
				<addrTo>P:80006485</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_stubs</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>2</never>
				<bytes>48</bytes>
				<bytesok>0</bytesok>
			</module>
			<total>
				<cov>partial</cov>
				<exec metric="object">43.492%</exec>
				<branches>15.740%</branches>
				<ok>30</ok>
				<taken>242</taken>
				<nottaken>134</nottaken>
				<never>979</never>
				<bytes>14890</bytes>
				<bytesok>6476</bytesok>
			</total>
		</COVerage.EXPORT.ListLine>
	</coverage>
	<marker>
		<BookMark.EXPORT ts="1623300793" t32ver="R.2020.09.000128638" t32pv="TRICORE" cpu="TC397XE">
		</BookMark.EXPORT>
	</marker>
	<listing>
		<List.EXPORT ts="1623300793" t32ver="R.2020.09.000128638" t32pv="TRICORE" order="source">
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>713</line><src></src></hll>
				<hll><line>714</line><src>static void update_sas(void)</src></hll>
				<hll><line>715</line><src>{</src></hll>
				<hll><cov>ok</cov><line>716</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>ok</cov><addr>P:80004216</addr><code>093C006D</code><mnemonic>call      0x8000548E</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>717</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<asm><cov>ok</cov><addr>P:8000421A</addr><code>0482</code><mnemonic>mov16     d4,#0x0</mnemonic><comment>meet_precond,#0</comment></asm>
				<asm><cov>ok</cov><addr>P:8000421C</addr><code>FB74FF61</code><mnemonic>fcall     0x80003904</mnemonic><comment>.cocofun_31</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>718</line><src></src></hll>
				<hll><cov>ok</cov><line>719</line><src>    sint16 SAS_AnglVal = ref_sig.SAS_AnglVal;</src></hll>
				<asm><cov>ok</cov><addr>P:80004222</addr><code>08AEF209</code><mnemonic>ld.h      d2,[a15]0x2E</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>720</line><src>    uint8 SAS_SpdVal = ref_sig.SAS_SpdVal;</src></hll>
				<asm><cov>ok</cov><addr>P:8000422A</addr><code>0870F309</code><mnemonic>ld.bu     d3,[a15]0x30</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>721</line><src></src></hll>
				<hll><did>not</did><dec>taken</dec><cov>taken</cov><line>722</line><src>    if (!is_timeout(CHASSIS_0, SAS_01_10ms_POS)) {</src></hll>
				<asm><cov>not taken</cov><addr>P:8000422E</addr><code>802581EF</code><mnemonic>jnz.t     d1,#0x18,0x80004278</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>723</line><src>        update_info(&amp;sas[SAS_C181486_0], meet_precond,</src></hll>
				<asm><cov>ok</cov><addr>P:80004268</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000426C</addr><code>306644D9</code><mnemonic>lea       a4,[a4]0x4E6</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>partial</cov><line>724</line><src>                    is_e2e_err(CHASSIS_0, SAS_01_10ms_POS) || SAS_AnglVal == 0x7FFF || SAS_SpdVal == 0xFF,</src></hll>
				<asm><cov>ok</cov><addr>P:80004232</addr><code>FBCBFF61</code><mnemonic>fcall     0x800039C8</mnemonic><comment>.cocofun_47</comment></asm>
				<asm><cov>not taken</cov><addr>P:80004236</addr><code>16F6</code><mnemonic>jnz16     d1,0x80004242</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004238</addr><code>F7FFF03B</code><mnemonic>mov       d15,#0x7FFF</mnemonic></asm>
				<asm><cov>not taken</cov><addr>P:8000423C</addr><code>233E</code><mnemonic>jeq16     d15,d2,0x80004242</mnemonic><comment>d15,SAS_AnglVal,0x80004242</comment></asm>
				<asm><cov>ok</cov><addr>P:8000423E</addr><code>FFDA</code><mnemonic>mov16     d15,#0xFF</mnemonic></asm>
				<asm><cov>taken</cov><addr>P:80004240</addr><code>327E</code><mnemonic>jne16     d15,d3,0x80004244</mnemonic><comment>d15,SAS_SpdVal,0x80004244</comment></asm>
				<asm><cov>never</cov><addr>P:80004242</addr><code>1582</code><mnemonic>mov16     d5,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>ok</cov><line>725</line><src>                    is_updated(CHASSIS_0, SAS_01_10ms_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, SAS_01_10ms_POS) &amp;&amp; SAS_AnglVal != 0x7FFF &amp;&amp; SAS_SpdVal != 0xFF,</src></hll>
				<asm><cov>ok</cov><addr>P:8000424C</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>taken</cov><addr>P:80004250</addr><code>1A76</code><mnemonic>jz16      d1,0x80004264</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004256</addr><code>07F6</code><mnemonic>jnz16     d0,0x80004264</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004258</addr><code>F7FFF03B</code><mnemonic>mov       d15,#0x7FFF</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000425C</addr><code>243E</code><mnemonic>jeq16     d15,d2,0x80004264</mnemonic><comment>d15,SAS_AnglVal,0x80004264</comment></asm>
				<asm><cov>never</cov><addr>P:8000425E</addr><code>F20FF38B</code><mnemonic>eq        d15,d3,#0xFF</mnemonic><comment>d15,SAS_SpdVal,#255</comment></asm>
				<asm><cov>never</cov><addr>P:80004262</addr><code>16EA</code><mnemonic>cmovn16   d6,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>ok</cov><line>726</line><src>                    MS2TICK(100), VALID_CNT_THR);</src></hll>
				<asm><cov>ok</cov><addr>P:80004264</addr><code>02DA</code><mnemonic>mov16     d15,#0x2</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004266</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004270</addr><code>7000A03B</code><mnemonic>mov       d7,#0x0A</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004274</addr><code>042A006D</code><mnemonic>call      0x80004AC8</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>762</line><src></src></hll>
				<hll><line>763</line><src>static void update_tcu(void)</src></hll>
				<hll><line>764</line><src>{</src></hll>
				<hll><cov>ok</cov><line>765</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>ok</cov><addr>P:80004130</addr><code>09AF006D</code><mnemonic>call      0x8000548E</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>766</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<asm><cov>ok</cov><addr>P:80004134</addr><code>0482</code><mnemonic>mov16     d4,#0x0</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004136</addr><code>4802</code><mnemonic>mov16     d8,d4</mnemonic><comment>d8,meet_precond</comment></asm>
				<asm><cov>ok</cov><addr>P:80004138</addr><code>FBE6FF61</code><mnemonic>fcall     0x80003904</mnemonic><comment>.cocofun_31</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>767</line><src></src></hll>
				<hll><cov>ok</cov><line>768</line><src>    uint8 TCU_GearSlctDis = ref_sig.TCU_GearSlctDis;</src></hll>
				<asm><cov>ok</cov><addr>P:8000413C</addr><code>FC14FF61</code><mnemonic>fcall     0x80003964</mnemonic><comment>.cocofun_37</comment></asm>
				<asm><cov>ok</cov><addr>P:80004140</addr><code>8008</code><mnemonic>ld16.bu   d0,[a15]0x8</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>769</line><src></src></hll>
				<hll><did>not</did><dec>taken</dec><cov>taken</cov><line>770</line><src>    if (!is_timeout(CHASSIS_0, TCU_01_10ms_POS)) {</src></hll>
				<asm><cov>not taken</cov><addr>P:8000414C</addr><code>801EAF6F</code><mnemonic>jnz.t     d15,#0x0A,0x80004188</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>771</line><src>        update_info(&amp;tcu[TCU_C164686_0], meet_precond,</src></hll>
				<asm><cov>ok</cov><addr>P:80004178</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000417C</addr><code>305A44D9</code><mnemonic>lea       a4,[a4]0x4DA</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>ok</cov><line>772</line><src>                    is_e2e_err(CHASSIS_0, TCU_01_10ms_POS) || TCU_GearSlctDis == 0xF,</src></hll>
				<asm><cov>ok</cov><addr>P:80004150</addr><code>FC0FFF61</code><mnemonic>fcall     0x8000396E</mnemonic><comment>.cocofun_38</comment></asm>
				<asm><cov>not taken</cov><addr>P:80004156</addr><code>03EE</code><mnemonic>jnz16     d15,0x8000415C</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004158</addr><code>0FDA</code><mnemonic>mov16     d15,#0x0F</mnemonic></asm>
				<asm><cov>taken</cov><addr>P:8000415A</addr><code>027E</code><mnemonic>jne16     d15,d0,0x8000415E</mnemonic><comment>d15,TCU_GearSlctDis,0x8000415E</comment></asm>
				<asm><cov>never</cov><addr>P:8000415C</addr><code>1582</code><mnemonic>mov16     d5,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>ok</cov><line>773</line><src>                    is_updated(CHASSIS_0, TCU_01_10ms_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, TCU_01_10ms_POS) &amp;&amp; TCU_GearSlctDis != 0xF,</src></hll>
				<asm><cov>ok</cov><addr>P:8000415E</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004160</addr><code>FC41FF61</code><mnemonic>fcall     0x800039E2</mnemonic><comment>.cocofun_49</comment></asm>
				<asm><cov>ok</cov><addr>P:80004164</addr><code>1F26</code><mnemonic>and16     d15,d1</mnemonic></asm>
				<asm><cov>taken</cov><addr>P:80004166</addr><code>076E</code><mnemonic>jz16      d15,0x80004174</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000416C</addr><code>14F6</code><mnemonic>jnz16     d1,0x80004174</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000416E</addr><code>F200F08B</code><mnemonic>eq        d15,d0,#0x0F</mnemonic><comment>d15,TCU_GearSlctDis,#15</comment></asm>
				<asm><cov>never</cov><addr>P:80004172</addr><code>16EA</code><mnemonic>cmovn16   d6,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>ok</cov><line>774</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<asm><cov>ok</cov><addr>P:80004174</addr><code>02DA</code><mnemonic>mov16     d15,#0x2</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004176</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004180</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004184</addr><code>04A2006D</code><mnemonic>call      0x80004AC8</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>775</line><src>    }</src></hll>
				<hll><line>776</line><src>}</src></hll>
				<hll><line>777</line><src></src></hll>
				<hll><line>778</line><src>#elif VEH_TYPE == EV</src></hll>
				<hll><line>779</line><src>static void update_vcu(void)</src></hll>
				<hll><line>780</line><src>{</src></hll>
				<hll><line>781</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>782</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>783</line><src></src></hll>
				<hll><line>784</line><src>    uint8 VCU_GearPosSta = ref_sig.VCU_GearPosSta;</src></hll>
				<hll><line>785</line><src>    uint8 VCU_AccPedDepVal = ref_sig.VCU_AccPedDepVal;</src></hll>
				<hll><line>786</line><src></src></hll>
				<hll><line>787</line><src>    if (!is_timeout(CHASSIS_0, VCU_01_10ms_POS)) {</src></hll>
				<hll><line>788</line><src>        update_info(&amp;vcu[VCU_C161C86_0], meet_precond,</src></hll>
				<hll><line>789</line><src>                    is_e2e_err(CHASSIS_0, VCU_01_10ms_POS) || VCU_GearPosSta == 0xF || VCU_AccPedDepVal == 0xFF,</src></hll>
				<hll><line>790</line><src>                    is_updated(CHASSIS_0, VCU_01_10ms_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, VCU_01_10ms_POS) &amp;&amp; VCU_GearPosSta != 0xF &amp;&amp; VCU_AccPedDepVal != 0xFF,</src></hll>
				<hll><line>791</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>792</line><src>    }</src></hll>
				<hll><line>793</line><src></src></hll>
				<hll><line>794</line><src>    if (!is_timeout(CHASSIS_0, VCU_03_100ms_POS)) {</src></hll>
				<hll><line>795</line><src>        update_info(&amp;vcu[VCU_C161C86_1], meet_precond,</src></hll>
				<hll><line>796</line><src>                    is_e2e_err(CHASSIS_0, VCU_03_100ms_POS),</src></hll>
				<hll><line>797</line><src>                    is_updated(CHASSIS_0, VCU_03_100ms_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, VCU_03_100ms_POS),</src></hll>
				<hll><line>798</line><src>                    MS2TICK(2000), VALID_CNT_THR);</src></hll>
				<hll><line>799</line><src>    }</src></hll>
				<hll><line>800</line><src>}</src></hll>
				<hll><line>801</line><src></src></hll>
				<hll><line>802</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>803</line><src>static void update_ems(void)</src></hll>
				<hll><line>804</line><src>{</src></hll>
				<hll><line>805</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>806</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>807</line><src></src></hll>
				<hll><line>808</line><src>    uint16 HEV_AccelPdlVal = ref_sig.HEV_AccelPdlVal;</src></hll>
				<hll><line>809</line><src>    uint8 HEV_EngSpdErrSta = ref_sig.HEV_EngSpdErrSta;</src></hll>
				<hll><line>810</line><src></src></hll>
				<hll><line>811</line><src>    if (!is_timeout(CHASSIS_0, EMS_07_POS) &amp;&amp; !is_timeout(CHASSIS_0, EMS_11_POS)) {</src></hll>
				<hll><line>812</line><src>        update_info(&amp;ems[EMS_C161386_0], meet_precond,</src></hll>
				<hll><line>813</line><src>                    is_e2e_err(CHASSIS_0, EMS_07_POS) || is_e2e_err(CHASSIS_0, EMS_11_POS) || HEV_AccelPdlVal == 0xFF || HEV_EngSpdErrSta == 0x1,</src></hll>
				<hll><line>814</line><src>                    is_updated(CHASSIS_0, EMS_07_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, EMS_07_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, EMS_11_POS) &amp;&amp; HEV_AccelPdlVal != 0xFF &amp;&amp; HEV_EngSpdErrSta == 0x0,</src></hll>
				<hll><line>815</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>816</line><src>    }</src></hll>
				<hll><line>817</line><src>}</src></hll>
				<hll><line>818</line><src></src></hll>
				<hll><line>819</line><src>static void update_hcu(void)</src></hll>
				<hll><line>820</line><src>{</src></hll>
				<hll><line>821</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>822</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>823</line><src></src></hll>
				<hll><line>824</line><src>    uint8 HCU_HevRdySta = ref_sig.HCU_HevRdySta;</src></hll>
				<hll><line>825</line><src></src></hll>
				<hll><line>826</line><src>    if (!is_timeout(CHASSIS_0, HCU_03_POS)) {</src></hll>
				<hll><line>827</line><src>        update_info(&amp;hcu[HCU_C161C86_0], meet_precond,</src></hll>
				<hll><line>828</line><src>                    is_e2e_err(CHASSIS_0, HCU_03_POS) || HCU_HevRdySta == 0x3,</src></hll>
				<hll><line>829</line><src>                    is_updated(CHASSIS_0, HCU_03_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, HCU_03_POS) &amp;&amp; HCU_HevRdySta != 0x3,</src></hll>
				<hll><line>830</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>831</line><src>    }</src></hll>
				<hll><line>832</line><src></src></hll>
				<hll><line>833</line><src>    if (!is_timeout(CHASSIS_0, HCU_05_POS)) {</src></hll>
				<hll><line>834</line><src>        update_info(&amp;hcu[HCU_C161C86_1], meet_precond,</src></hll>
				<hll><line>835</line><src>                    is_e2e_err(CHASSIS_0, HCU_05_POS),</src></hll>
				<hll><line>836</line><src>                    is_updated(CHASSIS_0, HCU_05_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, HCU_05_POS),</src></hll>
				<hll><line>837</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>838</line><src>    }</src></hll>
				<hll><line>839</line><src>}</src></hll>
				<hll><line>840</line><src></src></hll>
				<hll><line>841</line><src>static void update_htcu(void)</src></hll>
				<hll><line>842</line><src>{</src></hll>
				<hll><line>843</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>844</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>845</line><src></src></hll>
				<hll><line>846</line><src>    uint8 HTCU_GearSlctrDis = ref_sig.HTCU_GearSlctrDis;</src></hll>
				<hll><line>847</line><src></src></hll>
				<hll><line>848</line><src>    if (!is_timeout(CHASSIS_0, HTCU_04_POS)) {</src></hll>
				<hll><line>849</line><src>        update_info(&amp;htcu[HTCU_C164686_0], meet_precond,</src></hll>
				<hll><line>850</line><src>                    is_e2e_err(CHASSIS_0, HTCU_04_POS) || HTCU_GearSlctrDis == 0xF,</src></hll>
				<hll><line>851</line><src>                    is_updated(CHASSIS_0, HTCU_04_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, HTCU_04_POS) &amp;&amp; HTCU_GearSlctrDis != 0xF,</src></hll>
				<hll><line>852</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>853</line><src>    }</src></hll>
				<hll><line>854</line><src>}</src></hll>
				<hll><line>855</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><line>856</line><src></src></hll>
				<hll><line>857</line><src>static void update_icu(void)</src></hll>
				<hll><line>858</line><src>{</src></hll>
				<hll><cov>ok</cov><line>859</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>ok</cov><addr>P:80004194</addr><code>097D006D</code><mnemonic>call      0x8000548E</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>860</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<asm><cov>ok</cov><addr>P:80004198</addr><code>0482</code><mnemonic>mov16     d4,#0x0</mnemonic><comment>meet_precond,#0</comment></asm>
				<asm><cov>ok</cov><addr>P:8000419A</addr><code>FBB5FF61</code><mnemonic>fcall     0x80003904</mnemonic><comment>.cocofun_31</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>861</line><src></src></hll>
				<hll><cov>ok</cov><line>862</line><src>    uint8 Lamp_RrTrnSigLmpLftOpnSta = ref_sig.Lamp_RrTrnSigLmpLftOpnSta;</src></hll>
				<asm><cov>ok</cov><addr>P:8000419E</addr><code>087BFF09</code><mnemonic>ld.bu     d15,[a15]0x3B</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>863</line><src>    uint8 Lamp_RrTrnSigLmpRtOpnSta = ref_sig.Lamp_RrTrnSigLmpRtOpnSta;</src></hll>
				<asm><cov>ok</cov><addr>P:800041A4</addr><code>087CF009</code><mnemonic>ld.bu     d0,[a15]0x3C</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>864</line><src>    uint8 Lamp_FrTrnSigLmpLftOpnSta = ref_sig.Lamp_FrTrnSigLmpLftOpnSta;</src></hll>
				<asm><cov>ok</cov><addr>P:800041AC</addr><code>087DF109</code><mnemonic>ld.bu     d1,[a15]0x3D</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>865</line><src>    uint8 Lamp_FrTrnSigLmpRtOpnSta = ref_sig.Lamp_FrTrnSigLmpRtOpnSta;</src></hll>
				<asm><cov>ok</cov><addr>P:800041B0</addr><code>087EF209</code><mnemonic>ld.bu     d2,[a15]0x3E</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>866</line><src></src></hll>
				<hll><did>not</did><dec>taken</dec><cov>taken</cov><line>867</line><src>    if (!is_timeout(CHASSIS_0, ICU_06_200ms_POS)) {</src></hll>
				<asm><cov>not taken</cov><addr>P:800041B4</addr><code>802845EF</code><mnemonic>jnz.t     d5,#0x14,0x80004204</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>868</line><src>        update_info(&amp;icu[ICU_C183E86_0], meet_precond,</src></hll>
				<asm><cov>ok</cov><addr>P:800041F4</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800041F8</addr><code>306044D9</code><mnemonic>lea       a4,[a4]0x4E0</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>partial</cov><line>869</line><src>                    Lamp_RrTrnSigLmpLftOpnSta == 1 || Lamp_RrTrnSigLmpLftOpnSta == 3 || Lamp_RrTrnSigLmpRtOpnSta == 1 || Lamp_RrTrnSigLmpRtOpnSta == 3 || Lamp_FrTrnSigLmpLftOpnSta == 1 || Lamp_FrTrnSigLmpLftOpnSta == 3 || Lamp_FrTrnSigLmpRtOpnSta == 1 || Lamp_FrTrnSigLmpRtOpnSta == 3,</src></hll>
				<asm><cov>ok</cov><addr>P:800041B8</addr><code>0582</code><mnemonic>mov16     d5,#0x0</mnemonic></asm>
				<asm><cov>not taken</cov><addr>P:800041BA</addr><code>1E1E</code><mnemonic>jeq16     d15,#0x1,0x800041D6</mnemonic><comment>Lamp_RrTrnSigLmpLftOpnSta,#1,0x800041D6</comment></asm>
				<asm><cov>not taken</cov><addr>P:800041BC</addr><code>3D1E</code><mnemonic>jeq16     d15,#0x3,0x800041D6</mnemonic><comment>Lamp_RrTrnSigLmpLftOpnSta,#3,0x800041D6</comment></asm>
				<asm><cov>not taken</cov><addr>P:800041BE</addr><code>000C10DF</code><mnemonic>jeq       d0,#0x1,0x800041D6</mnemonic><comment>Lamp_RrTrnSigLmpRtOpnSta,#1,0x800041D6</comment></asm>
				<asm><cov>not taken</cov><addr>P:800041C2</addr><code>000A30DF</code><mnemonic>jeq       d0,#0x3,0x800041D6</mnemonic><comment>Lamp_RrTrnSigLmpRtOpnSta,#3,0x800041D6</comment></asm>
				<asm><cov>not taken</cov><addr>P:800041C6</addr><code>000811DF</code><mnemonic>jeq       d1,#0x1,0x800041D6</mnemonic><comment>Lamp_FrTrnSigLmpLftOpnSta,#1,0x800041D6</comment></asm>
				<asm><cov>not taken</cov><addr>P:800041CA</addr><code>000631DF</code><mnemonic>jeq       d1,#0x3,0x800041D6</mnemonic><comment>Lamp_FrTrnSigLmpLftOpnSta,#3,0x800041D6</comment></asm>
				<asm><cov>not taken</cov><addr>P:800041CE</addr><code>000412DF</code><mnemonic>jeq       d2,#0x1,0x800041D6</mnemonic><comment>Lamp_FrTrnSigLmpRtOpnSta,#1,0x800041D6</comment></asm>
				<asm><cov>taken</cov><addr>P:800041D2</addr><code>800332DF</code><mnemonic>jne       d2,#0x3,0x800041D8</mnemonic><comment>Lamp_FrTrnSigLmpRtOpnSta,#3,0x800041D8</comment></asm>
				<asm><cov>never</cov><addr>P:800041D6</addr><code>1582</code><mnemonic>mov16     d5,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>ok</cov><line>870</line><src>                    is_updated(CHASSIS_0, ICU_06_200ms_POS) &amp;&amp; Lamp_RrTrnSigLmpLftOpnSta == 0 &amp;&amp; Lamp_RrTrnSigLmpRtOpnSta == 0 &amp;&amp; Lamp_FrTrnSigLmpLftOpnSta == 0 &amp;&amp; Lamp_FrTrnSigLmpRtOpnSta == 0,</src></hll>
				<asm><cov>ok</cov><addr>P:800041E0</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>taken</cov><addr>P:800041E4</addr><code>3676</code><mnemonic>jz16      d3,0x800041F0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800041E6</addr><code>05EE</code><mnemonic>jnz16     d15,0x800041F0</mnemonic><comment>Lamp_RrTrnSigLmpLftOpnSta,0x800041F0</comment></asm>
				<asm><cov>never</cov><addr>P:800041E8</addr><code>04F6</code><mnemonic>jnz16     d0,0x800041F0</mnemonic><comment>Lamp_RrTrnSigLmpRtOpnSta,0x800041F0</comment></asm>
				<asm><cov>never</cov><addr>P:800041EA</addr><code>13F6</code><mnemonic>jnz16     d1,0x800041F0</mnemonic><comment>Lamp_FrTrnSigLmpLftOpnSta,0x800041F0</comment></asm>
				<asm><cov>never</cov><addr>P:800041EC</addr><code>628016AB</code><mnemonic>sel       d6,d2,d6,#0x1</mnemonic><comment>d6,Lamp_FrTrnSigLmpRtOpnSta,d6,#1</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>ok</cov><line>871</line><src>                    MS2TICK(2000), 1);</src></hll>
				<asm><cov>ok</cov><addr>P:800041F0</addr><code>01DA</code><mnemonic>mov16     d15,#0x1</mnemonic><comment>Lamp_RrTrnSigLmpLftOpnSta,#1</comment></asm>
				<asm><cov>ok</cov><addr>P:800041F2</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic><comment>[a10],Lamp_RrTrnSigLmpLftOpnSta</comment></asm>
				<asm><cov>ok</cov><addr>P:800041FC</addr><code>700C803B</code><mnemonic>mov       d7,#0xC8</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004200</addr><code>0464006D</code><mnemonic>call      0x80004AC8</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>872</line><src>    }</src></hll>
				<hll><line>873</line><src></src></hll>
				<hll><cov>taken</cov><line>874</line><src>    if (!Get_HDA2_Option())</src></hll>
				<asm><cov>ok</cov><addr>P:80004204</addr><code>093B006D</code><mnemonic>call      0x8000547A</mnemonic><comment>Get_HDA2_Option</comment></asm>
				<asm><cov>taken</cov><addr>P:80004208</addr><code>25F6</code><mnemonic>jnz16     d2,0x80004212</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>875</line><src>        icu[ICU_C183E86_0].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000420A</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000420E</addr><code>306028E9</code><mnemonic>st.b      [a2]0x4E0,d8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004492</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>876</line><src>}</src></hll>
				<hll><line>877</line><src></src></hll>
				<hll><line>878</line><src>static void update_yrs(void)</src></hll>
				<hll><line>879</line><src>{</src></hll>
				<hll><cov>ok</cov><line>880</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>ok</cov><addr>P:80004278</addr><code>090B006D</code><mnemonic>call      0x8000548E</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>881</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<asm><cov>ok</cov><addr>P:8000427C</addr><code>0482</code><mnemonic>mov16     d4,#0x0</mnemonic><comment>meet_precond,#0</comment></asm>
				<asm><cov>ok</cov><addr>P:8000427E</addr><code>FB43FF61</code><mnemonic>fcall     0x80003904</mnemonic><comment>.cocofun_31</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>882</line><src></src></hll>
				<hll><cov>ok</cov><line>883</line><src>    uint16 YRS_YawRtVal = ref_sig.YRS_YawRtVal;</src></hll>
				<asm><cov>ok</cov><addr>P:80004282</addr><code>08F2F209</code><mnemonic>ld.hu     d2,[a15]0x32</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>884</line><src>    uint16 YRS_LatAccelVal = ref_sig.YRS_LatAccelVal;</src></hll>
				<asm><cov>ok</cov><addr>P:80004288</addr><code>08F6F309</code><mnemonic>ld.hu     d3,[a15]0x36</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>885</line><src>    uint16 YRS_LongAccelVal = ref_sig.YRS_LongAccelVal;</src></hll>
				<asm><cov>ok</cov><addr>P:80004290</addr><code>08F4F609</code><mnemonic>ld.hu     d6,[a15]0x34</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>886</line><src></src></hll>
				<hll><did>not</did><dec>taken</dec><cov>taken</cov><line>887</line><src>    if (!is_timeout(CHASSIS_0, YRS_01_10ms_POS)) {</src></hll>
				<asm><cov>not taken</cov><addr>P:80004294</addr><code>8026D1EF</code><mnemonic>jnz.t     d1,#0x1D,0x800042E0</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>888</line><src>        update_info(&amp;yrs[YRS_C184286_0], meet_precond,</src></hll>
				<asm><cov>ok</cov><addr>P:800042CE</addr><code>0ADA</code><mnemonic>mov16     d15,#0x0A</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042D0</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042D4</addr><code>7602</code><mnemonic>mov16     d6,d7</mnemonic><comment>YRS_LongAccelVal,d7</comment></asm>
				<asm><cov>ok</cov><addr>P:800042D6</addr><code>306C44D9</code><mnemonic>lea       a4,[a4]0x4EC</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042DA</addr><code>F702</code><mnemonic>mov16     d7,d15</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042DC</addr><code>03F6006D</code><mnemonic>call      0x80004AC8</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>partial</cov><line>889</line><src>                    is_e2e_err(CHASSIS_0, YRS_01_10ms_POS) || YRS_YawRtVal == 0xFFFF || YRS_LatAccelVal == 0xFFFF || YRS_LongAccelVal == 0xFFFF,</src></hll>
				<asm><cov>ok</cov><addr>P:80004298</addr><code>FB98FF61</code><mnemonic>fcall     0x800039C8</mnemonic><comment>.cocofun_47</comment></asm>
				<asm><cov>not taken</cov><addr>P:8000429C</addr><code>16F6</code><mnemonic>jnz16     d1,0x800042A8</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000429E</addr><code>FFFFF0BB</code><mnemonic>mov.u     d15,#0xFFFF</mnemonic></asm>
				<asm><cov>not taken</cov><addr>P:800042A2</addr><code>233E</code><mnemonic>jeq16     d15,d2,0x800042A8</mnemonic><comment>d15,YRS_YawRtVal,0x800042A8</comment></asm>
				<asm><cov>not taken</cov><addr>P:800042A4</addr><code>323E</code><mnemonic>jeq16     d15,d3,0x800042A8</mnemonic><comment>d15,YRS_LatAccelVal,0x800042A8</comment></asm>
				<asm><cov>taken</cov><addr>P:800042A6</addr><code>627E</code><mnemonic>jne16     d15,d6,0x800042AA</mnemonic><comment>d15,YRS_LongAccelVal,0x800042AA</comment></asm>
				<asm><cov>never</cov><addr>P:800042A8</addr><code>1582</code><mnemonic>mov16     d5,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>ok</cov><line>890</line><src>                    is_updated(CHASSIS_0, YRS_01_10ms_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, YRS_01_10ms_POS) &amp;&amp; YRS_YawRtVal != 0xFFFF &amp;&amp; YRS_LatAccelVal != 0xFFFF &amp;&amp; YRS_LongAccelVal != 0xFFFF,</src></hll>
				<asm><cov>ok</cov><addr>P:800042B2</addr><code>0782</code><mnemonic>mov16     d7,#0x0</mnemonic></asm>
				<asm><cov>taken</cov><addr>P:800042B6</addr><code>1A76</code><mnemonic>jz16      d1,0x800042CA</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800042BC</addr><code>07F6</code><mnemonic>jnz16     d0,0x800042CA</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800042BE</addr><code>FFFFF0BB</code><mnemonic>mov.u     d15,#0xFFFF</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800042C2</addr><code>243E</code><mnemonic>jeq16     d15,d2,0x800042CA</mnemonic><comment>d15,YRS_YawRtVal,0x800042CA</comment></asm>
				<asm><cov>never</cov><addr>P:800042C4</addr><code>333E</code><mnemonic>jeq16     d15,d3,0x800042CA</mnemonic><comment>d15,YRS_LatAccelVal,0x800042CA</comment></asm>
				<asm><cov>never</cov><addr>P:800042C6</addr><code>F63A</code><mnemonic>eq16      d15,d6,d15</mnemonic><comment>d15,YRS_LongAccelVal,d15</comment></asm>
				<asm><cov>never</cov><addr>P:800042C8</addr><code>17EA</code><mnemonic>cmovn16   d7,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>891</line><src>                    MS2TICK(100), VALID_CNT_THR);</src></hll>
				<asm><cov>ok</cov><addr>P:800042CA</addr><code>02DA</code><mnemonic>mov16     d15,#0x2</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042CC</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>892</line><src>    }</src></hll>
				<hll><line>893</line><src>}</src></hll>
				<hll><line>894</line><src></src></hll>
				<hll><line>895</line><src>static void update_swrc(void)</src></hll>
				<hll><line>896</line><src>{</src></hll>
				<hll><cov>ok</cov><line>897</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>ok</cov><addr>P:800042E0</addr><code>08D7006D</code><mnemonic>call      0x8000548E</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>898</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<asm><cov>ok</cov><addr>P:800042E4</addr><code>0482</code><mnemonic>mov16     d4,#0x0</mnemonic><comment>meet_precond,#0</comment></asm>
				<asm><cov>ok</cov><addr>P:800042E6</addr><code>FB0FFF61</code><mnemonic>fcall     0x80003904</mnemonic><comment>.cocofun_31</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>899</line><src></src></hll>
				<hll><line>900</line><src>#if NO_SWRC == NOT_APPLIED</src></hll>
				<hll><did>not</did><dec>taken</dec><cov>taken</cov><line>901</line><src>    if (!is_timeout(CHASSIS_0, SWRC_03_20ms_POS)) {</src></hll>
				<asm><cov>not taken</cov><addr>P:800042F0</addr><code>801BBFEF</code><mnemonic>jnz.t     d15,#0x1B,0x80004326</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>902</line><src>        update_info(&amp;swrc[SWRC_C183D82_0], meet_precond,</src></hll>
				<asm><cov>ok</cov><addr>P:8000430C</addr><code>F026</code><mnemonic>and16     d0,d15</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000430E</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004312</addr><code>5220008B</code><mnemonic>ne        d5,d0,#0x0</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004316</addr><code>307244D9</code><mnemonic>lea       a4,[a4]0x4F2</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>903</line><src>                    is_e2e_err(CHASSIS_0, SWRC_03_20ms_POS),</src></hll>
				<hll><cov>ok</cov><line>904</line><src>                    is_updated(CHASSIS_0, SWRC_03_20ms_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, SWRC_03_20ms_POS),</src></hll>
				<asm><cov>ok</cov><addr>P:800042F4</addr><code>FBB0FF61</code><mnemonic>fcall     0x80003A54</mnemonic><comment>.cocofun_60</comment></asm>
				<asm><cov>taken</cov><addr>P:800042FA</addr><code>076E</code><mnemonic>jz16      d15,0x80004308</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004306</addr><code>16EA</code><mnemonic>cmovn16   d6,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>905</line><src>                    MS2TICK(120000), VALID_CNT_THR);</src></hll>
				<asm><cov>ok</cov><addr>P:8000431A</addr><code>02DA</code><mnemonic>mov16     d15,#0x2</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000431C</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000431E</addr><code>72EE003B</code><mnemonic>mov       d7,#0x2EE0</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004322</addr><code>03D3006D</code><mnemonic>call      0x80004AC8</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>963</line><src></src></hll>
				<hll><line>964</line><src>static void update_icsc(void)</src></hll>
				<hll><line>965</line><src>{</src></hll>
				<hll><cov>ok</cov><line>966</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>ok</cov><addr>P:80004190</addr><code>097F006D</code><mnemonic>call      0x8000548E</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1383</line><src></src></hll>
				<hll><line>1384</line><src>static void update_fr_cmr(void)</src></hll>
				<hll><line>1385</line><src>{</src></hll>
				<hll><cov>ok</cov><line>1386</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>ok</cov><addr>P:80004332</addr><code>08AE006D</code><mnemonic>call      0x8000548E</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>partial</cov><line>1387</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_acan_busoff;</src></hll>
				<asm><cov>ok</cov><addr>P:80004336</addr><code>2F14</code><mnemonic>ld16.bu   d15,[a2]</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004338</addr><code>0A82</code><mnemonic>mov16     d10,#0x0</mnemonic></asm>
				<asm><cov>taken</cov><addr>P:8000433A</addr><code>076E</code><mnemonic>jz16      d15,0x80004348</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000433C</addr><code>210C</code><mnemonic>ld16.bu   d15,[a2]0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000433E</addr><code>056E</code><mnemonic>jz16      d15,0x80004348</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004340</addr><code>230C</code><mnemonic>ld16.bu   d15,[a2]0x3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004342</addr><code>036E</code><mnemonic>jz16      d15,0x80004348</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004344</addr><code>250C</code><mnemonic>ld16.bu   d15,[a2]0x5</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004346</addr><code>1AAA</code><mnemonic>cmov16    d10,d15,#0x1</mnemonic><comment>meet_precond,d15,#1</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1388</line><src></src></hll>
				<hll><cov>ok</cov><line>1389</line><src>    uint8 FR_CMR_Genrl_FlInfoSta = ref_sig.FR_CMR_Genrl_FlInfoSta;</src></hll>
				<asm><cov>ok</cov><addr>P:8000434E</addr><code>1847F909</code><mnemonic>ld.bu     d9,[a15]0x47</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>1390</line><src>    uint8 LFA_ShrtkeySwSta = ref_sig.LFA_ShrtkeySwSta;</src></hll>
				<asm><cov>ok</cov><addr>P:80004352</addr><code>1848FF09</code><mnemonic>ld.bu     d15,[a15]0x48</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><did>not</did><dec>taken</dec><cov>taken</cov><line>1391</line><src>    if (!is_timeout(L_FR_CMR_0, A_FR_CMR_Genrl_01_30ms_POS)) {</src></hll>
				<asm><cov>not taken</cov><addr>P:80004356</addr><code>801D106F</code><mnemonic>jnz.t     d0,#0x1,0x80004390</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>1392</line><src>        update_info(&amp;fr_cmr[FR_CMR_28B086_0], meet_precond,</src></hll>
				<asm><cov>ok</cov><addr>P:8000435A</addr><code>A402</code><mnemonic>mov16     d4,d10</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>ok</cov><addr>P:8000435C</addr><code>E9004091</code><mnemonic>movh.a    a14,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004360</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004364</addr><code>106CEED9</code><mnemonic>lea       a14,[a14]0x46C</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>1393</line><src>                    FR_CMR_Genrl_FlInfoSta == 2,</src></hll>
				<asm><cov>ok</cov><addr>P:80004368</addr><code>5200298B</code><mnemonic>eq        d5,d9,#0x2</mnemonic><comment>d5,FR_CMR_Genrl_FlInfoSta,#2</comment></asm>
				<asm><cov>ok</cov><addr>P:8000436C</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000436E</addr><code>6220298B</code><mnemonic>ne        d6,d9,#0x2</mnemonic><comment>d6,FR_CMR_Genrl_FlInfoSta,#2</comment></asm>
				<asm><cov>ok</cov><addr>P:80004372</addr><code>E440</code><mnemonic>mov16.aa  a4,a14</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004374</addr><code>03AA006D</code><mnemonic>call      0x80004AC8</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1394</line><src>                    FR_CMR_Genrl_FlInfoSta != 2,</src></hll>
				<hll><cov>ok</cov><line>1395</line><src>                    MS2TICK(500), MS2TICK(500));</src></hll>
				<asm><cov>ok</cov><addr>P:8000435A</addr><code>A402</code><mnemonic>mov16     d4,d10</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>ok</cov><addr>P:8000435C</addr><code>E9004091</code><mnemonic>movh.a    a14,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004360</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004364</addr><code>106CEED9</code><mnemonic>lea       a14,[a14]0x46C</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1396</line><src></src></hll>
				<hll><cov>ok</cov><line>1397</line><src>        update_info(&amp;fr_cmr[FR_CMR_NA_0], meet_precond,</src></hll>
				<asm><cov>ok</cov><addr>P:80004378</addr><code>A402</code><mnemonic>mov16     d4,d10</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>ok</cov><addr>P:8000437A</addr><code>0A0CE449</code><mnemonic>lea       a4,[a14]0x0C</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000437E</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004382</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>1398</line><src>                    FR_CMR_Genrl_FlInfoSta == 1,</src></hll>
				<asm><cov>ok</cov><addr>P:80004384</addr><code>5200198B</code><mnemonic>eq        d5,d9,#0x1</mnemonic><comment>d5,FR_CMR_Genrl_FlInfoSta,#1</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1399</line><src>                    FR_CMR_Genrl_FlInfoSta != 1,</src></hll>
				<hll><cov>ok</cov><line>1400</line><src>                    MS2TICK(500), MS2TICK(500));</src></hll>
				<asm><cov>ok</cov><addr>P:80004378</addr><code>A402</code><mnemonic>mov16     d4,d10</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>ok</cov><addr>P:8000437A</addr><code>0A0CE449</code><mnemonic>lea       a4,[a14]0x0C</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000437E</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004382</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004388</addr><code>6220198B</code><mnemonic>ne        d6,d9,#0x1</mnemonic><comment>d6,FR_CMR_Genrl_FlInfoSta,#1</comment></asm>
				<asm><cov>ok</cov><addr>P:8000438C</addr><code>039E006D</code><mnemonic>call      0x80004AC8</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1401</line><src>    }</src></hll>
				<hll><line>1402</line><src></src></hll>
				<hll><line>1403</line><src>#if LFA_SW_INTEG == APPLIED</src></hll>
				<hll><did>not</did><dec>taken</dec><cov>taken</cov><line>1404</line><src>    if (!is_timeout(L_FR_CMR_0, A_FR_CMR_Ctrl_01_10ms_POS)) {</src></hll>
				<asm><cov>not taken</cov><addr>P:80004392</addr><code>8013006F</code><mnemonic>jnz.t     d0,#0x0,0x800043B8</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>ok</cov><line>1405</line><src>        update_info(&amp;fr_cmr[FR_CMR_28B086_1], meet_precond,</src></hll>
				<asm><cov>ok</cov><addr>P:8000439E</addr><code>52003F8B</code><mnemonic>eq        d5,d15,#0x3</mnemonic><comment>d5,LFA_ShrtkeySwSta,#3</comment></asm>
				<asm><cov>ok</cov><addr>P:800043A2</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043B2</addr><code>64B0</code><mnemonic>add16.a   a4,#0x6</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>1406</line><src>                    LFA_ShrtkeySwSta == 3,</src></hll>
				<asm><cov>ok</cov><addr>P:8000439E</addr><code>52003F8B</code><mnemonic>eq        d5,d15,#0x3</mnemonic><comment>d5,LFA_ShrtkeySwSta,#3</comment></asm>
				<asm><cov>ok</cov><addr>P:800043A2</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>partial</cov><line>1407</line><src>                    LFA_ShrtkeySwSta == 0 || LFA_ShrtkeySwSta == 1,</src></hll>
				<asm><cov>ok</cov><addr>P:80004396</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>taken</cov><addr>P:80004398</addr><code>026E</code><mnemonic>jz16      d15,0x8000439C</mnemonic><comment>LFA_ShrtkeySwSta,0x8000439C</comment></asm>
				<asm><cov>never</cov><addr>P:8000439A</addr><code>125E</code><mnemonic>jne16     d15,#0x1,0x8000439E</mnemonic><comment>LFA_ShrtkeySwSta,#1,0x8000439E</comment></asm>
				<asm><cov>ok</cov><addr>P:8000439C</addr><code>1682</code><mnemonic>mov16     d6,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>ok</cov><line>1408</line><src>                    MS2TICK(500), MS2TICK(500));</src></hll>
				<asm><cov>ok</cov><addr>P:800043A6</addr><code>A402</code><mnemonic>mov16     d4,d10</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>ok</cov><addr>P:800043A8</addr><code>106C44D9</code><mnemonic>lea       a4,[a4]0x46C</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043AC</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043B0</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043B4</addr><code>038A006D</code><mnemonic>call      0x80004AC8</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1409</line><src>    }</src></hll>
				<hll><line>1410</line><src>#endif /* LFA_SW_INTEG */</src></hll>
				<hll><line>1411</line><src>}</src></hll>
				<hll><line>1412</line><src></src></hll>
				<hll><line>1413</line><src>static void update_fr_rdr(void)</src></hll>
				<hll><line>1414</line><src>{</src></hll>
				<hll><cov>ok</cov><line>1415</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>ok</cov><addr>P:800043B8</addr><code>086B006D</code><mnemonic>call      0x8000548E</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>partial</cov><line>1416</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_acan_busoff;</src></hll>
				<asm><cov>ok</cov><addr>P:800043BC</addr><code>2F14</code><mnemonic>ld16.bu   d15,[a2]</mnemonic><comment>LFA_ShrtkeySwSta,[a2]</comment></asm>
				<asm><cov>ok</cov><addr>P:800043BE</addr><code>0982</code><mnemonic>mov16     d9,#0x0</mnemonic><comment>FR_CMR_Genrl_FlInfoSta,#0</comment></asm>
				<asm><cov>taken</cov><addr>P:800043C0</addr><code>076E</code><mnemonic>jz16      d15,0x800043CE</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800043C2</addr><code>210C</code><mnemonic>ld16.bu   d15,[a2]0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800043C4</addr><code>056E</code><mnemonic>jz16      d15,0x800043CE</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800043C6</addr><code>230C</code><mnemonic>ld16.bu   d15,[a2]0x3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800043C8</addr><code>036E</code><mnemonic>jz16      d15,0x800043CE</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800043CA</addr><code>250C</code><mnemonic>ld16.bu   d15,[a2]0x5</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800043CC</addr><code>19AA</code><mnemonic>cmov16    d9,d15,#0x1</mnemonic><comment>meet_precond,d15,#1</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1417</line><src></src></hll>
				<hll><cov>ok</cov><line>1418</line><src>    uint8 FR_RDR_Genrl_FlInfoSta = ref_sig.FR_RDR_Genrl_FlInfoSta;</src></hll>
				<asm><cov>ok</cov><addr>P:800043D0</addr><code>1849FA09</code><mnemonic>ld.bu     d10,[a15]0x49</mnemonic><comment>meet_precond,[a15]73</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><did>not</did><dec>taken</dec><cov>taken</cov><line>1419</line><src>    if (!is_timeout(L_FR_RDR_0, A_FR_RDR_Genrl_01_50ms_POS)) {</src></hll>
				<asm><cov>not taken</cov><addr>P:800043D4</addr><code>801B0F6F</code><mnemonic>jnz.t     d15,#0x0,0x8000440A</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>1420</line><src>        update_info(&amp;fr_rdr[FR_RDR_C28B186_0], meet_precond,</src></hll>
				<asm><cov>ok</cov><addr>P:800043D8</addr><code>FB28FF61</code><mnemonic>fcall     0x80003A28</mnemonic><comment>.cocofun_56</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>1421</line><src>                    FR_RDR_Genrl_FlInfoSta == 2,</src></hll>
				<asm><cov>ok</cov><addr>P:800043E2</addr><code>52002A8B</code><mnemonic>eq        d5,d10,#0x2</mnemonic><comment>d5,FR_RDR_Genrl_FlInfoSta,#2</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1422</line><src>                    FR_RDR_Genrl_FlInfoSta != 2,</src></hll>
				<hll><cov>ok</cov><line>1423</line><src>                    MS2TICK(500), MS2TICK(500));</src></hll>
				<asm><cov>ok</cov><addr>P:800043DC</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043E0</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043E6</addr><code>62202A8B</code><mnemonic>ne        d6,d10,#0x2</mnemonic><comment>d6,FR_RDR_Genrl_FlInfoSta,#2</comment></asm>
				<asm><cov>ok</cov><addr>P:800043EA</addr><code>F440</code><mnemonic>mov16.aa  a4,a15</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043EC</addr><code>9402</code><mnemonic>mov16     d4,d9</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>ok</cov><addr>P:800043EE</addr><code>036D006D</code><mnemonic>call      0x80004AC8</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1424</line><src></src></hll>
				<hll><cov>ok</cov><line>1425</line><src>        update_info(&amp;fr_rdr[FR_RDR_NA_0], meet_precond,</src></hll>
				<asm><cov>ok</cov><addr>P:800043F2</addr><code>9402</code><mnemonic>mov16     d4,d9</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>ok</cov><addr>P:800043F4</addr><code>6FB0</code><mnemonic>add16.a   a15,#0x6</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043F6</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043FA</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>1426</line><src>                    FR_RDR_Genrl_FlInfoSta == 1,</src></hll>
				<asm><cov>ok</cov><addr>P:800043FC</addr><code>52001A8B</code><mnemonic>eq        d5,d10,#0x1</mnemonic><comment>d5,FR_RDR_Genrl_FlInfoSta,#1</comment></asm>
				<asm><cov>ok</cov><addr>P:80004400</addr><code>F440</code><mnemonic>mov16.aa  a4,a15</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004402</addr><code>62201A8B</code><mnemonic>ne        d6,d10,#0x1</mnemonic><comment>d6,FR_RDR_Genrl_FlInfoSta,#1</comment></asm>
				<asm><cov>ok</cov><addr>P:80004406</addr><code>0361006D</code><mnemonic>call      0x80004AC8</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1427</line><src>                    FR_RDR_Genrl_FlInfoSta != 1,</src></hll>
				<hll><cov>ok</cov><line>1428</line><src>                    MS2TICK(500), MS2TICK(500));</src></hll>
				<asm><cov>ok</cov><addr>P:800043F2</addr><code>9402</code><mnemonic>mov16     d4,d9</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>ok</cov><addr>P:800043F4</addr><code>6FB0</code><mnemonic>add16.a   a15,#0x6</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043F6</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043FA</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1483</line><src></src></hll>
				<hll><cov>ok</cov><line>1484</line><src>void FS_UpdateInfo_InvalidSignal(void)</src></hll>
				<asm><cov>ok</cov><addr>P:8000412A</addr><code>0820</code><label>FS_UpdateInfo_InvalidSignal:                                                                                                                                                                                                                                    </label><mnemonic>sub16.a   a10,#0x8</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1485</line><src>{</src></hll>
				<hll><line>1486</line><src>    /* Chassis CAN */</src></hll>
				<hll><line>1487</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>1488</line><src>#if VEH_TYPE == NORMAL</src></hll>
				<hll><cov>ok</cov><line>1489</line><src>    update_ems();</src></hll>
				<asm><cov>ok</cov><addr>P:8000412C</addr><code>028A006D</code><mnemonic>call      0x80004640</mnemonic><comment>update_ems</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1490</line><src>    update_tcu();</src></hll>
				<hll><line>1491</line><src>#elif VEH_TYPE == EV</src></hll>
				<hll><line>1492</line><src>    update_vcu();</src></hll>
				<hll><line>1493</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>1494</line><src>    update_ems();</src></hll>
				<hll><line>1495</line><src>    update_hcu();</src></hll>
				<hll><line>1496</line><src>    update_htcu();</src></hll>
				<hll><line>1497</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><cov>ok</cov><line>1498</line><src>    update_clu();</src></hll>
				<asm><cov>ok</cov><addr>P:80004188</addr><code>0214006D</code><mnemonic>call      0x800045B0</mnemonic><comment>update_clu</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>1499</line><src>    update_esc();</src></hll>
				<asm><cov>ok</cov><addr>P:8000418C</addr><code>02C2006D</code><mnemonic>call      0x80004710</mnemonic><comment>update_esc</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1500</line><src>    update_icsc();</src></hll>
				<hll><line>1501</line><src>    update_icu();</src></hll>
				<hll><cov>ok</cov><line>1502</line><src>    update_mdps();</src></hll>
				<asm><cov>ok</cov><addr>P:80004212</addr><code>0482006D</code><mnemonic>call      0x80004B16</mnemonic><comment>update_mdps</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1503</line><src>    update_sas();</src></hll>
				<hll><line>1504</line><src>    update_yrs();</src></hll>
				<hll><line>1505</line><src>    update_swrc();</src></hll>
				<hll><cov>ok</cov><line>1506</line><src>    update_bcm();</src></hll>
				<asm><cov>ok</cov><addr>P:80004326</addr><code>00EB006D</code><mnemonic>call      0x800044FC</mnemonic><comment>update_bcm</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>ok</cov><line>1507</line><src>    update_sbcm();</src></hll>
				<asm><cov>ok</cov><addr>P:8000432A</addr><code>060F006D</code><mnemonic>call      0x80004F48</mnemonic><comment>update_sbcm</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1508</line><src></src></hll>
				<hll><line>1509</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>1510</line><src>    update_ems();</src></hll>
				<hll><line>1511</line><src>    update_tcu();</src></hll>
				<hll><line>1512</line><src>    update_cgw();</src></hll>
				<hll><line>1513</line><src>    update_clu();</src></hll>
				<hll><line>1514</line><src>    update_esc();</src></hll>
				<hll><line>1515</line><src>    update_mdps();</src></hll>
				<hll><line>1516</line><src>    update_sas();</src></hll>
				<hll><line>1517</line><src>#endif /* CCAN */</src></hll>
				<hll><line>1518</line><src></src></hll>
				<hll><line>1519</line><src>    /* NAVI */</src></hll>
				<hll><cov>ok</cov><line>1520</line><src>    update_navi();</src></hll>
				<asm><cov>ok</cov><addr>P:8000432E</addr><code>04B9006D</code><mnemonic>call      0x80004CA0</mnemonic><comment>update_navi</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1521</line><src></src></hll>
				<hll><line>1522</line><src>    /* Local CAN */</src></hll>
				<hll><line>1523</line><src>    update_fr_cmr();</src></hll>
				<hll><line>1524</line><src>    update_fr_rdr();</src></hll>
				<hll><cov>ok</cov><line>1525</line><src>    update_fr_c_rdr();</src></hll>
				<asm><cov>ok</cov><addr>P:8000440A</addr><code>02E3006D</code><mnemonic>call      0x800049D0</mnemonic><comment>update_fr_c_rdr</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1526</line><src></src></hll>
				<hll><line>1527</line><src>    /* Radar Blockage Flag (CR: HKGL3-923) */</src></hll>
				<hll><cov>ok</cov><line>1528</line><src>    update_rdr_fail_flg();</src></hll>
				<asm><cov>ok</cov><addr>P:8000440E</addr><code>0579006D</code><mnemonic>call      0x80004F00</mnemonic><comment>update_rdr_fail_flg</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1529</line><src></src></hll>
				<hll><line>1530</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>1531</line><src>    /* Recover group 5 */</src></hll>
				<hll><line>1532</line><src>    int i;</src></hll>
				<hll><cov>taken</cov><line>1533</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], CLU_INVALID_SIGNAL))</src></hll>
				<asm><cov>ok</cov><addr>P:80004412</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004416</addr><code>507AFFD9</code><mnemonic>lea       a15,[a15]0x57A</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000441A</addr><code>5F08</code><mnemonic>ld16.bu   d15,[a15]0x5</mnemonic></asm>
				<asm><cov>taken</cov><addr>P:8000441C</addr><code>082E</code><mnemonic>jz16.t    d15,#0x0,0x8000442C</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1534</line><src>        for (i = CLU_ITEM_NUM; i--; ) clu[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000441E</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004422</addr><code>207C22D9</code><mnemonic>lea       a2,[a2]0x4BC</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004426</addr><code>14A0</code><mnemonic>mov16.a   a4,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004428</addr><code>FAC2FF61</code><mnemonic>fcall     0x800039AC</mnemonic><comment>.cocofun_44</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>taken</cov><line>1535</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], ESC_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:8000442C</addr><code>182E</code><mnemonic>jz16.t    d15,#0x1,0x8000443C</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1536</line><src>        for (i = ESC_ITEM_NUM; i--; ) esc[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000442E</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004432</addr><code>F00822D9</code><mnemonic>lea       a2,[a2]0x3C8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004436</addr><code>94A0</code><mnemonic>mov16.a   a4,#0x9</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004438</addr><code>FABAFF61</code><mnemonic>fcall     0x800039AC</mnemonic><comment>.cocofun_44</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>taken</cov><line>1537</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], MDPS_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:8000443C</addr><code>282E</code><mnemonic>jz16.t    d15,#0x2,0x8000444C</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1538</line><src>        for (i = MDPS_ITEM_NUM; i--; ) mdps[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000443E</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004442</addr><code>004822D9</code><mnemonic>lea       a2,[a2]0x408</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004446</addr><code>34A0</code><mnemonic>mov16.a   a4,#0x3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004448</addr><code>FAB2FF61</code><mnemonic>fcall     0x800039AC</mnemonic><comment>.cocofun_44</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>taken</cov><line>1539</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], SAS_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:8000444C</addr><code>352E</code><mnemonic>jz16.t    d15,#0x3,0x80004456</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004452</addr><code>306628E9</code><mnemonic>st.b      [a2]0x4E6,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1540</line><src>        for (i = SAS_ITEM_NUM; i--; ) sas[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000444E</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1541</line><src>#if VEH_TYPE == NORMAL</src></hll>
				<hll><cov>taken</cov><line>1542</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], EMS_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:80004456</addr><code>482E</code><mnemonic>jz16.t    d15,#0x4,0x80004466</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1543</line><src>        for (i = EMS_ITEM_NUM; i--; ) ems[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:80004458</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000445C</addr><code>104822D9</code><mnemonic>lea       a2,[a2]0x448</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004460</addr><code>24A0</code><mnemonic>mov16.a   a4,#0x2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004462</addr><code>FAA5FF61</code><mnemonic>fcall     0x800039AC</mnemonic><comment>.cocofun_44</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>taken</cov><line>1544</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], TCU_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:80004466</addr><code>552E</code><mnemonic>jz16.t    d15,#0x5,0x80004470</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000446C</addr><code>305A28E9</code><mnemonic>st.b      [a2]0x4DA,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1545</line><src>        for (i = TCU_ITEM_NUM; i--; ) tcu[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:80004468</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1546</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>1547</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], EMS_INVALID_SIGNAL))</src></hll>
				<hll><line>1548</line><src>        for (i = EMS_ITEM_NUM; i--; ) ems[i].fault = FALSE;</src></hll>
				<hll><line>1549</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], TCU_INVALID_SIGNAL))</src></hll>
				<hll><line>1550</line><src>        for (i = HTCU_ITEM_NUM; i--; ) htcu[i].fault = FALSE;</src></hll>
				<hll><line>1551</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><cov>taken</cov><line>1552</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], YRS_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:80004470</addr><code>652E</code><mnemonic>jz16.t    d15,#0x6,0x8000447A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004476</addr><code>306C28E9</code><mnemonic>st.b      [a2]0x4EC,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1553</line><src>        for (i = YRS_ITEM_NUM; i--; ) yrs[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:80004472</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>taken</cov><line>1554</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], SWRC_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:8000447A</addr><code>752E</code><mnemonic>jz16.t    d15,#0x7,0x80004484</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004480</addr><code>307228E9</code><mnemonic>st.b      [a2]0x4F2,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1555</line><src>        for (i = SWRC_ITEM_NUM; i--; ) swrc[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000447C</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1556</line><src></src></hll>
				<hll><line>1557</line><src>    /* Recover group 6 */</src></hll>
				<hll><line>1558</line><src>#if VEH_TYPE == EV</src></hll>
				<hll><line>1559</line><src>   if (TEST_BIT(recover_mask[RECOVER_GROUP_6], VCU_HCU_INVALID_SIGNAL))</src></hll>
				<hll><line>1560</line><src>        for (i = VCU_ITEM_NUM; i--; ) vcu[i].fault = FALSE;</src></hll>
				<hll><line>1561</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>1562</line><src>   if (TEST_BIT(recover_mask[RECOVER_GROUP_6], VCU_HCU_INVALID_SIGNAL))</src></hll>
				<hll><line>1563</line><src>        for (i = HCU_ITEM_NUM; i--; ) hcu[i].fault = FALSE;</src></hll>
				<hll><line>1564</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><cov>taken</cov><line>1565</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], ICSC_INVALID_SIGNAL))</src></hll>
				<asm><cov>ok</cov><addr>P:80004484</addr><code>6F08</code><mnemonic>ld16.bu   d15,[a15]0x6</mnemonic></asm>
				<asm><cov>taken</cov><addr>P:80004486</addr><code>152E</code><mnemonic>jz16.t    d15,#0x1,0x80004490</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000448C</addr><code>3078F8E9</code><mnemonic>st.b      [a15]0x4F8,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1566</line><src>        for (i = ICSC_ITEM_NUM; i--; ) icsc[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:80004488</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>taken</cov><line>1567</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], ICU_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:80004490</addr><code>252E</code><mnemonic>jz16.t    d15,#0x2,0x8000449A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004496</addr><code>3060F8E9</code><mnemonic>st.b      [a15]0x4E0,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1568</line><src>        for (i = ICU_ITEM_NUM; i--; ) icu[i].fault = FALSE;</src></hll>
				<hll><cov>taken</cov><line>1569</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], NAVI_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:8000449A</addr><code>382E</code><mnemonic>jz16.t    d15,#0x3,0x800044AA</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1570</line><src>        for (i = NAVI_ITEM_NUM; i--; ) navi[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000449C</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044A0</addr><code>106CFFD9</code><mnemonic>lea       a15,[a15]0x46C</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044A4</addr><code>22A0</code><mnemonic>mov16.a   a2,#0x2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044A6</addr><code>FA87FF61</code><mnemonic>fcall     0x800039B4</mnemonic><comment>.cocofun_45</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>taken</cov><line>1571</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_CMR_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:800044AA</addr><code>482E</code><mnemonic>jz16.t    d15,#0x4,0x800044BA</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1572</line><src>        for (i = FR_CMR_ITEM_NUM; i--; ) fr_cmr[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:800044AC</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044B0</addr><code>107EFFD9</code><mnemonic>lea       a15,[a15]0x47E</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044B4</addr><code>22A0</code><mnemonic>mov16.a   a2,#0x2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044B6</addr><code>FA7FFF61</code><mnemonic>fcall     0x800039B4</mnemonic><comment>.cocofun_45</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>taken</cov><line>1573</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_RDR_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:800044BA</addr><code>582E</code><mnemonic>jz16.t    d15,#0x5,0x800044CA</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1574</line><src>        for (i = FR_RDR_ITEM_NUM; i--; ) fr_rdr[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:800044BC</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044C0</addr><code>3054FFD9</code><mnemonic>lea       a15,[a15]0x4D4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044C4</addr><code>12A0</code><mnemonic>mov16.a   a2,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044C6</addr><code>FA77FF61</code><mnemonic>fcall     0x800039B4</mnemonic><comment>.cocofun_45</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>taken</cov><line>1575</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_C_RDR_INVALID_SIGNAL))</src></hll>
				<asm><cov>taken</cov><addr>P:800044CA</addr><code>682E</code><mnemonic>jz16.t    d15,#0x6,0x800044DA</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1576</line><src>        for (i = FR_C_RDR_ITEM_NUM; i--; ) fr_c_rdr[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:800044CC</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044D0</addr><code>0060FFD9</code><mnemonic>lea       a15,[a15]0x420</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044D4</addr><code>32A0</code><mnemonic>mov16.a   a2,#0x3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800044D6</addr><code>FA6FFF61</code><mnemonic>fcall     0x800039B4</mnemonic><comment>.cocofun_45</comment></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1577</line><src></src></hll>
				<hll><line>1578</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>1579</line><src>    /* Recover group 5 */</src></hll>
				<hll><line>1580</line><src>    int i;</src></hll>
				<hll><line>1581</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], CGW_INVALID_SIGNAL))</src></hll>
				<hll><line>1582</line><src>        for (i = CGW_ITEM_NUM; i--; ) cgw[i].fault = FALSE;</src></hll>
				<hll><line>1583</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], CLU_INVALID_SIGNAL))</src></hll>
				<hll><line>1584</line><src>        for (i = CLU_ITEM_NUM; i--; ) clu[i].fault = FALSE;</src></hll>
				<hll><line>1585</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], ESC_INVALID_SIGNAL))</src></hll>
				<hll><line>1586</line><src>        for (i = ESC_ITEM_NUM; i--; ) esc[i].fault = FALSE;</src></hll>
				<hll><line>1587</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], MDPS_INVALID_SIGNAL))</src></hll>
				<hll><line>1588</line><src>        for (i = MDPS_ITEM_NUM; i--; ) mdps[i].fault = FALSE;</src></hll>
				<hll><line>1589</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], SAS_INVALID_SIGNAL))</src></hll>
				<hll><line>1590</line><src>        for (i = SAS_ITEM_NUM; i--; ) sas[i].fault = FALSE;</src></hll>
				<hll><line>1591</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], EMS_INVALID_SIGNAL))</src></hll>
				<hll><line>1592</line><src>        for (i = EMS_ITEM_NUM; i--; ) ems[i].fault = FALSE;</src></hll>
				<hll><line>1593</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], TCU_INVALID_SIGNAL))</src></hll>
				<hll><line>1594</line><src>        for (i = TCU_ITEM_NUM; i--; ) tcu[i].fault = FALSE;</src></hll>
				<hll><line>1595</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], NAVI_INVALID_SIGNAL))</src></hll>
				<hll><line>1596</line><src>        for (i = NAVI_ITEM_NUM; i--; ) navi[i].fault = FALSE;</src></hll>
				<hll><line>1597</line><src></src></hll>
				<hll><line>1598</line><src>    /* Recover group 6 */</src></hll>
				<hll><line>1599</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_CMR_INVALID_SIGNAL))</src></hll>
				<hll><line>1600</line><src>        for (i = FR_CMR_ITEM_NUM; i--; ) fr_cmr[i].fault = FALSE;</src></hll>
				<hll><line>1601</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_RDR_INVALID_SIGNAL))</src></hll>
				<hll><line>1602</line><src>        for (i = FR_RDR_ITEM_NUM; i--; ) fr_rdr[i].fault = FALSE;</src></hll>
				<hll><line>1603</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_C_RDR_INVALID_SIGNAL))</src></hll>
				<hll><line>1604</line><src>        for (i = FR_C_RDR_ITEM_NUM; i--; ) fr_c_rdr[i].fault = FALSE;</src></hll>
				<hll><line>1605</line><src>#endif /* CCAN */</src></hll>
				<hll><cov>ok</cov><line>1606</line><src>}</src></hll>
				<asm><cov>ok</cov><addr>P:800044DA</addr><code>9000</code><mnemonic>ret16     </mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\SWC_Failsafe.h" type="multiple">
				<hll><line>1</line><src>#ifndef FAILSAFE_H</src></hll>
				<hll><line>2</line><src>#define FAILSAFE_H</src></hll>
				<hll><line>3</line><src></src></hll>
				<hll><line>4</line><src>#include &quot;Platform_Types.h&quot;</src></hll>
				<hll><line>5</line><src>#include &quot;DRV_par.h&quot;</src></hll>
				<hll><line>6</line><src></src></hll>
				<hll><line>7</line><src>#define BIT(nr) (1UL &lt;&lt; (nr))</src></hll>
				<hll><line>8</line><src>#define CLEAR_BIT(nr) (0UL &lt;&lt; (nr))</src></hll>
				<hll><line>9</line><src></src></hll>
				<hll><line>10</line><src>#define TEST_BIT(var,nr) ((var) &amp; ((uint8)((0x01U) &lt;&lt; (nr))))</src></hll>
				<hll><line>11</line><src>#define ARRAY_SIZE(x) (sizeof((x))/sizeof((x)[0]))</src></hll>
				<hll><line>12</line><src>#define MS2TICK(ms) ((ms) / 10UL)</src></hll>
				<hll><line>13</line><src></src></hll>
				<hll><line>14</line><src>#define SET_DTC(DTC, FAULT_CONDITION) \</src></hll>
				<hll><line>15</line><src>    Rte_Call_Event_DEM_E_UDS_DTC_##DTC##_SetEventStatus((FAULT_CONDITION) ? DEM_EVENT_STATUS_FAILED : DEM_EVENT_STATUS_PASSED)</src></hll>
				<hll><line>16</line><src></src></hll>
				<hll><line>17</line><src>#define IGN_ON_DELAY  3000  // ms</src></hll>
				<hll><line>18</line><src>#define IGN_OFF_DELAY 180000 // ms</src></hll>
				<hll><line>19</line><src>#define BAT_VOL_UPPER 16000 // mV</src></hll>
				<hll><line>20</line><src>#define BAT_VOL_LOWER 9000  // mV</src></hll>
				<hll><line>21</line><src>#define ERR_CNT_THR   3</src></hll>
				<hll><line>22</line><src></src></hll>
				<hll><line>23</line><src>#define FS_DEBUG    0</src></hll>
				<hll><line>24</line><src></src></hll>
				<hll><line>25</line><src>struct internal_error_info {</src></hll>
				<hll><line>26</line><src>    uint8 hw_err_cnt;</src></hll>
				<hll><line>27</line><src>    uint8 sw_err_cnt;</src></hll>
				<hll><line>28</line><src>    struct {</src></hll>
				<hll><line>29</line><src>        uint8 ag_idx;</src></hll>
				<hll><line>30</line><src>        uint32 alarm;</src></hll>
				<hll><line>31</line><src>    } hw_err[12];</src></hll>
				<hll><line>32</line><src>    struct {</src></hll>
				<hll><line>33</line><src>        uint8 error_code;</src></hll>
				<hll><line>34</line><src>        uint8 task_id;</src></hll>
				<hll><line>35</line><src>    } sw_err[5];</src></hll>
				<hll><line>36</line><src>};</src></hll>
				<hll><line>37</line><src></src></hll>
				<hll><line>38</line><src>struct reference_signal {</src></hll>
				<hll><line>39</line><src>#if VEH_TYPE == NORMAL</src></hll>
				<hll><line>40</line><src>    /* EMS */</src></hll>
				<hll><line>41</line><src>    uint8 ENG_EngSpdErrSta;      // EMS_01_10ms</src></hll>
				<hll><line>42</line><src>    uint8 ENG_IsgSta;            // EMS_01_10ms</src></hll>
				<hll><line>43</line><src>    uint8 ENG_EngSta;            // EMS_02_10ms</src></hll>
				<hll><line>44</line><src>    uint16 ENG_AccelPdlVal;      // EMS_02_10ms</src></hll>
				<hll><line>45</line><src>    uint8 ENG_AppAccelPdlSta;    // EMS_02_10ms</src></hll>
				<hll><line>46</line><src>    uint8 CF_ECU_SSC_STAT;       // EMS_03_10ms</src></hll>
				<hll><line>47</line><src>    /* TCU */</src></hll>
				<hll><line>48</line><src>    uint8 TCU_GearSlctDis;       // TCU_01_10ms</src></hll>
				<hll><line>49</line><src>#elif VEH_TYPE == EV</src></hll>
				<hll><line>50</line><src>    /* VCU */</src></hll>
				<hll><line>51</line><src>    uint8 VCU_EvDrvRdySta;       // VCU_01_10ms</src></hll>
				<hll><line>52</line><src>    uint8 VCU_GearPosSta;        // VCU_01_10ms</src></hll>
				<hll><line>53</line><src>    uint8 VCU_AccPedDepVal;      // VCU_01_10ms</src></hll>
				<hll><line>54</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>55</line><src>    /* EMS */</src></hll>
				<hll><line>56</line><src>    uint16 HEV_AccelPdlVal;      // EMS_07_10ms</src></hll>
				<hll><line>57</line><src>    uint8 HEV_EngSpdErrSta;      // EMS_11_10ms</src></hll>
				<hll><line>58</line><src>    /* HCU */</src></hll>
				<hll><line>59</line><src>    uint8 HCU_HevRdySta;         // HCU_03_10ms</src></hll>
				<hll><line>60</line><src>    /* HTCU */</src></hll>
				<hll><line>61</line><src>    uint8 HTCU_GearSlctrDis;     // HTCU_04_10ms</src></hll>
				<hll><line>62</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><line>63</line><src>    /* BCM */</src></hll>
				<hll><line>64</line><src>    uint8 BCM_Ign1InSta;         // BCM_02_200ms</src></hll>
				<hll><line>65</line><src>    /* SBCM */</src></hll>
				<hll><line>66</line><src>    uint8 SBCM_AST_DiagSta;      // SBCM_AST_02_200ms</src></hll>
				<hll><line>67</line><src>    uint8 SBCM_DRV_DiagSta;      // SBCM_DRV_01_200ms</src></hll>
				<hll><line>68</line><src>    /* CLU */</src></hll>
				<hll><line>69</line><src>    uint16 CLU_DisSpdVal;        // CLU_01_20ms</src></hll>
				<hll><line>70</line><src>    uint8 CLU_HDALCFuncOnSetReq; // CLU_11_00ms</src></hll>
				<hll><line>71</line><src>    /* ESC */</src></hll>
				<hll><line>72</line><src>    uint8 ABS_DiagSta;           // ABS_ESC_01_10ms</src></hll>
				<hll><line>73</line><src>    uint8 ESC_CylPrsrSta;        // ESC_01_10ms</src></hll>
				<hll><line>74</line><src>    uint16 ESC_CylPrsrVal;       // ESC_01_10ms</src></hll>
				<hll><line>75</line><src>    uint8 ESC_IMURstStaAck;      // ESC_01_10ms</src></hll>
				<hll><line>76</line><src>    uint8 ESC_Sta;               // ESC_01_10ms</src></hll>
				<hll><line>77</line><src>    uint8 FCA_EquipSta;          // ESC_03_20ms</src></hll>
				<hll><line>78</line><src>    uint8 FCA_AvlblSta;          // ESC_03_20ms</src></hll>
				<hll><line>79</line><src>    uint8 SCC_EnblReq;           // ESC_03_20ms</src></hll>
				<hll><line>80</line><src>    uint16 WHL_SpdFLVal;         // WHL_01_10ms</src></hll>
				<hll><line>81</line><src>    uint16 WHL_SpdFRVal;         // WHL_01_10ms</src></hll>
				<hll><line>82</line><src>    uint16 WHL_SpdRLVal;         // WHL_01_10ms</src></hll>
				<hll><line>83</line><src>    uint16 WHL_SpdRRVal;         // WHL_01_10ms</src></hll>
				<hll><line>84</line><src>    uint8 WHL_PlsFLVal;          // WHL_01_10ms</src></hll>
				<hll><line>85</line><src>    uint8 WHL_PlsFRVal;          // WHL_01_10ms</src></hll>
				<hll><line>86</line><src>    uint8 WHL_PlsRLVal;          // WHL_01_10ms</src></hll>
				<hll><line>87</line><src>    uint8 WHL_PlsRRVal;          // WHL_01_10ms</src></hll>
				<hll><line>88</line><src>    /* MDPS */</src></hll>
				<hll><line>89</line><src>    uint16 MDPS_StrTqSnsrVal;    // MDPS_01_10ms</src></hll>
				<hll><line>90</line><src>    uint8 MDPS_LkaToiActvSta;    // MDPS_01_10ms</src></hll>
				<hll><line>91</line><src>    uint8 MDPS_LkaToiUnblSta;    // MDPS_01_10ms</src></hll>
				<hll><line>92</line><src>    uint8 MDPS_LkaToiFltSta;     // MDPS_01_10ms</src></hll>
				<hll><line>93</line><src>    uint8 MDPS_LkaFailSta;       // MDPS_01_10ms</src></hll>
				<hll><line>94</line><src>    uint8 MDPS_LkaPlgInSta;      // MDPS_01_10ms</src></hll>
				<hll><line>95</line><src>    uint8 MDPS_Typ;              // MDPS_01_10ms</src></hll>
				<hll><line>96</line><src>    /* SAS */</src></hll>
				<hll><line>97</line><src>    sint16 SAS_AnglVal;          // SAS_01_10ms</src></hll>
				<hll><line>98</line><src>    uint8 SAS_SpdVal;            // SAS_01_10ms</src></hll>
				<hll><line>99</line><src>    /* SWRC */</src></hll>
				<hll><line>100</line><src>    uint8 SWRC_LFASwSta;         // SWRC_03_20ms</src></hll>
				<hll><line>101</line><src>    /* YRS */</src></hll>
				<hll><line>102</line><src>    uint16 YRS_YawRtVal;         // YRS_01_10ms</src></hll>
				<hll><line>103</line><src>    uint16 YRS_LongAccelVal;     // YRS_01_10ms</src></hll>
				<hll><line>104</line><src>    uint16 YRS_LatAccelVal;      // YRS_01_10ms</src></hll>
				<hll><line>105</line><src>    uint8 YRS_AcuRstSta;         // YRS_01_10ms</src></hll>
				<hll><line>106</line><src>    /* ICU */</src></hll>
				<hll><line>107</line><src>    uint8 ExtLamp_TrnSigLmpLftBlnkngSta; // ICU_04_200ms &amp; used in F010_InputOutput service</src></hll>
				<hll><line>108</line><src>    uint8 ExtLamp_TrnSigLmpRtBlnkngSta;  // ICU_04_200ms &amp; used in F010_InputOutput service</src></hll>
				<hll><line>109</line><src>    uint8 Lamp_RrTrnSigLmpLftOpnSta;     // ICU_06_200ms</src></hll>
				<hll><line>110</line><src>    uint8 Lamp_RrTrnSigLmpRtOpnSta;      // ICU_06_200ms</src></hll>
				<hll><line>111</line><src>    uint8 Lamp_FrTrnSigLmpLftOpnSta;     // ICU_06_200ms</src></hll>
				<hll><line>112</line><src>    uint8 Lamp_FrTrnSigLmpRtOpnSta;      // ICU_06_200ms</src></hll>
				<hll><line>113</line><src></src></hll>
				<hll><line>114</line><src>    /* NAVI */</src></hll>
				<hll><line>115</line><src>    uint8 HU_NaviStatus;                // HU_CLU_PE_05</src></hll>
				<hll><line>116</line><src>    uint8 HU_AliveStatus;               // HU_GW_PE_01</src></hll>
				<hll><line>117</line><src>    uint8 HU_AdasSupport;               // HU_MON_PE_01</src></hll>
				<hll><line>118</line><src>    uint8 HU_DistributeInfo;            // HU_MON_PE_01</src></hll>
				<hll><line>119</line><src>    uint8 HU_NaviHandshakingSupport;    // HU_MON_PE_01</src></hll>
				<hll><line>120</line><src>    uint8 HU_Navi_RspADASMapMsg ;       // HU_MON_PE_01</src></hll>
				<hll><line>121</line><src>    uint8 POS_CyclicCounter;         // HU_NAVI_V2_POS_PE</src></hll>
				<hll><line>122</line><src>    uint8 SEG_CalculatedRoute;       // HU_NAVI_V2_SEG_E</src></hll>
				<hll><line>123</line><src></src></hll>
				<hll><line>124</line><src>    /* Front Camera */</src></hll>
				<hll><line>125</line><src>    uint8 FR_CMR_Genrl_FlInfoSta; // L_FR_CMR_Genrl_01_30ms</src></hll>
				<hll><line>126</line><src>    uint8 LFA_ShrtkeySwSta;       // A_FR_CMR_Ctrl_01</src></hll>
				<hll><line>127</line><src>    /* Front Radar */</src></hll>
				<hll><line>128</line><src>    uint8 FR_RDR_Genrl_FlInfoSta; // L_FR_RDR_Genrl_01_50ms</src></hll>
				<hll><line>129</line><src>    /* Front-Rear Corner Radar */</src></hll>
				<hll><line>130</line><src>    uint8 FR_C_RDR_LocalFlInfoSta_Flt; // L_FR_C_RDR_Genrl_01_50ms</src></hll>
				<hll><line>131</line><src>    uint8 FR_C_RDR_Genrl_FlInfoSta_Blkg; // L_FR_C_RDR_Genrl_01_50ms</src></hll>
				<hll><line>132</line><src>};</src></hll>
				<hll><line>133</line><src></src></hll>
				<hll><line>134</line><src>struct precondition {</src></hll>
				<hll><line>135</line><src>    boolean is_norm_vol;</src></hll>
				<hll><line>136</line><src>    boolean is_3s_after_ign_on;</src></hll>
				<hll><line>137</line><src>    boolean for_3min_after_ign_off;</src></hll>
				<hll><line>138</line><src>    boolean is_eng_run;</src></hll>
				<hll><line>139</line><src>    boolean is_not_ecan_busoff;</src></hll>
				<hll><line>140</line><src>    boolean is_not_acan_busoff;</src></hll>
				<hll><line>141</line><src>};</src></hll>
				<hll><line>142</line><src></src></hll>
				<hll><line>143</line><src></src></hll>
				<hll><line>144</line><src>/* HDA_InfoPUDis */</src></hll>
				<hll><line>145</line><src>enum {</src></hll>
				<hll><line>146</line><src>    NO_FAULT      = 0,</src></hll>
				<hll><line>147</line><src>    HDA_FAULT     = 1, // FS_02</src></hll>
				<hll><line>148</line><src>    HDA_LFA_FAULT = 2, // FS_01</src></hll>
				<hll><line>149</line><src>};</src></hll>
				<hll><line>150</line><src></src></hll>
				<hll><line>151</line><src>typedef struct {</src></hll>
				<hll><line>152</line><src>    uint8 FcaRo_Inhibit;</src></hll>
				<hll><line>153</line><src>    uint8 FcaSf2_Inhibit;</src></hll>
				<hll><line>154</line><src>    uint8 FcaSf3_Inhibit;</src></hll>
				<hll><line>155</line><src>    uint8 FcaSf3_JT_Inhibit;</src></hll>
				<hll><line>156</line><src>    uint8 FcaRo_JC_Inhibit;</src></hll>
				<hll><line>157</line><src>    uint8 FcaSf3_JC_Inhibit;</src></hll>
				<hll><line>158</line><src>    uint8 FcaSf2_Lo_Inhibit;</src></hll>
				<hll><line>159</line><src>    uint8 FcaSF3_LS_Inhibit;</src></hll>
				<hll><line>160</line><src>    uint8 Fca_ESA_Inhibit;</src></hll>
				<hll><line>161</line><src>} fca_inhibit_t;</src></hll>
				<hll><line>162</line><src></src></hll>
				<hll><line>163</line><src>typedef struct {</src></hll>
				<hll><line>164</line><src>    uint8 SccCc_Inhibit;</src></hll>
				<hll><line>165</line><src>    uint8 SccRo_Inhibit;</src></hll>
				<hll><line>166</line><src>    uint8 SccSf2_Inhibit;</src></hll>
				<hll><line>167</line><src>    uint8 SccSf3_Inhibit;</src></hll>
				<hll><line>168</line><src>} scc_inhibit_t;</src></hll>
				<hll><line>169</line><src></src></hll>
				<hll><line>170</line><src>typedef struct {</src></hll>
				<hll><line>171</line><src>    uint8 SccMl_Inhibit;</src></hll>
				<hll><line>172</line><src>} sccml_inhibit_t;</src></hll>
				<hll><line>173</line><src></src></hll>
				<hll><line>174</line><src>typedef struct {</src></hll>
				<hll><line>175</line><src>    uint8 NScc_Z_C_Inhibit;</src></hll>
				<hll><line>176</line><src>    uint8 NScc_R_Inhibit;</src></hll>
				<hll><line>177</line><src>} nscc_inhibit_t;</src></hll>
				<hll><line>178</line><src></src></hll>
				<hll><line>179</line><src>typedef struct {</src></hll>
				<hll><line>180</line><src>    uint8 Lfa_Lat_Inhibit;</src></hll>
				<hll><line>181</line><src>    uint8 LfaSf2_Inhibit;</src></hll>
				<hll><line>182</line><src>} lfa_inhibit_t;</src></hll>
				<hll><line>183</line><src></src></hll>
				<hll><line>184</line><src>typedef struct {</src></hll>
				<hll><line>185</line><src>    uint8 Hda_Lat_Inhibit;</src></hll>
				<hll><line>186</line><src>    uint8 Hda_Long_Inhibit;</src></hll>
				<hll><line>187</line><src>    uint8 Hda_Inhibit;</src></hll>
				<hll><line>188</line><src>    uint8 HdaII_Inhibit;</src></hll>
				<hll><line>189</line><src>} hda_inhibit_t;</src></hll>
				<hll><line>190</line><src></src></hll>
				<hll><line>191</line><src>typedef struct {</src></hll>
				<hll><line>192</line><src>    uint8 BCA_Driving_Inhibit;</src></hll>
				<hll><line>193</line><src>    uint8 BCA_Driving_RDRBlk_Inhibit;</src></hll>
				<hll><line>194</line><src>    uint8 BCA_Plus_ParallelExit_Inhibit;</src></hll>
				<hll><line>195</line><src>    uint8 BCA_Plus_ParallelExit_RDRBlk_Inhibit; </src></hll>
				<hll><line>196</line><src>} bca_inhibit_t;</src></hll>
				<hll><line>197</line><src></src></hll>
				<hll><line>198</line><src>typedef struct {</src></hll>
				<hll><line>199</line><src>    uint8 SEA_Inhibit;</src></hll>
				<hll><line>200</line><src>} sea_inhibit_t;</src></hll>
				<hll><line>201</line><src></src></hll>
				<hll><line>202</line><src>typedef struct {</src></hll>
				<hll><line>203</line><src>    uint8 RCCA_Inhibit;</src></hll>
				<hll><line>204</line><src>    uint8 RCCA_RDRBlk_Inhibit;</src></hll>
				<hll><line>205</line><src>} rcca_inhibit_t;</src></hll>
				<hll><line>206</line><src></src></hll>
				<hll><line>207</line><src>typedef struct {</src></hll>
				<hll><line>208</line><src>    uint8 FCA_SysFlrSta;</src></hll>
				<hll><line>209</line><src>    uint8 SCC_SysFlrSta;</src></hll>
				<hll><line>210</line><src>    uint8 SCCMode_OptUsmSta;</src></hll>
				<hll><line>211</line><src>    uint8 SCC_NSCCOnOffSta;</src></hll>
				<hll><line>212</line><src>    uint8 HDA_InfoPUDis;</src></hll>
				<hll><line>213</line><src>    uint8 HDA_LCFuncSta;</src></hll>
				<hll><line>214</line><src>    uint8 BCW_IndSta;</src></hll>
				<hll><line>215</line><src>} warning_t;</src></hll>
				<hll><line>216</line><src></src></hll>
				<hll><line>217</line><src>struct inhibit_info {</src></hll>
				<hll><line>218</line><src>    scc_inhibit_t scc;</src></hll>
				<hll><line>219</line><src>    sccml_inhibit_t sccml;</src></hll>
				<hll><line>220</line><src>    nscc_inhibit_t nscc;</src></hll>
				<hll><line>221</line><src>    fca_inhibit_t fca;</src></hll>
				<hll><line>222</line><src>    lfa_inhibit_t lfa;</src></hll>
				<hll><line>223</line><src>    hda_inhibit_t hda;</src></hll>
				<hll><line>224</line><src>    bca_inhibit_t bca;</src></hll>
				<hll><line>225</line><src>    sea_inhibit_t sea;</src></hll>
				<hll><line>226</line><src>    rcca_inhibit_t rcca;</src></hll>
				<hll><line>227</line><src>    warning_t warning;</src></hll>
				<hll><line>228</line><src>};</src></hll>
				<hll><line>229</line><src></src></hll>
				<hll><line>230</line><src></src></hll>
				<hll><line>231</line><src>/* Voltage enum */</src></hll>
				<hll><line>232</line><src>enum {</src></hll>
				<hll><line>233</line><src>    VOL_IGN,</src></hll>
				<hll><line>234</line><src>    VOL_IGN_FLAG,</src></hll>
				<hll><line>235</line><src>    VOL_BAT,</src></hll>
				<hll><line>236</line><src>    VOL_BUCK5P0,</src></hll>
				<hll><line>237</line><src>    VOL_PMIC5P0,</src></hll>
				<hll><line>238</line><src>    VOL_PMIC3P3,</src></hll>
				<hll><line>239</line><src>    VOL_PMIC1P25,</src></hll>
				<hll><line>240</line><src>    VOL_BUCKPG5P0,</src></hll>
				<hll><line>241</line><src>    VOL_GRP_NUM</src></hll>
				<hll><line>242</line><src>};</src></hll>
				<hll><line>243</line><src></src></hll>
				<hll><line>244</line><src>/* Message type definition */</src></hll>
				<hll><line>245</line><src>enum msg_type {</src></hll>
				<hll><line>246</line><src>    CHASSIS_0,</src></hll>
				<hll><line>247</line><src>    CHASSIS_1,</src></hll>
				<hll><line>248</line><src>    L_FR_CMR_0,</src></hll>
				<hll><line>249</line><src>    L_FR_RDR_0,    </src></hll>
				<hll><line>250</line><src>    L_FR_C_RDR_0,</src></hll>
				<hll><line>251</line><src>    L_FR_C_RDR_1,</src></hll>
				<hll><line>252</line><src>    L_FR_CMR_1,</src></hll>
				<hll><line>253</line><src>    L_FR_CMR_2,</src></hll>
				<hll><line>254</line><src>    L_FR_RDR_1,  </src></hll>
				<hll><line>255</line><src>    MSG_GRP_NUM,</src></hll>
				<hll><line>256</line><src>};</src></hll>
				<hll><line>257</line><src></src></hll>
				<hll><line>258</line><src>/* Chassis CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>259</line><src>enum chassis_0_msgs {</src></hll>
				<hll><line>260</line><src>        ABS_ESC_01_10ms_POS,</src></hll>
				<hll><line>261</line><src>    BCM_02_200ms_POS,</src></hll>
				<hll><line>262</line><src>        BCM_10_200ms_POS,</src></hll>
				<hll><line>263</line><src>        CLU_01_20ms_POS,</src></hll>
				<hll><line>264</line><src>        CLU_02_100ms_POS,</src></hll>
				<hll><line>265</line><src>#if VEH_TYPE == NORMAL</src></hll>
				<hll><line>266</line><src>        EMS_01_10ms_POS,</src></hll>
				<hll><line>267</line><src>        EMS_02_10ms_POS,</src></hll>
				<hll><line>268</line><src>    EMS_03_10ms_POS,</src></hll>
				<hll><line>269</line><src>    EMS_05_100ms_POS,</src></hll>
				<hll><line>270</line><src>    EMS_08_100ms_POS,</src></hll>
				<hll><line>271</line><src>    TCU_01_10ms_POS,</src></hll>
				<hll><line>272</line><src>#elif VEH_TYPE == EV</src></hll>
				<hll><line>273</line><src>    VCU_01_10ms_POS,</src></hll>
				<hll><line>274</line><src>    VCU_03_100ms_POS,</src></hll>
				<hll><line>275</line><src>#endif</src></hll>
				<hll><line>276</line><src>        ESC_01_10ms_POS,</src></hll>
				<hll><line>277</line><src>        ESC_03_20ms_POS,</src></hll>
				<hll><line>278</line><src>        HU_CLU_PE_05_POS,</src></hll>
				<hll><line>279</line><src>        HU_GW_PE_01_POS,</src></hll>
				<hll><line>280</line><src>        HU_MON_PE_01_POS,</src></hll>
				<hll><line>281</line><src>    HU_NAVI_V2_POS_PE_POS,</src></hll>
				<hll><line>282</line><src>        ICSC_02_100ms_POS,</src></hll>
				<hll><line>283</line><src>    ICU_02_200ms_POS,</src></hll>
				<hll><line>284</line><src>        ICU_04_200ms_POS,</src></hll>
				<hll><line>285</line><src>        ICU_06_200ms_POS,</src></hll>
				<hll><line>286</line><src>        ICU_07_200ms_POS,</src></hll>
				<hll><line>287</line><src>        MDPS_01_10ms_POS,</src></hll>
				<hll><line>288</line><src>    MFSW_01_200ms_POS,</src></hll>
				<hll><line>289</line><src>        SAS_01_10ms_POS,</src></hll>
				<hll><line>290</line><src>    SBCM_AST_02_200ms_POS,</src></hll>
				<hll><line>291</line><src>        SBCM_DRV_01_200ms_POS,</src></hll>
				<hll><line>292</line><src>        SWRC_03_20ms_POS,</src></hll>
				<hll><line>293</line><src>        WHL_01_10ms_POS,</src></hll>
				<hll><line>294</line><src>        YRS_01_10ms_POS,</src></hll>
				<hll><line>295</line><src>        CHASSIS_0_NUM</src></hll>
				<hll><line>296</line><src>};</src></hll>
				<hll><line>297</line><src>extern char compiler_assert_CHASSIS_0_NUM_exceed_32[(CHASSIS_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>298</line><src></src></hll>
				<hll><line>299</line><src>/* Chassis CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>300</line><src>enum chassis_1_msgs {</src></hll>
				<hll><line>301</line><src>    ADAS_PRK_21_20ms_POS,</src></hll>
				<hll><line>302</line><src>        BCM_09_200ms_POS,</src></hll>
				<hll><line>303</line><src>    CLU_11_00ms_POS,</src></hll>
				<hll><line>304</line><src>    FR_CMR_02_100ms_POS,</src></hll>
				<hll><line>305</line><src>        HU_NAVI_V2_META_E_POS,  </src></hll>
				<hll><line>306</line><src>        HU_NAVI_V2_PROLONG_E_POS,</src></hll>
				<hll><line>307</line><src>        HU_NAVI_V2_PROSHORT_E_00_POS,</src></hll>
				<hll><line>308</line><src>        HU_NAVI_V2_PROSHORT_SUB_E_POS,</src></hll>
				<hll><line>309</line><src>        HU_NAVI_V2_SEG_E_POS,</src></hll>
				<hll><line>310</line><src>        HU_NAVI_V2_SEG_SUB_E_POS,</src></hll>
				<hll><line>311</line><src>        HU_NAVI_V2_STUB_E_POS,</src></hll>
				<hll><line>312</line><src>#if HU_USM == NOT_APPLIED</src></hll>
				<hll><line>313</line><src>    CLU_12_00ms_POS,</src></hll>
				<hll><line>314</line><src>    CLU_13_00ms_POS,</src></hll>
				<hll><line>315</line><src>#elif HU_USM == APPLIED</src></hll>
				<hll><line>316</line><src>        HU_USM_E_01_POS,</src></hll>
				<hll><line>317</line><src>        HU_USM_E_02_POS,</src></hll>
				<hll><line>318</line><src>        HU_USM_E_04_POS,</src></hll>
				<hll><line>319</line><src>        HU_USM_E_08_POS,</src></hll>
				<hll><line>320</line><src>#endif</src></hll>
				<hll><line>321</line><src>    MFSW_02_200ms_POS,</src></hll>
				<hll><line>322</line><src>    RR_C_RDR_03_50ms_POS,</src></hll>
				<hll><line>323</line><src>        SBCM_RL_01_200ms_POS,</src></hll>
				<hll><line>324</line><src>        SBCM_RR_01_200ms_POS,</src></hll>
				<hll><line>325</line><src>        HOD_01_100ms_POS,</src></hll>
				<hll><line>326</line><src>        ICU_08_200ms_POS,</src></hll>
				<hll><line>327</line><src>        IEB_01_10ms_POS,</src></hll>
				<hll><line>328</line><src>        CHASSIS_1_NUM</src></hll>
				<hll><line>329</line><src>};</src></hll>
				<hll><line>330</line><src>extern char compiler_assert_CHASSIS_1_NUM_exceed_32[(CHASSIS_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>331</line><src></src></hll>
				<hll><line>332</line><src>/* Front Camera CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>333</line><src>enum l_fr_cmr_0_msgs {</src></hll>
				<hll><line>334</line><src>    A_FR_CMR_Ctrl_01_10ms_POS,</src></hll>
				<hll><line>335</line><src>        A_FR_CMR_Genrl_01_30ms_POS,</src></hll>
				<hll><line>336</line><src>        A_FR_CMR_Ln_01_50ms_POS,</src></hll>
				<hll><line>337</line><src>        A_FR_CMR_Ln_02_50ms_POS,</src></hll>
				<hll><line>338</line><src>        A_FR_CMR_Ln_03_50ms_POS,</src></hll>
				<hll><line>339</line><src>    A_FR_CMR_Obj_01_30ms_POS,</src></hll>
				<hll><line>340</line><src>        A_FR_CMR_Obj_02_30ms_POS,</src></hll>
				<hll><line>341</line><src>        A_FR_CMR_Obj_03_30ms_POS,</src></hll>
				<hll><line>342</line><src>        A_FR_CMR_Obj_04_30ms_POS,</src></hll>
				<hll><line>343</line><src>        A_FR_CMR_Obj_05_30ms_POS,</src></hll>
				<hll><line>344</line><src>        A_FR_CMR_Obj_06_30ms_POS,</src></hll>
				<hll><line>345</line><src>        A_FR_CMR_Obj_07_30ms_POS,</src></hll>
				<hll><line>346</line><src>        A_FR_CMR_Obj_08_30ms_POS,</src></hll>
				<hll><line>347</line><src>        A_FR_CMR_Obj_09_30ms_POS,</src></hll>
				<hll><line>348</line><src>        A_FR_CMR_Obj_10_30ms_POS,</src></hll>
				<hll><line>349</line><src>        A_FR_CMR_Obj_11_30ms_POS,</src></hll>
				<hll><line>350</line><src>        A_FR_CMR_Obj_12_30ms_POS,</src></hll>
				<hll><line>351</line><src>        A_FR_CMR_Obj_13_30ms_POS,</src></hll>
				<hll><line>352</line><src>        A_FR_CMR_Obj_14_30ms_POS,</src></hll>
				<hll><line>353</line><src>        A_FR_CMR_Obj_15_30ms_POS,</src></hll>
				<hll><line>354</line><src>        A_FR_CMR_Obj_16_30ms_POS,</src></hll>
				<hll><line>355</line><src>        A_FR_CMR_Obj_17_30ms_POS,</src></hll>
				<hll><line>356</line><src>        A_FR_CMR_Obj_18_30ms_POS,</src></hll>
				<hll><line>357</line><src>        A_FR_CMR_Obj_19_30ms_POS,</src></hll>
				<hll><line>358</line><src>        A_FR_CMR_Obj_20_30ms_POS,</src></hll>
				<hll><line>359</line><src>    A_FR_CMR_FS_01_30ms_POS,</src></hll>
				<hll><line>360</line><src>        A_FR_CMR_FS_02_30ms_POS,</src></hll>
				<hll><line>361</line><src>        A_FR_CMR_FS_03_30ms_POS,</src></hll>
				<hll><line>362</line><src>        A_FR_CMR_FS_04_30ms_POS,</src></hll>
				<hll><line>363</line><src>        A_FR_CMR_FS_05_30ms_POS,</src></hll>
				<hll><line>364</line><src>        A_FR_CMR_FS_06_30ms_POS,</src></hll>
				<hll><line>365</line><src>    A_FR_CMR_FS_07_30ms_POS,</src></hll>
				<hll><line>366</line><src>    L_FR_CMR_0_NUM,</src></hll>
				<hll><line>367</line><src>};</src></hll>
				<hll><line>368</line><src>extern char compiler_assert_L_FR_CMR_0_NUM_exceed_32[(L_FR_CMR_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>369</line><src></src></hll>
				<hll><line>370</line><src>enum l_fr_cmr_1_msgs {    </src></hll>
				<hll><line>371</line><src>    A_FR_CMR_FS_08_30ms_POS,</src></hll>
				<hll><line>372</line><src>        A_FR_CMR_FS_09_30ms_POS,</src></hll>
				<hll><line>373</line><src>        A_FR_CMR_FS_10_30ms_POS,</src></hll>
				<hll><line>374</line><src>        A_FR_CMR_FS_11_30ms_POS,</src></hll>
				<hll><line>375</line><src>        A_FR_CMR_FS_12_30ms_POS,</src></hll>
				<hll><line>376</line><src>        A_FR_CMR_FS_13_30ms_POS,</src></hll>
				<hll><line>377</line><src>        A_FR_CMR_FS_14_30ms_POS,</src></hll>
				<hll><line>378</line><src>        A_FR_CMR_FS_15_30ms_POS,</src></hll>
				<hll><line>379</line><src>        A_FR_CMR_FS_16_30ms_POS,</src></hll>
				<hll><line>380</line><src>        A_FR_CMR_FS_17_30ms_POS,</src></hll>
				<hll><line>381</line><src>        A_FR_CMR_FS_18_30ms_POS,</src></hll>
				<hll><line>382</line><src>        A_FR_CMR_FS_19_30ms_POS,</src></hll>
				<hll><line>383</line><src>        A_FR_CMR_FS_20_30ms_POS,</src></hll>
				<hll><line>384</line><src>        A_FR_CMR_FS_21_30ms_POS,</src></hll>
				<hll><line>385</line><src>        A_FR_CMR_FS_22_30ms_POS,</src></hll>
				<hll><line>386</line><src>        A_FR_CMR_FS_23_30ms_POS,</src></hll>
				<hll><line>387</line><src>        A_FR_CMR_FS_24_30ms_POS,    </src></hll>
				<hll><line>388</line><src>    L_FR_CMR_1_NUM,</src></hll>
				<hll><line>389</line><src>};</src></hll>
				<hll><line>390</line><src>extern char compiler_assert_L_FR_CMR_1_NUM_exceed_32[(L_FR_CMR_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>391</line><src></src></hll>
				<hll><line>392</line><src>enum l_fr_cmr_2_msgs {</src></hll>
				<hll><line>393</line><src>    A_FR_CMR_PP_Genrl_01_50ms_POS,</src></hll>
				<hll><line>394</line><src>    A_FR_CMR_Ctrl_02_20ms_POS,</src></hll>
				<hll><line>395</line><src>        A_FR_CMR_PP_Ln_01_50ms_POS,</src></hll>
				<hll><line>396</line><src>        A_FR_CMR_PP_Ln_02_50ms_POS,</src></hll>
				<hll><line>397</line><src>    A_FR_CMR_RoadMrk_01_50ms_POS,</src></hll>
				<hll><line>398</line><src>    A_FR_CMR_RoadMrk_02_50ms_POS,</src></hll>
				<hll><line>399</line><src>    A_FR_CMR_RoadMrk_03_50ms_POS,</src></hll>
				<hll><line>400</line><src>    A_FR_CMR_RoadMrk_04_50ms_POS,</src></hll>
				<hll><line>401</line><src>    A_FR_CMR_RoadMrk_05_50ms_POS,</src></hll>
				<hll><line>402</line><src>    A_FR_CMR_TSR_01_50ms_POS,</src></hll>
				<hll><line>403</line><src>    A_FR_CMR_TSR_02_50ms_POS,    </src></hll>
				<hll><line>404</line><src>    A_FR_CMR_TSR_03_50ms_POS,</src></hll>
				<hll><line>405</line><src>    A_FR_CMR_TSR_04_50ms_POS,</src></hll>
				<hll><line>406</line><src>    A_FR_CMR_TSR_05_50ms_POS,</src></hll>
				<hll><line>407</line><src>    L_FR_CMR_2_NUM,</src></hll>
				<hll><line>408</line><src>};</src></hll>
				<hll><line>409</line><src>extern char compiler_assert_L_FR_CMR_2_NUM_exceed_32[(L_FR_CMR_2_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>410</line><src></src></hll>
				<hll><line>411</line><src>/* Front Radar CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>412</line><src></src></hll>
				<hll><line>413</line><src>enum l_fr_rdr_0_msgs {</src></hll>
				<hll><line>414</line><src>    A_FR_RDR_Genrl_01_50ms_POS,</src></hll>
				<hll><line>415</line><src>        A_FR_RDR_Genrl_02_50ms_POS,</src></hll>
				<hll><line>416</line><src>    A_FR_RDR_ODM_01_50ms_POS,</src></hll>
				<hll><line>417</line><src>    A_FR_RDR_Obj_01_50ms_POS,</src></hll>
				<hll><line>418</line><src>        A_FR_RDR_Obj_02_50ms_POS,</src></hll>
				<hll><line>419</line><src>        A_FR_RDR_Obj_03_50ms_POS,</src></hll>
				<hll><line>420</line><src>        A_FR_RDR_Obj_04_50ms_POS,</src></hll>
				<hll><line>421</line><src>        A_FR_RDR_Obj_05_50ms_POS,</src></hll>
				<hll><line>422</line><src>        A_FR_RDR_Obj_06_50ms_POS,</src></hll>
				<hll><line>423</line><src>        A_FR_RDR_Obj_07_50ms_POS,</src></hll>
				<hll><line>424</line><src>        A_FR_RDR_Obj_08_50ms_POS,</src></hll>
				<hll><line>425</line><src>        A_FR_RDR_Obj_09_50ms_POS,</src></hll>
				<hll><line>426</line><src>        A_FR_RDR_Obj_10_50ms_POS,</src></hll>
				<hll><line>427</line><src>        A_FR_RDR_Obj_11_50ms_POS,</src></hll>
				<hll><line>428</line><src>        A_FR_RDR_Obj_12_50ms_POS,</src></hll>
				<hll><line>429</line><src>        A_FR_RDR_Obj_13_50ms_POS,</src></hll>
				<hll><line>430</line><src>        A_FR_RDR_Obj_14_50ms_POS,</src></hll>
				<hll><line>431</line><src>        A_FR_RDR_Obj_15_50ms_POS,</src></hll>
				<hll><line>432</line><src>        A_FR_RDR_Obj_16_50ms_POS,</src></hll>
				<hll><line>433</line><src>        A_FR_RDR_Obj_17_50ms_POS,</src></hll>
				<hll><line>434</line><src>        A_FR_RDR_Obj_18_50ms_POS,</src></hll>
				<hll><line>435</line><src>        A_FR_RDR_Obj_19_50ms_POS,</src></hll>
				<hll><line>436</line><src>        A_FR_RDR_Obj_20_50ms_POS,</src></hll>
				<hll><line>437</line><src>        A_FR_RDR_Obj_21_50ms_POS,</src></hll>
				<hll><line>438</line><src>        A_FR_RDR_Obj_22_50ms_POS,</src></hll>
				<hll><line>439</line><src>        A_FR_RDR_Obj_23_50ms_POS,</src></hll>
				<hll><line>440</line><src>        A_FR_RDR_Obj_24_50ms_POS,</src></hll>
				<hll><line>441</line><src>        A_FR_RDR_Obj_25_50ms_POS,</src></hll>
				<hll><line>442</line><src>        A_FR_RDR_Obj_26_50ms_POS,</src></hll>
				<hll><line>443</line><src>        A_FR_RDR_Obj_27_50ms_POS,</src></hll>
				<hll><line>444</line><src>        A_FR_RDR_Obj_28_50ms_POS,</src></hll>
				<hll><line>445</line><src>        A_FR_RDR_Obj_29_50ms_POS,</src></hll>
				<hll><line>446</line><src>    L_FR_RDR_0_NUM,</src></hll>
				<hll><line>447</line><src>};</src></hll>
				<hll><line>448</line><src>extern char compiler_assert_L_FR_RDR_0_NUM_exceed_32[(L_FR_RDR_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>449</line><src></src></hll>
				<hll><line>450</line><src>enum l_fr_rdr_1_msgs {</src></hll>
				<hll><line>451</line><src>    A_FR_RDR_Obj_30_50ms_POS,</src></hll>
				<hll><line>452</line><src>        A_FR_RDR_Obj_31_50ms_POS,</src></hll>
				<hll><line>453</line><src>        A_FR_RDR_Obj_32_50ms_POS,</src></hll>
				<hll><line>454</line><src>    A_FR_RDR_FS_01_50ms_POS,</src></hll>
				<hll><line>455</line><src>        A_FR_RDR_FS_02_50ms_POS,</src></hll>
				<hll><line>456</line><src>        A_FR_RDR_FS_03_50ms_POS,</src></hll>
				<hll><line>457</line><src>        A_FR_RDR_FS_04_50ms_POS,</src></hll>
				<hll><line>458</line><src>        A_FR_RDR_FS_05_50ms_POS,</src></hll>
				<hll><line>459</line><src>    L_FR_RDR_1_NUM,</src></hll>
				<hll><line>460</line><src>};</src></hll>
				<hll><line>461</line><src>extern char compiler_assert_L_FR_RDR_1_NUM_exceed_32[(L_FR_RDR_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>462</line><src></src></hll>
				<hll><line>463</line><src>/* Front Corner Radar CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>464</line><src>enum l_fr_c_rdr_0_msgs {</src></hll>
				<hll><line>465</line><src>        A_FR_C_RDR_Genrl_01_50ms_POS,</src></hll>
				<hll><line>466</line><src>        A_FR_C_RDR_ODM_01_50ms_POS,</src></hll>
				<hll><line>467</line><src>        A_FR_C_RDR_Obj_01_50ms_POS,</src></hll>
				<hll><line>468</line><src>        A_FR_C_RDR_Obj_02_50ms_POS,</src></hll>
				<hll><line>469</line><src>        A_FR_C_RDR_Obj_03_50ms_POS,</src></hll>
				<hll><line>470</line><src>        A_FR_C_RDR_Obj_04_50ms_POS,</src></hll>
				<hll><line>471</line><src>        A_FR_C_RDR_Obj_05_50ms_POS,</src></hll>
				<hll><line>472</line><src>        A_FR_C_RDR_Obj_06_50ms_POS,</src></hll>
				<hll><line>473</line><src>        A_FR_C_RDR_Obj_07_50ms_POS,</src></hll>
				<hll><line>474</line><src>        A_FR_C_RDR_Obj_08_50ms_POS,</src></hll>
				<hll><line>475</line><src>        A_FR_C_RDR_Obj_09_50ms_POS,</src></hll>
				<hll><line>476</line><src>        A_FR_C_RDR_Obj_10_50ms_POS,</src></hll>
				<hll><line>477</line><src>        A_FR_C_RDR_Obj_11_50ms_POS,</src></hll>
				<hll><line>478</line><src>        A_FR_C_RDR_Obj_12_50ms_POS,</src></hll>
				<hll><line>479</line><src>        A_FR_C_RDR_Obj_13_50ms_POS,</src></hll>
				<hll><line>480</line><src>        A_FR_C_RDR_Obj_14_50ms_POS,</src></hll>
				<hll><line>481</line><src>        A_FR_C_RDR_Obj_15_50ms_POS,</src></hll>
				<hll><line>482</line><src>        A_FR_C_RDR_Obj_16_50ms_POS,</src></hll>
				<hll><line>483</line><src>        A_FR_C_RDR_Obj_17_50ms_POS,</src></hll>
				<hll><line>484</line><src>        A_FR_C_RDR_Obj_18_50ms_POS,</src></hll>
				<hll><line>485</line><src>        A_FR_C_RDR_Obj_19_50ms_POS,</src></hll>
				<hll><line>486</line><src>        A_FR_C_RDR_Obj_20_50ms_POS,</src></hll>
				<hll><line>487</line><src>        A_FR_C_RDR_Obj_21_50ms_POS,</src></hll>
				<hll><line>488</line><src>        A_FR_C_RDR_Obj_22_50ms_POS,</src></hll>
				<hll><line>489</line><src>        A_FR_C_RDR_Obj_23_50ms_POS,</src></hll>
				<hll><line>490</line><src>        A_FR_C_RDR_Obj_24_50ms_POS,</src></hll>
				<hll><line>491</line><src>        A_FR_C_RDR_Obj_25_50ms_POS,</src></hll>
				<hll><line>492</line><src>        A_FR_C_RDR_Obj_26_50ms_POS,</src></hll>
				<hll><line>493</line><src>        A_FR_C_RDR_Obj_27_50ms_POS,</src></hll>
				<hll><line>494</line><src>        A_FR_C_RDR_Obj_28_50ms_POS,</src></hll>
				<hll><line>495</line><src>        A_FR_C_RDR_Obj_29_50ms_POS,</src></hll>
				<hll><line>496</line><src>        A_FR_C_RDR_Obj_30_50ms_POS,</src></hll>
				<hll><line>497</line><src>    L_FR_C_RDR_0_NUM,</src></hll>
				<hll><line>498</line><src>};</src></hll>
				<hll><line>499</line><src>extern char compiler_assert_L_FR_C_RDR_0_NUM_exceed_32[(L_FR_C_RDR_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>500</line><src></src></hll>
				<hll><line>501</line><src>enum l_fr_c_rdr_1_msgs {</src></hll>
				<hll><line>502</line><src>    A_FR_C_RDR_LH_FS_01_50ms_POS,</src></hll>
				<hll><line>503</line><src>        A_FR_C_RDR_LH_FS_02_50ms_POS,</src></hll>
				<hll><line>504</line><src>        A_FR_C_RDR_LH_FS_03_50ms_POS,</src></hll>
				<hll><line>505</line><src>        A_FR_C_RDR_LH_FS_04_50ms_POS,</src></hll>
				<hll><line>506</line><src>        A_FR_C_RDR_LH_FS_05_50ms_POS,</src></hll>
				<hll><line>507</line><src>        A_FR_C_RDR_LH_FS_06_50ms_POS,</src></hll>
				<hll><line>508</line><src>        A_FR_C_RDR_LH_FS_07_50ms_POS,</src></hll>
				<hll><line>509</line><src>        A_FR_C_RDR_LH_FS_08_50ms_POS,</src></hll>
				<hll><line>510</line><src>        A_FR_C_RDR_RH_FS_01_50ms_POS,</src></hll>
				<hll><line>511</line><src>        A_FR_C_RDR_RH_FS_02_50ms_POS,</src></hll>
				<hll><line>512</line><src>        A_FR_C_RDR_RH_FS_03_50ms_POS,</src></hll>
				<hll><line>513</line><src>        A_FR_C_RDR_RH_FS_04_50ms_POS,</src></hll>
				<hll><line>514</line><src>        A_FR_C_RDR_RH_FS_05_50ms_POS,</src></hll>
				<hll><line>515</line><src>        A_FR_C_RDR_RH_FS_06_50ms_POS,</src></hll>
				<hll><line>516</line><src>        A_FR_C_RDR_RH_FS_07_50ms_POS,</src></hll>
				<hll><line>517</line><src>        A_FR_C_RDR_RH_FS_08_50ms_POS,</src></hll>
				<hll><line>518</line><src>    L_FR_C_RDR_1_NUM,</src></hll>
				<hll><line>519</line><src>};</src></hll>
				<hll><line>520</line><src>extern char compiler_assert_L_FR_C_RDR_1_NUM_exceed_32[(L_FR_C_RDR_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>521</line><src></src></hll>
				<hll><line>522</line><src>/* Forcing Recover */</src></hll>
				<hll><line>523</line><src>enum {</src></hll>
				<hll><line>524</line><src>    RECOVER_GROUP_0,</src></hll>
				<hll><line>525</line><src>    RECOVER_GROUP_1,</src></hll>
				<hll><line>526</line><src>    RECOVER_GROUP_2,</src></hll>
				<hll><line>527</line><src>    RECOVER_GROUP_3,</src></hll>
				<hll><line>528</line><src>    RECOVER_GROUP_4,</src></hll>
				<hll><line>529</line><src>    RECOVER_GROUP_5,</src></hll>
				<hll><line>530</line><src>    RECOVER_GROUP_6,</src></hll>
				<hll><line>531</line><src>    RECOVER_GROUP_7,</src></hll>
				<hll><line>532</line><src>    RECOVER_GROUP_NUM,</src></hll>
				<hll><line>533</line><src>};</src></hll>
				<hll><line>534</line><src>extern uint8 recover_mask[RECOVER_GROUP_NUM];</src></hll>
				<hll><line>535</line><src></src></hll>
				<hll><line>536</line><src>/* Recover group 0 */</src></hll>
				<hll><line>537</line><src>enum {</src></hll>
				<hll><line>538</line><src>    VOL_HIGH,</src></hll>
				<hll><line>539</line><src>    VOL_LOW,</src></hll>
				<hll><line>540</line><src>    ECAN_BUSOFF,</src></hll>
				<hll><line>541</line><src>    ACAN_BUSOFF,</src></hll>
				<hll><line>542</line><src>    GROUP_0_NUM,</src></hll>
				<hll><line>543</line><src>};</src></hll>
				<hll><line>544</line><src>extern char compiler_assert_GROUP_0_exceed_8[(GROUP_0_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>545</line><src></src></hll>
				<hll><line>546</line><src>/* Recover group 1 */</src></hll>
				<hll><line>547</line><src>enum {</src></hll>
				<hll><line>548</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>549</line><src>    ABS_ESC_TIMEOUT,</src></hll>
				<hll><line>550</line><src>    VCU_HCU_TIMEOUT,</src></hll>
				<hll><line>551</line><src>    BCM_TIMEOUT,</src></hll>
				<hll><line>552</line><src>    CLU_TIMEOUT,</src></hll>
				<hll><line>553</line><src>    EMS_TIMEOUT,</src></hll>
				<hll><line>554</line><src>    ESC_TIMEOUT,</src></hll>
				<hll><line>555</line><src>    FR_CMR_TIMEOUT,</src></hll>
				<hll><line>556</line><src>    FR_RDR_TIMEOUT,</src></hll>
				<hll><line>557</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>558</line><src>    CGW1_TIMEOUT,</src></hll>
				<hll><line>559</line><src>    CGW2_TIMEOUT,</src></hll>
				<hll><line>560</line><src>    CGW8_TIMEOUT,</src></hll>
				<hll><line>561</line><src>    CGW_PC4_TIMEOUT,</src></hll>
				<hll><line>562</line><src>    CGW_PC5_TIMEOUT,</src></hll>
				<hll><line>563</line><src>    CLU11_TIMEOUT,</src></hll>
				<hll><line>564</line><src>    CLU13_TIMEOUT,</src></hll>
				<hll><line>565</line><src>    EMS12_TIMEOUT,</src></hll>
				<hll><line>566</line><src>#endif /* CCAN */</src></hll>
				<hll><line>567</line><src>    GROUP_1_NUM,</src></hll>
				<hll><line>568</line><src>};</src></hll>
				<hll><line>569</line><src>extern char compiler_assert_GROUP_1_exceed_8[(GROUP_1_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>570</line><src></src></hll>
				<hll><line>571</line><src>/* Recover group 2 */</src></hll>
				<hll><line>572</line><src>enum {</src></hll>
				<hll><line>573</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>574</line><src>    HU_CLU_PE_TIMEOUT,</src></hll>
				<hll><line>575</line><src>    HU_GW_PE_TIMEOUT,</src></hll>
				<hll><line>576</line><src>    HU_MON_PE_TIMEOUT,</src></hll>
				<hll><line>577</line><src>    HU_NAVI_V2_POS_PE_TIMEOUT,</src></hll>
				<hll><line>578</line><src>    ICSC_TIMEOUT,</src></hll>
				<hll><line>579</line><src>    ICU_TIMEOUT,</src></hll>
				<hll><line>580</line><src>    MDPS_TIMEOUT,</src></hll>
				<hll><line>581</line><src>    MFSW_TIMEOUT,</src></hll>
				<hll><line>582</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>583</line><src>    EMS16_TIMEOUT,</src></hll>
				<hll><line>584</line><src>    ESP12_TIMEOUT,</src></hll>
				<hll><line>585</line><src>    HU_CLU_PE_05_TIMEOUT,</src></hll>
				<hll><line>586</line><src>    HU_GW_PE_01_TIMEOUT,</src></hll>
				<hll><line>587</line><src>    HU_MON_PE_01_TIMEOUT,</src></hll>
				<hll><line>588</line><src>    MDPS11_TIMEOUT,</src></hll>
				<hll><line>589</line><src>    MDPS12_TIMEOUT,</src></hll>
				<hll><line>590</line><src>    NAVI_V2_POS_E_POS_TIMEOUT,</src></hll>
				<hll><line>591</line><src>#endif /* CCAN */</src></hll>
				<hll><line>592</line><src>    GROUP_2_NUM,</src></hll>
				<hll><line>593</line><src>};</src></hll>
				<hll><line>594</line><src>extern char compiler_assert_GROUP_2_exceed_8[(GROUP_2_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>595</line><src></src></hll>
				<hll><line>596</line><src>/* Recover group 3 */</src></hll>
				<hll><line>597</line><src>enum {</src></hll>
				<hll><line>598</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>599</line><src>    RR_C_RDR_TIMEOUT,</src></hll>
				<hll><line>600</line><src>    SAS_TIMEOUT,</src></hll>
				<hll><line>601</line><src>    SWRC_TIMEOUT,</src></hll>
				<hll><line>602</line><src>    TCU_TIMEOUT,</src></hll>
				<hll><line>603</line><src>    WHL_TIMEOUT,</src></hll>
				<hll><line>604</line><src>    YRS_TIMEOUT,</src></hll>
				<hll><line>605</line><src>    SBCM_TIMEOUT,</src></hll>
				<hll><line>606</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>607</line><src>    P_STS_TIMEOUT,</src></hll>
				<hll><line>608</line><src>    RR_C_RDR_02_TIMEOUT,</src></hll>
				<hll><line>609</line><src>    SAS11_TIMEOUT,</src></hll>
				<hll><line>610</line><src>    TCS11_TIMEOUT,</src></hll>
				<hll><line>611</line><src>    TCS13_TIMEOUT,</src></hll>
				<hll><line>612</line><src>    VSM11_TIMEOUT,</src></hll>
				<hll><line>613</line><src>    WHL_SPD11_TIMEOUT,</src></hll>
				<hll><line>614</line><src>#endif /* CCAN */</src></hll>
				<hll><line>615</line><src>    GROUP_3_NUM,</src></hll>
				<hll><line>616</line><src>};</src></hll>
				<hll><line>617</line><src>extern char compiler_assert_GROUP_3_exceed_8[(GROUP_3_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>618</line><src></src></hll>
				<hll><line>619</line><src>/* Recover group 4 */</src></hll>
				<hll><line>620</line><src>enum {</src></hll>
				<hll><line>621</line><src>    L_FR_CMR_TIMEOUT,</src></hll>
				<hll><line>622</line><src>    L_FR_RDR_TIMEOUT,</src></hll>
				<hll><line>623</line><src>    L_FR_C_RDR_TIMEOUT,</src></hll>
				<hll><line>624</line><src>    GROUP_4_NUM,</src></hll>
				<hll><line>625</line><src>};</src></hll>
				<hll><line>626</line><src>extern char compiler_assert_GROUP_4_exceed_8[(GROUP_4_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>627</line><src></src></hll>
				<hll><line>628</line><src>/* Recover group 5 */</src></hll>
				<hll><line>629</line><src>enum {</src></hll>
				<hll><line>630</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>631</line><src>    CLU_INVALID_SIGNAL,</src></hll>
				<hll><line>632</line><src>    ESC_INVALID_SIGNAL,</src></hll>
				<hll><line>633</line><src>    MDPS_INVALID_SIGNAL,</src></hll>
				<hll><line>634</line><src>    SAS_INVALID_SIGNAL,</src></hll>
				<hll><line>635</line><src>    EMS_INVALID_SIGNAL,</src></hll>
				<hll><line>636</line><src>    TCU_INVALID_SIGNAL,</src></hll>
				<hll><line>637</line><src>    YRS_INVALID_SIGNAL,</src></hll>
				<hll><line>638</line><src>    SWRC_INVALID_SIGNAL,</src></hll>
				<hll><line>639</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>640</line><src>    CGW_INVALID_SIGNAL,</src></hll>
				<hll><line>641</line><src>    CLU_INVALID_SIGNAL,</src></hll>
				<hll><line>642</line><src>    ESC_INVALID_SIGNAL,</src></hll>
				<hll><line>643</line><src>    MDPS_INVALID_SIGNAL,</src></hll>
				<hll><line>644</line><src>    SAS_INVALID_SIGNAL,</src></hll>
				<hll><line>645</line><src>    EMS_INVALID_SIGNAL,</src></hll>
				<hll><line>646</line><src>    TCU_INVALID_SIGNAL,</src></hll>
				<hll><line>647</line><src>    NAVI_INVALID_SIGNAL,</src></hll>
				<hll><line>648</line><src>#endif /* CCAN */</src></hll>
				<hll><line>649</line><src>    GROUP_5_NUM,</src></hll>
				<hll><line>650</line><src>};</src></hll>
				<hll><line>651</line><src>extern char compiler_assert_GROUP_5_exceed_8[(GROUP_5_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>652</line><src></src></hll>
				<hll><line>653</line><src>/* Recover group 6 */</src></hll>
				<hll><line>654</line><src>enum {</src></hll>
				<hll><line>655</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>656</line><src>    VCU_HCU_INVALID_SIGNAL,</src></hll>
				<hll><line>657</line><src>    ICSC_INVALID_SIGNAL,</src></hll>
				<hll><line>658</line><src>    ICU_INVALID_SIGNAL,</src></hll>
				<hll><line>659</line><src>    NAVI_INVALID_SIGNAL,</src></hll>
				<hll><line>660</line><src>    FR_CMR_INVALID_SIGNAL,</src></hll>
				<hll><line>661</line><src>    FR_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>662</line><src>    FR_C_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>663</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>664</line><src>    FR_CMR_INVALID_SIGNAL,</src></hll>
				<hll><line>665</line><src>    FR_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>666</line><src>    FR_C_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>667</line><src>    RESERVED2,</src></hll>
				<hll><line>668</line><src>    RESERVED3,</src></hll>
				<hll><line>669</line><src>    RESERVED4,</src></hll>
				<hll><line>670</line><src>    RESERVED5,</src></hll>
				<hll><line>671</line><src>    RESERVED6,</src></hll>
				<hll><line>672</line><src>#endif /* CCAN */</src></hll>
				<hll><line>673</line><src>    GROUP_6_NUM,</src></hll>
				<hll><line>674</line><src>};</src></hll>
				<hll><line>675</line><src>extern char compiler_assert_GROUP_6_exceed_8[(GROUP_6_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>676</line><src></src></hll>
				<hll><line>677</line><src>/* Recover group 7 */</src></hll>
				<hll><line>678</line><src>enum {</src></hll>
				<hll><line>679</line><src>    GROUP_7_NUM,</src></hll>
				<hll><line>680</line><src>};</src></hll>
				<hll><line>681</line><src>extern char compiler_assert_GROUP_7_exceed_8[(GROUP_7_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>682</line><src></src></hll>
				<hll><line>683</line><src></src></hll>
				<hll><line>684</line><src>/* Failsafe */</src></hll>
				<hll><line>685</line><src>extern struct internal_error_info int_err_info;</src></hll>
				<hll><line>686</line><src>extern volatile struct reference_signal ref_sig;</src></hll>
				<hll><line>687</line><src>extern uint16 vol_grp[VOL_GRP_NUM];</src></hll>
				<hll><line>688</line><src>extern boolean internal_sw_fault;</src></hll>
				<hll><line>689</line><src>extern boolean internal_hw_fault;</src></hll>
				<hll><line>690</line><src>extern uint32 can_timeout_fault[MSG_GRP_NUM];</src></hll>
				<hll><line>691</line><src>extern boolean clear_dtc;</src></hll>
				<hll><line>692</line><src></src></hll>
				<hll><line>693</line><src>void FS_Init(void);</src></hll>
				<hll><line>694</line><src>void FS_MasterLoop(void);</src></hll>
				<hll><line>695</line><src>void update_inhibit_info(struct inhibit_info new);</src></hll>
				<hll><line>696</line><src>void store_in_nvm(void);</src></hll>
				<hll><line>697</line><src>struct precondition *get_precond_ptr(void);</src></hll>
				<hll><line>698</line><src>struct inhibit_info *get_inhibit_ptr(void);</src></hll>
				<hll><line>699</line><src>boolean Get_NAVI_Option(void);</src></hll>
				<hll><line>700</line><src>boolean Get_HDA2_Option(void);</src></hll>
				<hll><line>701</line><src>boolean Get_BCA_Option(void);</src></hll>
				<hll><line>702</line><src>boolean Get_SEA_Option(void);</src></hll>
				<hll><line>703</line><src>boolean Get_RCCW_Option(void);</src></hll>
				<hll><line>704</line><src></src></hll>
				<hll><line>705</line><src></src></hll>
				<hll><line>706</line><src>static inline boolean is_timeout(uint8 msg_grp, uint8 pos)</src></hll>
				<hll><line>707</line><src>{</src></hll>
				<hll><cov>ok</cov><line>708</line><src>    return !!(can_timeout_fault[msg_grp] &amp; BIT(pos));</src></hll>
				<asm><cov>ok</cov><addr>P:80004142</addr><code>1040003B</code><mnemonic>mov       d1,#0x400</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004146</addr><code>FC58FF61</code><mnemonic>fcall     0x800039F6</mnemonic><comment>.cocofun_51</comment></asm>
				<asm><cov>ok</cov><addr>P:8000414A</addr><code>CF54</code><mnemonic>ld16.w    d15,[a12]</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800041A2</addr><code>C554</code><mnemonic>ld16.w    d5,[a12]</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800041A8</addr><code>3001007B</code><mnemonic>movh      d3,#0x10</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004220</addr><code>C154</code><mnemonic>ld16.w    d1,[a12]</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004226</addr><code>0010007B</code><mnemonic>movh      d0,#0x100</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004286</addr><code>C154</code><mnemonic>ld16.w    d1,[a12]</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000428C</addr><code>0200007B</code><mnemonic>movh      d0,#0x2000</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042EA</addr><code>CF54</code><mnemonic>ld16.w    d15,[a12]</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042EC</addr><code>0080007B</code><mnemonic>movh      d0,#0x800</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004348</addr><code>0A08CD49</code><mnemonic>lea       a13,[a12]0x8</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000434C</addr><code>D054</code><mnemonic>ld16.w    d0,[a13]</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004390</addr><code>D054</code><mnemonic>ld16.w    d0,[a13]</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800043CE</addr><code>C34C</code><mnemonic>ld16.w    d15,[a12]0x0C</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\SWC_Failsafe.h" type="multiple">
				<hll><line>709</line><src>}</src></hll>
				<hll><line>710</line><src></src></hll>
				<hll><line>711</line><src>static inline boolean internal_error_occurred(void)</src></hll>
				<hll><line>712</line><src>{</src></hll>
				<hll><line>713</line><src>    return !!(int_err_info.hw_err_cnt &gt; ERR_CNT_THR || int_err_info.sw_err_cnt &gt; ERR_CNT_THR);</src></hll>
				<hll><line>714</line><src>}</src></hll>
				<hll><line>715</line><src></src></hll>
				<hll><line>716</line><src></src></hll>
				<hll><line>717</line><src>/* SWC_ISR */</src></hll>
				<hll><line>718</line><src>extern volatile uint32 e2e_err_flags[MSG_GRP_NUM];</src></hll>
				<hll><line>719</line><src>extern volatile uint32 msg_received_flags[MSG_GRP_NUM]; </src></hll>
				<hll><line>720</line><src>extern volatile uint32 msg_received_bus[MSG_GRP_NUM];</src></hll>
				<hll><line>721</line><src></src></hll>
				<hll><line>722</line><src>static inline boolean is_updated(uint8 msg_grp, uint8 pos)</src></hll>
				<hll><line>723</line><src>{</src></hll>
				<hll><cov>ok</cov><line>724</line><src>    return !!(msg_received_flags[msg_grp] &amp; BIT(pos));</src></hll>
				<asm><cov>ok</cov><addr>P:8000415E</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004160</addr><code>FC41FF61</code><mnemonic>fcall     0x800039E2</mnemonic><comment>.cocofun_49</comment></asm>
				<asm><cov>ok</cov><addr>P:80004164</addr><code>1F26</code><mnemonic>and16     d15,d1</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800041D8</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic><comment>p,#36868</comment></asm>
				<asm><cov>ok</cov><addr>P:800041DC</addr><code>20382719</code><mnemonic>ld.w      d7,[a2]0xB8</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800041E2</addr><code>7326</code><mnemonic>and16     d3,d7</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004244</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004248</addr><code>20384119</code><mnemonic>ld.w      d1,[a4]0xB8</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000424E</addr><code>0126</code><mnemonic>and16     d1,d0</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042AA</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042AE</addr><code>20384119</code><mnemonic>ld.w      d1,[a4]0xB8</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042B4</addr><code>0126</code><mnemonic>and16     d1,d0</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:800042F8</addr><code>0F26</code><mnemonic>and16     d15,d0</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\ASW\Failsafe\SWC_Failsafe.h" type="multiple">
				<hll><line>725</line><src>}</src></hll>
				<hll><line>726</line><src></src></hll>
				<hll><line>727</line><src>static inline boolean is_e2e_err(uint8 msg_grp, uint8 pos)</src></hll>
				<hll><line>728</line><src>{</src></hll>
				<hll><cov>ok</cov><line>729</line><src>    return !!(e2e_err_flags[msg_grp] &amp; BIT(pos));</src></hll>
				<asm><cov>ok</cov><addr>P:80004154</addr><code>1F26</code><mnemonic>and16     d15,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004168</addr><code>2F54</code><mnemonic>ld16.w    d15,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000416A</addr><code>F126</code><mnemonic>and16     d1,d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004252</addr><code>2154</code><mnemonic>ld16.w    d1,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004254</addr><code>1026</code><mnemonic>and16     d0,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800042B8</addr><code>2154</code><mnemonic>ld16.w    d1,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800042BA</addr><code>1026</code><mnemonic>and16     d0,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800042FC</addr><code>FB53FF61</code><mnemonic>fcall     0x800039A2</mnemonic><comment>.cocofun_43</comment></asm>
				<asm><cov>never</cov><addr>P:80004300</addr><code>0F26</code><mnemonic>and16     d15,d0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004302</addr><code>F2200F8B</code><mnemonic>ne        d15,d15,#0x0</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004308</addr><code>FB4DFF61</code><mnemonic>fcall     0x800039A2</mnemonic><comment>.cocofun_43</comment></asm>
				<asm><cov>ok</cov><addr>P:8000430C</addr><code>F026</code><mnemonic>and16     d0,d15</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:8000430E</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004312</addr><code>5220008B</code><mnemonic>ne        d5,d0,#0x0</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004316</addr><code>307244D9</code><mnemonic>lea       a4,[a4]0x4F2</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004312</addr><code>5220008B</code><mnemonic>ne        d5,d0,#0x0</mnemonic></asm>
				<asm><cov>ok</cov><addr>P:80004316</addr><code>307244D9</code><mnemonic>lea       a4,[a4]0x4F2</mnemonic></asm>
			</mixed>
		</List.EXPORT>
	</listing>
</TRACE32>

<?xml version="1.0" encoding="iso-8859-1" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="t32transform.xsl"?>
<TRACE32 file="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Gen\20210610_TRACE32_20_02\Failsafe-TestSpec_RS4_0104\Report\DCU15_FAILSAFE_001_BAT\MANDO_FailSafe_Integration\prost_cstart\func-p-80005852-80005867.xml">
	<coverage>
		<COVerage.EXPORT.ListLine ts="1623300795" t32ver="R.2020.09.000128638" t32pv="TRICORE" cpu="TC397XE" metric="object">
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\Rte_SWC_Diag</tree>
				<cov>partial</cov>
				<exec metric="object">50.847%</exec>
				<branches>-</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>0</never>
				<bytes>590</bytes>
				<bytesok>300</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_HWFailure</tree>
				<cov>partial</cov>
				<exec metric="object">16.831%</exec>
				<branches>10.000%</branches>
				<ok>0</ok>
				<taken>1</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>202</bytes>
				<bytesok>34</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\SWC_Failsafe</tree>
				<cov>partial</cov>
				<exec metric="object">67.441%</exec>
				<branches>-</branches>
				<ok>4</ok>
				<taken>11</taken>
				<nottaken>21</nottaken>
				<bytes>1548</bytes>
				<bytesok>1044</bytesok>
			</module>
			<module>
				<addrFrom>P:80002C38</addrFrom>
				<addrTo>P:80002DC9</addrTo>
				<tree>\\MANDO_FailSafe_Integration\FS_BatteryVoltage</tree>
				<cov>partial</cov>
				<exec metric="object">83.582%</exec>
				<branches>68.750%</branches>
				<ok>12</ok>
				<taken>3</taken>
				<nottaken>6</nottaken>
				<never>3</never>
				<bytes>402</bytes>
				<bytesok>336</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_CANBusOff</tree>
				<cov>partial</cov>
				<exec metric="object">45.736%</exec>
				<branches>1.215%</branches>
				<ok>0</ok>
				<taken>6</taken>
				<nottaken>2</nottaken>
				<never>321</never>
				<bytes>258</bytes>
				<bytesok>118</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_CANTimeout</tree>
				<cov>partial</cov>
				<exec metric="object">37.582%</exec>
				<branches>16.413%</branches>
				<ok>8</ok>
				<taken>82</taken>
				<nottaken>10</nottaken>
				<never>229</never>
				<bytes>2432</bytes>
				<bytesok>914</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_InvalidSignal</tree>
				<cov>partial</cov>
				<exec metric="object">54.381%</exec>
				<branches>34.650%</branches>
				<ok>3</ok>
				<taken>130</taken>
				<nottaken>92</nottaken>
				<never>104</never>
				<bytes>5866</bytes>
				<bytesok>3190</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\FS_SWFailure</tree>
				<cov>partial</cov>
				<exec metric="object">36.224%</exec>
				<branches>1.215%</branches>
				<ok>0</ok>
				<taken>7</taken>
				<nottaken>1</nottaken>
				<never>321</never>
				<bytes>392</bytes>
				<bytesok>142</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>5</never>
				<bytes>806</bytes>
				<bytesok>0</bytesok>
				<function>
					<addrFrom>P:80005852</addrFrom>
					<addrTo>P:80005867</addrTo>
					<tree uid="p-80005852-80005867">\\MANDO_FailSafe_Integration\prost_cstart\__init_sp</tree>
					<cov>never</cov>
					<exec metric="object">0.000%</exec>
					<branches>-</branches>
					<ok>0</ok>
					<taken>0</taken>
					<nottaken>0</nottaken>
					<never>0</never>
					<bytes>22</bytes>
					<bytesok>0</bytesok>
					<line>
						<addrFrom>P:80005852</addrFrom>
						<addrTo>P:80005861</addrTo>
						<tree>prost_cstart.c \196--248</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005862</addrFrom>
						<addrTo>P:80005863</addrTo>
						<tree>prost_cstart.c \249--250</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005864</addrFrom>
						<addrTo>P:80005867</addrTo>
						<tree>prost_cstart.c \251--252</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<total>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>22</bytes>
						<bytesok>0</bytesok>
					</total>
				</function>
				<total>
					<cov>never</cov>
					<exec metric="object">0.000%</exec>
					<branches>-</branches>
					<ok>0</ok>
					<taken>0</taken>
					<nottaken>0</nottaken>
					<never>0</never>
					<bytes>22</bytes>
					<bytesok>0</bytesok>
				</total>
			</module>
			<module>
				<addrFrom>P:80005B2A</addrFrom>
				<addrTo>P:80005CBB</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc1</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>402</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:80005CBC</addrFrom>
				<addrTo>P:80005E4D</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc2</tree>
				<cov>partial</cov>
				<exec metric="object">79.104%</exec>
				<branches>75.000%</branches>
				<ok>2</ok>
				<taken>1</taken>
				<nottaken>1</nottaken>
				<never>0</never>
				<bytes>402</bytes>
				<bytesok>318</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc3</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc4</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\MANDO_FailSafe_Integration\prost_main</tree>
				<cov>partial</cov>
				<exec metric="object">24.691%</exec>
				<branches>25.000%</branches>
				<ok>1</ok>
				<taken>1</taken>
				<nottaken>1</nottaken>
				<never>5</never>
				<bytes>324</bytes>
				<bytesok>80</bytesok>
			</module>
			<module>
				<addrFrom>P:80006180</addrFrom>
				<addrTo>P:80006315</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_cstart_tc5</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:80006456</addrFrom>
				<addrTo>P:80006485</addrTo>
				<tree>\\MANDO_FailSafe_Integration\prost_stubs</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>2</never>
				<bytes>48</bytes>
				<bytesok>0</bytesok>
			</module>
			<total>
				<cov>partial</cov>
				<exec metric="object">43.492%</exec>
				<branches>15.740%</branches>
				<ok>30</ok>
				<taken>242</taken>
				<nottaken>134</nottaken>
				<never>979</never>
				<bytes>14890</bytes>
				<bytesok>6476</bytesok>
			</total>
		</COVerage.EXPORT.ListLine>
	</coverage>
	<marker>
		<BookMark.EXPORT ts="1623300795" t32ver="R.2020.09.000128638" t32pv="TRICORE" cpu="TC397XE">
		</BookMark.EXPORT>
	</marker>
	<listing>
		<List.EXPORT ts="1623300795" t32ver="R.2020.09.000128638" t32pv="TRICORE" order="source">
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>196</line><src>}</src></hll>
				<hll><line>197</line><src>#pragma optimize restore</src></hll>
				<hll><line>198</line><src>#pragma section code restore</src></hll>
				<hll><line>199</line><src></src></hll>
				<hll><line>200</line><src>/*********************************************************************************</src></hll>
				<hll><line>201</line><src> * EBU boot configuration</src></hll>
				<hll><line>202</line><src> *********************************************************************************/</src></hll>
				<hll><line>203</line><src>#if defined EBU_BOOTCFG &amp;&amp; defined __EBU_BOOTCFG_VALUE</src></hll>
				<hll><line>204</line><src>#if __EBU_BOOTCFG_INIT</src></hll>
				<hll><line>205</line><src>#pragma section farrom libc.ebu_bootcfg</src></hll>
				<hll><line>206</line><src>const int __far _EBU_BOOTCFG __protect__  = __EBU_BOOTCFG_VALUE; /* locate at RESET + EBU_ALIGN */</src></hll>
				<hll><line>207</line><src>#pragma section farrom restore</src></hll>
				<hll><line>208</line><src>#endif</src></hll>
				<hll><line>209</line><src>#endif</src></hll>
				<hll><line>210</line><src></src></hll>
				<hll><line>211</line><src>/*********************************************************************************</src></hll>
				<hll><line>212</line><src> * initialize stackpointer</src></hll>
				<hll><line>213</line><src> *********************************************************************************/</src></hll>
				<hll><line>214</line><src></src></hll>
				<hll><line>215</line><src>static void __noinline__ __noreturn__ __jump__ __init_sp( void )</src></hll>
				<hll><line>216</line><src>{</src></hll>
				<hll><line>217</line><src>        /* The initialization of the stackpointer is done in a seperate function, </src></hll>
				<hll><line>218</line><src>           because it must be executed in a function which has no stack use.</src></hll>
				<hll><line>219</line><src>           </src></hll>
				<hll><line>220</line><src>           When a function uses a stack it will be updated at the start of the </src></hll>
				<hll><line>221</line><src>           function. In this function, however, the stackpointer has an irrelevant</src></hll>
				<hll><line>222</line><src>           value at the start of the function. A starting value for the stackpointer</src></hll>
				<hll><line>223</line><src>           is determined and written in this function. The update to the </src></hll>
				<hll><line>224</line><src>           stackpointer at the start of the function would therefore be undone.</src></hll>
				<hll><line>225</line><src>         */</src></hll>
				<hll><line>226</line><src>         </src></hll>
				<hll><line>227</line><src>        /* </src></hll>
				<hll><line>228</line><src>         * CPU_TC.033 workaround:</src></hll>
				<hll><line>229</line><src>         * The stack pointers are aligned to quad-word boundary to workaround these </src></hll>
				<hll><line>230</line><src>         * functional problems CPU_TC.033.</src></hll>
				<hll><line>231</line><src>         * Also the C compiler workaround for the appropriate CPU function problem</src></hll>
				<hll><line>232</line><src>         * need to be enabled with --silicon-bug=cpu-tc033, to align circular</src></hll>
				<hll><line>233</line><src>         * buffers on a quad-word boundary and to size all stack frames to an integral </src></hll>
				<hll><line>234</line><src>         * number of quad-words.</src></hll>
				<hll><line>235</line><src>         */</src></hll>
				<hll><line>236</line><src>#if      __CPU_TC033_INITIAL__</src></hll>
				<hll><line>237</line><src># define STACK_ALIGN    0xfffffff0</src></hll>
				<hll><line>238</line><src>#else</src></hll>
				<hll><line>239</line><src># define STACK_ALIGN    0xfffffff8</src></hll>
				<hll><line>240</line><src>#endif</src></hll>
				<hll><line>241</line><src></src></hll>
				<hll><line>242</line><src>        /* </src></hll>
				<hll><line>243</line><src>         * Load user stack pointer.</src></hll>
				<hll><line>244</line><src>         * Disable this if not started from RESET vector. (E.g.</src></hll>
				<hll><line>245</line><src>         * ROM monitors require to keep in control of vectors)</src></hll>
				<hll><line>246</line><src>         */</src></hll>
				<hll><line>247</line><src>#if  __USP_INIT</src></hll>
				<hll><cov>never</cov><line>248</line><src>        void * sp = (void *)((unsigned int)(_lc_ue_ustack) &amp; STACK_ALIGN);</src></hll>
				<asm><cov>never</cov><addr>P:80005852</addr><code>F7001091</code><label>__init_sp:                                                                                                                                                                                                                                                      </label><mnemonic>movh.a    a15,#0x7001</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005856</addr><code>0900FFD9</code><mnemonic>lea       a15,[a15]-0x7000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000585A</addr><code>FF80</code><mnemonic>mov16.d   d15,a15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000585C</addr><code>F0030FB7</code><mnemonic>insert    d15,d15,#0x0,0x0,#0x3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005860</addr><code>FF60</code><mnemonic>mov16.a   a15,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>249</line><src>        </src></hll>
				<hll><cov>never</cov><line>250</line><src>        __set_sp( sp );</src></hll>
				<asm><cov>never</cov><addr>P:80005862</addr><code>FA40</code><mnemonic>mov16.aa  a10,a15</mnemonic></asm>
			</mixed>
			<mixed module="\\MANDO_FailSafe_Integration\prost_cstart" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\MANDO_FailSafe_Integration\Target_SW\prost_cstart.c">
				<hll><line>251</line><src>#endif</src></hll>
				<hll><cov>never</cov><line>252</line><src>        _start();</src></hll>
				<asm><cov>never</cov><addr>P:80005864</addr><code>002A001D</code><mnemonic>j         0x800058B8</mnemonic><comment>_start</comment></asm>
			</mixed>
		</List.EXPORT>
	</listing>
</TRACE32>

<?xml version="1.0" encoding="iso-8859-1" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="t32transform.xsl"?>
<TRACE32 file="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Gen\20210524_TRACE32_20_02\Failsafe-TestSpec_RS4_Temp4_210518\Report\Failsafe_v28_UID_001\Test\FS_InvalidSignal\func-p-8000458c-800049bb.xml">
	<coverage>
		<COVerage.EXPORT.ListLine ts="1621823166" t32ver="R.2020.09.000128638" t32pv="TRICORE" cpu="TC397XE" metric="object">
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\Rte_SWC_Diag</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>-</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>0</never>
				<bytes>638</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\FS_HWFailure</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>16</never>
				<bytes>236</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\SWC_Failsafe</tree>
				<cov>partial</cov>
				<exec metric="object">0.600%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>16</never>
				<bytes>1666</bytes>
				<bytesok>10</bytesok>
			</module>
			<module>
				<addrFrom>P:80002DEA</addrFrom>
				<addrTo>P:80002F83</addrTo>
				<tree>\\Test\FS_BatteryVoltage</tree>
				<cov>partial</cov>
				<exec metric="object">59.512%</exec>
				<branches>52.000%</branches>
				<ok>8</ok>
				<taken>3</taken>
				<nottaken>7</nottaken>
				<never>7</never>
				<bytes>410</bytes>
				<bytesok>244</bytesok>
			</module>
			<module>
				<addrFrom>P:80002F84</addrFrom>
				<addrTo>P:800030BB</addrTo>
				<tree>\\Test\FS_CANBusOff</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>17</never>
				<bytes>312</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\FS_CANTimeout</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>350</never>
				<bytes>2458</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\FS_InvalidSignal</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>350</never>
				<bytes>6758</bytes>
				<bytesok>0</bytesok>
				<function>
					<addrFrom>P:8000458C</addrFrom>
					<addrTo>P:800049BB</addrTo>
					<tree uid="p-8000458c-800049bb">\\Test\FS_InvalidSignal\FS_UpdateInfo_InvalidSignal</tree>
					<cov>never</cov>
					<exec metric="object">0.000%</exec>
					<branches>0.000%</branches>
					<ok>0</ok>
					<taken>0</taken>
					<nottaken>0</nottaken>
					<never>66</never>
					<bytes>1072</bytes>
					<bytesok>0</bytesok>
					<line>
						<addrFrom>P:8000469A</addrFrom>
						<addrTo>P:8000469D</addrTo>
						<tree>FS_InvalidSignal.c \722--725</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000469E</addrFrom>
						<addrTo>P:800046A1</addrTo>
						<tree>FS_InvalidSignal.c \726--726</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800046A4</addrFrom>
						<addrTo>P:800046A7</addrTo>
						<tree>FS_InvalidSignal.c \727--728</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800046AC</addrFrom>
						<addrTo>P:800046AF</addrTo>
						<tree>FS_InvalidSignal.c \729--729</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800046B0</addrFrom>
						<addrTo>P:800046B3</addrTo>
						<tree>FS_InvalidSignal.c \730--731</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800046EE</addrFrom>
						<addrTo>P:800046F5</addrTo>
						<tree>FS_InvalidSignal.c \732--732</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \733--733</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \734--734</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \735--735</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004592</addrFrom>
						<addrTo>P:80004595</addrTo>
						<tree>FS_InvalidSignal.c \771--774</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004596</addrFrom>
						<addrTo>P:80004599</addrTo>
						<tree>FS_InvalidSignal.c \775--775</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000459A</addrFrom>
						<addrTo>P:8000459F</addrTo>
						<tree>FS_InvalidSignal.c \776--777</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \778--779</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800045D6</addrFrom>
						<addrTo>P:800045DD</addrTo>
						<tree>FS_InvalidSignal.c \780--780</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \781--781</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \782--782</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \783--783</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000461C</addrFrom>
						<addrTo>P:8000461F</addrTo>
						<tree>FS_InvalidSignal.c \784--868</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004620</addrFrom>
						<addrTo>P:80004623</addrTo>
						<tree>FS_InvalidSignal.c \869--869</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004624</addrFrom>
						<addrTo>P:80004627</addrTo>
						<tree>FS_InvalidSignal.c \870--871</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000462A</addrFrom>
						<addrTo>P:8000462D</addrTo>
						<tree>FS_InvalidSignal.c \872--872</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004632</addrFrom>
						<addrTo>P:80004635</addrTo>
						<tree>FS_InvalidSignal.c \873--873</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004636</addrFrom>
						<addrTo>P:80004639</addrTo>
						<tree>FS_InvalidSignal.c \874--874</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000463A</addrFrom>
						<addrTo>P:8000463D</addrTo>
						<tree>FS_InvalidSignal.c \875--876</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004678</addrFrom>
						<addrTo>P:8000467F</addrTo>
						<tree>FS_InvalidSignal.c \877--877</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000463E</addrFrom>
						<addrTo>P:8000465D</addrTo>
						<tree>FS_InvalidSignal.c \878--878</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>8</never>
						<bytes>32</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \879--879</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \880--880</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004688</addrFrom>
						<addrTo>P:8000468D</addrTo>
						<tree>FS_InvalidSignal.c \881--883</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \884--884</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800046FE</addrFrom>
						<addrTo>P:80004701</addrTo>
						<tree>FS_InvalidSignal.c \885--889</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004702</addrFrom>
						<addrTo>P:80004705</addrTo>
						<tree>FS_InvalidSignal.c \890--890</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004706</addrFrom>
						<addrTo>P:80004709</addrTo>
						<tree>FS_InvalidSignal.c \891--892</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000470C</addrFrom>
						<addrTo>P:8000470F</addrTo>
						<tree>FS_InvalidSignal.c \893--893</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004714</addrFrom>
						<addrTo>P:80004717</addrTo>
						<tree>FS_InvalidSignal.c \894--894</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004718</addrFrom>
						<addrTo>P:8000471B</addrTo>
						<tree>FS_InvalidSignal.c \895--896</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004752</addrFrom>
						<addrTo>P:80004759</addrTo>
						<tree>FS_InvalidSignal.c \897--897</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \898--898</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \899--899</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \900--900</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004762</addrFrom>
						<addrTo>P:80004765</addrTo>
						<tree>FS_InvalidSignal.c \901--906</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004766</addrFrom>
						<addrTo>P:80004769</addrTo>
						<tree>FS_InvalidSignal.c \907--907</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004770</addrFrom>
						<addrTo>P:80004773</addrTo>
						<tree>FS_InvalidSignal.c \908--910</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000477A</addrFrom>
						<addrTo>P:80004781</addrTo>
						<tree>FS_InvalidSignal.c \911--911</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004782</addrFrom>
						<addrTo>P:80004785</addrTo>
						<tree>FS_InvalidSignal.c \912--912</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004774</addrFrom>
						<addrTo>P:80004777</addrTo>
						<tree>FS_InvalidSignal.c \913--913</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \914--914</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000478E</addrFrom>
						<addrTo>P:80004791</addrTo>
						<tree>FS_InvalidSignal.c \939--943</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004792</addrFrom>
						<addrTo>P:800047A1</addrTo>
						<tree>FS_InvalidSignal.c \944--944</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800047A4</addrFrom>
						<addrTo>P:800047A9</addrTo>
						<tree>FS_InvalidSignal.c \945--946</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800047AA</addrFrom>
						<addrTo>P:800047AB</addrTo>
						<tree>FS_InvalidSignal.c \947--947</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800047AC</addrFrom>
						<addrTo>P:800047AF</addrTo>
						<tree>FS_InvalidSignal.c \948--949</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800047C4</addrFrom>
						<addrTo>P:800047C7</addrTo>
						<tree>FS_InvalidSignal.c \950--950</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800047C8</addrFrom>
						<addrTo>P:800047CB</addrTo>
						<tree>FS_InvalidSignal.c \951--951</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \952--952</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \953--953</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800047DC</addrFrom>
						<addrTo>P:800047DF</addrTo>
						<tree>FS_InvalidSignal.c \954--956</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800047F4</addrFrom>
						<addrTo>P:800047F7</addrTo>
						<tree>FS_InvalidSignal.c \957--957</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800047F8</addrFrom>
						<addrTo>P:800047FD</addrTo>
						<tree>FS_InvalidSignal.c \958--958</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \959--959</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \960--960</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800045F0</addrFrom>
						<addrTo>P:800045F3</addrTo>
						<tree>FS_InvalidSignal.c \986--989</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800045F4</addrFrom>
						<addrTo>P:800045F7</addrTo>
						<tree>FS_InvalidSignal.c \990--990</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800045FE</addrFrom>
						<addrTo>P:80004601</addrTo>
						<tree>FS_InvalidSignal.c \991--993</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \994--994</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004606</addrFrom>
						<addrTo>P:8000460D</addrTo>
						<tree>FS_InvalidSignal.c \995--995</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004602</addrFrom>
						<addrTo>P:80004605</addrTo>
						<tree>FS_InvalidSignal.c \996--996</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \997--997</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004810</addrFrom>
						<addrTo>P:80004813</addrTo>
						<tree>FS_InvalidSignal.c \1361--1364</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004814</addrFrom>
						<addrTo>P:80004825</addrTo>
						<tree>FS_InvalidSignal.c \1365--1365</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>3</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000482C</addrFrom>
						<addrTo>P:8000482F</addrTo>
						<tree>FS_InvalidSignal.c \1366--1367</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004830</addrFrom>
						<addrTo>P:80004833</addrTo>
						<tree>FS_InvalidSignal.c \1368--1368</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004834</addrFrom>
						<addrTo>P:80004837</addrTo>
						<tree>FS_InvalidSignal.c \1369--1369</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004838</addrFrom>
						<addrTo>P:80004845</addrTo>
						<tree>FS_InvalidSignal.c \1370--1370</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004846</addrFrom>
						<addrTo>P:80004855</addrTo>
						<tree>FS_InvalidSignal.c \1371--1371</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004838</addrFrom>
						<addrTo>P:80004845</addrTo>
						<tree>FS_InvalidSignal.c \1372--1373</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004856</addrFrom>
						<addrTo>P:80004861</addrTo>
						<tree>FS_InvalidSignal.c \1374--1375</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004862</addrFrom>
						<addrTo>P:80004865</addrTo>
						<tree>FS_InvalidSignal.c \1376--1376</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1377--1378</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>20</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004870</addrFrom>
						<addrTo>P:80004873</addrTo>
						<tree>FS_InvalidSignal.c \1379--1382</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1383--1383</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000487C</addrFrom>
						<addrTo>P:80004883</addrTo>
						<tree>FS_InvalidSignal.c \1384--1384</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004874</addrFrom>
						<addrTo>P:8000487B</addrTo>
						<tree>FS_InvalidSignal.c \1385--1385</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1386--1386</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004896</addrFrom>
						<addrTo>P:80004899</addrTo>
						<tree>FS_InvalidSignal.c \1387--1393</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000489A</addrFrom>
						<addrTo>P:800048AB</addrTo>
						<tree>FS_InvalidSignal.c \1394--1394</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>3</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048AE</addrFrom>
						<addrTo>P:800048B1</addrTo>
						<tree>FS_InvalidSignal.c \1395--1396</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048B2</addrFrom>
						<addrTo>P:800048B5</addrTo>
						<tree>FS_InvalidSignal.c \1397--1397</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048B6</addrFrom>
						<addrTo>P:800048B9</addrTo>
						<tree>FS_InvalidSignal.c \1398--1398</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048C0</addrFrom>
						<addrTo>P:800048C3</addrTo>
						<tree>FS_InvalidSignal.c \1399--1399</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1400--1401</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048D0</addrFrom>
						<addrTo>P:800048D9</addrTo>
						<tree>FS_InvalidSignal.c \1402--1403</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048DA</addrFrom>
						<addrTo>P:800048E7</addrTo>
						<tree>FS_InvalidSignal.c \1404--1404</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048D0</addrFrom>
						<addrTo>P:800048D9</addrTo>
						<tree>FS_InvalidSignal.c \1405--1406</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000458C</addrFrom>
						<addrTo>P:8000458D</addrTo>
						<tree>FS_InvalidSignal.c \1528--1529</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000458E</addrFrom>
						<addrTo>P:80004591</addrTo>
						<tree>FS_InvalidSignal.c \1530--1534</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800045E6</addrFrom>
						<addrTo>P:800045EB</addrTo>
						<tree>FS_InvalidSignal.c \1535--1543</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800045EC</addrFrom>
						<addrTo>P:800045EF</addrTo>
						<tree>FS_InvalidSignal.c \1544--1544</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004696</addrFrom>
						<addrTo>P:80004699</addrTo>
						<tree>FS_InvalidSignal.c \1545--1547</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000478A</addrFrom>
						<addrTo>P:8000478D</addrTo>
						<tree>FS_InvalidSignal.c \1548--1551</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004808</addrFrom>
						<addrTo>P:8000480B</addrTo>
						<tree>FS_InvalidSignal.c \1552--1553</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000480C</addrFrom>
						<addrTo>P:8000480F</addrTo>
						<tree>FS_InvalidSignal.c \1554--1565</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048E8</addrFrom>
						<addrTo>P:800048EB</addrTo>
						<tree>FS_InvalidSignal.c \1566--1570</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048EC</addrFrom>
						<addrTo>P:800048EF</addrTo>
						<tree>FS_InvalidSignal.c \1571--1573</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048F0</addrFrom>
						<addrTo>P:800048FB</addrTo>
						<tree>FS_InvalidSignal.c \1574--1578</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004904</addrFrom>
						<addrTo>P:80004909</addrTo>
						<tree>FS_InvalidSignal.c \1579--1579</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800048FC</addrFrom>
						<addrTo>P:80004903</addrTo>
						<tree>FS_InvalidSignal.c \1580--1580</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000490A</addrFrom>
						<addrTo>P:8000490B</addrTo>
						<tree>FS_InvalidSignal.c \1581--1583</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004914</addrFrom>
						<addrTo>P:80004919</addrTo>
						<tree>FS_InvalidSignal.c \1584--1584</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000490C</addrFrom>
						<addrTo>P:80004913</addrTo>
						<tree>FS_InvalidSignal.c \1585--1585</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000491A</addrFrom>
						<addrTo>P:8000491B</addrTo>
						<tree>FS_InvalidSignal.c \1586--1588</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004924</addrFrom>
						<addrTo>P:80004929</addrTo>
						<tree>FS_InvalidSignal.c \1589--1589</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000491C</addrFrom>
						<addrTo>P:80004923</addrTo>
						<tree>FS_InvalidSignal.c \1590--1590</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1591--1593</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000492C</addrFrom>
						<addrTo>P:8000492F</addrTo>
						<tree>FS_InvalidSignal.c \1594--1595</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004934</addrFrom>
						<addrTo>P:80004935</addrTo>
						<tree>FS_InvalidSignal.c \1596--1599</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000493E</addrFrom>
						<addrTo>P:80004943</addrTo>
						<tree>FS_InvalidSignal.c \1600--1600</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004936</addrFrom>
						<addrTo>P:8000493D</addrTo>
						<tree>FS_InvalidSignal.c \1601--1601</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1602--1604</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004946</addrFrom>
						<addrTo>P:80004949</addrTo>
						<tree>FS_InvalidSignal.c \1605--1606</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1607--1621</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004950</addrFrom>
						<addrTo>P:80004953</addrTo>
						<tree>FS_InvalidSignal.c \1622--1623</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1624--1626</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000495A</addrFrom>
						<addrTo>P:8000495D</addrTo>
						<tree>FS_InvalidSignal.c \1627--1628</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1629--1646</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004966</addrFrom>
						<addrTo>P:80004969</addrTo>
						<tree>FS_InvalidSignal.c \1647--1648</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1649--1651</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004978</addrFrom>
						<addrTo>P:80004979</addrTo>
						<tree>FS_InvalidSignal.c \1652--1656</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004982</addrFrom>
						<addrTo>P:80004987</addrTo>
						<tree>FS_InvalidSignal.c \1657--1657</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000497A</addrFrom>
						<addrTo>P:80004981</addrTo>
						<tree>FS_InvalidSignal.c \1658--1658</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004988</addrFrom>
						<addrTo>P:80004989</addrTo>
						<tree>FS_InvalidSignal.c \1659--1661</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004992</addrFrom>
						<addrTo>P:80004997</addrTo>
						<tree>FS_InvalidSignal.c \1662--1662</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000498A</addrFrom>
						<addrTo>P:80004991</addrTo>
						<tree>FS_InvalidSignal.c \1663--1663</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80004998</addrFrom>
						<addrTo>P:80004999</addrTo>
						<tree>FS_InvalidSignal.c \1664--1666</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800049A2</addrFrom>
						<addrTo>P:800049A7</addrTo>
						<tree>FS_InvalidSignal.c \1667--1667</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000499A</addrFrom>
						<addrTo>P:800049A1</addrTo>
						<tree>FS_InvalidSignal.c \1668--1668</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800049A8</addrFrom>
						<addrTo>P:800049A9</addrTo>
						<tree>FS_InvalidSignal.c \1669--1671</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800049B2</addrFrom>
						<addrTo>P:800049B9</addrTo>
						<tree>FS_InvalidSignal.c \1672--1672</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800049AA</addrFrom>
						<addrTo>P:800049B1</addrTo>
						<tree>FS_InvalidSignal.c \1673--1673</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800049BA</addrFrom>
						<addrTo>P:800049BB</addrTo>
						<tree>FS_InvalidSignal.c \1674--1716</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>SWC_Failsafe.h \1--738</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\SWC_Failsafe.h</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>64</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>SWC_Failsafe.h \739--758</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\SWC_Failsafe.h</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>46</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>SWC_Failsafe.h \759--763</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\SWC_Failsafe.h</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>22</bytes>
						<bytesok>0</bytesok>
					</line>
					<total>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>51</never>
						<bytes>1144</bytes>
						<bytesok>0</bytesok>
					</total>
				</function>
				<total>
					<cov>never</cov>
					<exec metric="object">0.000%</exec>
					<branches>0.000%</branches>
					<ok>0</ok>
					<taken>0</taken>
					<nottaken>0</nottaken>
					<never>66</never>
					<bytes>1072</bytes>
					<bytesok>0</bytesok>
				</total>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\FS_SWFailure</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>17</never>
				<bytes>304</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\prost_cstart</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>5</never>
				<bytes>806</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\prost_cstart_tc1</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>402</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\prost_cstart_tc2</tree>
				<cov>partial</cov>
				<exec metric="object">81.094%</exec>
				<branches>87.500%</branches>
				<ok>3</ok>
				<taken>0</taken>
				<nottaken>1</nottaken>
				<never>0</never>
				<bytes>402</bytes>
				<bytesok>326</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\prost_cstart_tc3</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\prost_main</tree>
				<cov>partial</cov>
				<exec metric="object">27.835%</exec>
				<branches>31.818%</branches>
				<ok>1</ok>
				<taken>4</taken>
				<nottaken>1</nottaken>
				<never>5</never>
				<bytes>388</bytes>
				<bytesok>108</bytesok>
			</module>
			<module>
				<addrFrom>P:800065B6</addrFrom>
				<addrTo>P:8000674B</addrTo>
				<tree>\\Test\prost_cstart_tc4</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:8000674C</addrFrom>
				<addrTo>P:800068E1</addrTo>
				<tree>\\Test\prost_cstart_tc5</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:80006A62</addrFrom>
				<addrTo>P:80006A91</addrTo>
				<tree>\\Test\prost_stubs</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>2</never>
				<bytes>48</bytes>
				<bytesok>0</bytesok>
			</module>
			<total>
				<cov>partial</cov>
				<exec metric="object">4.287%</exec>
				<branches>2.412%</branches>
				<ok>12</ok>
				<taken>7</taken>
				<nottaken>9</nottaken>
				<never>801</never>
				<bytes>16046</bytes>
				<bytesok>688</bytesok>
			</total>
		</COVerage.EXPORT.ListLine>
	</coverage>
	<marker>
		<BookMark.EXPORT ts="1621823166" t32ver="R.2020.09.000128638" t32pv="TRICORE" cpu="TC397XE">
		</BookMark.EXPORT>
	</marker>
	<listing>
		<List.EXPORT ts="1621823166" t32ver="R.2020.09.000128638" t32pv="TRICORE" order="source">
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>722</line><src></src></hll>
				<hll><line>723</line><src>static void update_sas(void)</src></hll>
				<hll><line>724</line><src>{</src></hll>
				<hll><cov>never</cov><line>725</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>never</cov><addr>P:8000469A</addr><code>09FE006D</code><mnemonic>call      0x80005A96</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>726</line><src>    boolean meet_precond = (p-&gt;is_norm_vol == TRUE) &amp;&amp; (p-&gt;is_3s_after_ign_on == TRUE) &amp;&amp; (p-&gt;is_eng_run == TRUE) &amp;&amp; (p-&gt;is_not_ecan_busoff == TRUE);</src></hll>
				<asm><cov>never</cov><addr>P:8000469E</addr><code>FA4BFF61</code><mnemonic>fcall     0x80003B34</mnemonic><comment>.cocofun_44</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>727</line><src></src></hll>
				<hll><cov>never</cov><line>728</line><src>    sint16 SAS_AnglVal = ref_sig.SAS_AnglVal;</src></hll>
				<asm><cov>never</cov><addr>P:800046A4</addr><code>08B0F209</code><mnemonic>ld.h      d2,[a15]0x30</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>729</line><src>    uint8 SAS_SpdVal = ref_sig.SAS_SpdVal;</src></hll>
				<asm><cov>never</cov><addr>P:800046AC</addr><code>0872F309</code><mnemonic>ld.bu     d3,[a15]0x32</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>730</line><src></src></hll>
				<hll><cov>never</cov><line>731</line><src>    if (is_timeout(CHASSIS_0, SAS_01_10ms_POS) == FALSE) {</src></hll>
				<asm><cov>never</cov><addr>P:800046B0</addr><code>802791EF</code><mnemonic>jnz.t     d1,#0x19,0x800046FE</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>732</line><src>        update_info(&amp;sas[SAS_C181486_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:800046EE</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046F2</addr><code>407E44D9</code><mnemonic>lea       a4,[a4]0x53E</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>733</line><src>                    (is_e2e_err(CHASSIS_0, SAS_01_10ms_POS) == TRUE) || (SAS_AnglVal == 0x7FFF) || (SAS_SpdVal == 0xFF),</src></hll>
				<asm><cov>never</cov><addr>P:800046B4</addr><code>FB19FF61</code><mnemonic>fcall     0x80003CE6</mnemonic><comment>.cocofun_79</comment></asm>
				<asm><cov>never</cov><addr>P:800046BC</addr><code>16F6</code><mnemonic>jnz16     d1,0x800046C8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046BE</addr><code>F7FFF03B</code><mnemonic>mov       d15,#0x7FFF</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046C2</addr><code>233E</code><mnemonic>jeq16     d15,d2,0x800046C8</mnemonic><comment>d15,SAS_AnglVal,0x800046C8</comment></asm>
				<asm><cov>never</cov><addr>P:800046C4</addr><code>FFDA</code><mnemonic>mov16     d15,#0xFF</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046C6</addr><code>327E</code><mnemonic>jne16     d15,d3,0x800046CA</mnemonic><comment>d15,SAS_SpdVal,0x800046CA</comment></asm>
				<asm><cov>never</cov><addr>P:800046C8</addr><code>1582</code><mnemonic>mov16     d5,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>734</line><src>                    (is_updated(CHASSIS_0, SAS_01_10ms_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, SAS_01_10ms_POS) == FALSE) &amp;&amp; (SAS_AnglVal != 0x7FFF) &amp;&amp; (SAS_SpdVal != 0xFF),</src></hll>
				<asm><cov>never</cov><addr>P:800046D2</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046D6</addr><code>1A76</code><mnemonic>jz16      d1,0x800046EA</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046DC</addr><code>07F6</code><mnemonic>jnz16     d0,0x800046EA</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046DE</addr><code>F7FFF03B</code><mnemonic>mov       d15,#0x7FFF</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046E2</addr><code>243E</code><mnemonic>jeq16     d15,d2,0x800046EA</mnemonic><comment>d15,SAS_AnglVal,0x800046EA</comment></asm>
				<asm><cov>never</cov><addr>P:800046E4</addr><code>F20FF38B</code><mnemonic>eq        d15,d3,#0xFF</mnemonic><comment>d15,SAS_SpdVal,#255</comment></asm>
				<asm><cov>never</cov><addr>P:800046E8</addr><code>16EA</code><mnemonic>cmovn16   d6,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>735</line><src>                    MS2TICK(100), VALID_CNT_THR);</src></hll>
				<asm><cov>never</cov><addr>P:800046EA</addr><code>02DA</code><mnemonic>mov16     d15,#0x2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046EC</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046F6</addr><code>7000A03B</code><mnemonic>mov       d7,#0x0A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046FA</addr><code>053D006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>771</line><src></src></hll>
				<hll><line>772</line><src>static void update_tcu(void)</src></hll>
				<hll><line>773</line><src>{</src></hll>
				<hll><cov>never</cov><line>774</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>never</cov><addr>P:80004592</addr><code>0A82006D</code><mnemonic>call      0x80005A96</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>775</line><src>    boolean meet_precond = (p-&gt;is_norm_vol == TRUE) &amp;&amp; (p-&gt;is_3s_after_ign_on == TRUE) &amp;&amp; (p-&gt;is_eng_run == TRUE) &amp;&amp; (p-&gt;is_not_ecan_busoff == TRUE);</src></hll>
				<asm><cov>never</cov><addr>P:80004596</addr><code>FACFFF61</code><mnemonic>fcall     0x80003B34</mnemonic><comment>.cocofun_44</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>776</line><src></src></hll>
				<hll><cov>never</cov><line>777</line><src>    uint8 TCU_GearSlctDis = ref_sig.TCU_GearSlctDis;</src></hll>
				<asm><cov>never</cov><addr>P:8000459A</addr><code>FB18FF61</code><mnemonic>fcall     0x80003BCA</mnemonic><comment>.cocofun_52</comment></asm>
				<asm><cov>never</cov><addr>P:8000459E</addr><code>8008</code><mnemonic>ld16.bu   d0,[a15]0x8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>778</line><src></src></hll>
				<hll><cov>never</cov><line>779</line><src>    if (is_timeout(CHASSIS_0, TCU_01_10ms_POS) == FALSE) {</src></hll>
				<asm><cov>never</cov><addr>P:800045AA</addr><code>801EAF6F</code><mnemonic>jnz.t     d15,#0x0A,0x800045E6</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045E6</addr><code>0882</code><mnemonic>mov16     d8,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045E8</addr><code>0236006D</code><mnemonic>call      0x80004A54</mnemonic><comment>update_clu</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>780</line><src>        update_info(&amp;tcu[TCU_C164686_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:800045D6</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045DA</addr><code>407244D9</code><mnemonic>lea       a4,[a4]0x532</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>781</line><src>                    (is_e2e_err(CHASSIS_0, TCU_01_10ms_POS) == TRUE) || TCU_GearSlctDis == 0xF,</src></hll>
				<asm><cov>never</cov><addr>P:800045AE</addr><code>FB13FF61</code><mnemonic>fcall     0x80003BD4</mnemonic><comment>.cocofun_53</comment></asm>
				<asm><cov>never</cov><addr>P:800045B4</addr><code>03EE</code><mnemonic>jnz16     d15,0x800045BA</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045B6</addr><code>0FDA</code><mnemonic>mov16     d15,#0x0F</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045B8</addr><code>027E</code><mnemonic>jne16     d15,d0,0x800045BC</mnemonic><comment>d15,TCU_GearSlctDis,0x800045BC</comment></asm>
				<asm><cov>never</cov><addr>P:800045BA</addr><code>1582</code><mnemonic>mov16     d5,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>782</line><src>                    (is_updated(CHASSIS_0, TCU_01_10ms_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, TCU_01_10ms_POS) == FALSE) &amp;&amp; (TCU_GearSlctDis != 0xF),</src></hll>
				<asm><cov>never</cov><addr>P:800045BC</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045BE</addr><code>FB41FF61</code><mnemonic>fcall     0x80003C40</mnemonic><comment>.cocofun_63</comment></asm>
				<asm><cov>never</cov><addr>P:800045C2</addr><code>1F26</code><mnemonic>and16     d15,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045C4</addr><code>076E</code><mnemonic>jz16      d15,0x800045D2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045CA</addr><code>14F6</code><mnemonic>jnz16     d1,0x800045D2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045CC</addr><code>F200F08B</code><mnemonic>eq        d15,d0,#0x0F</mnemonic><comment>d15,TCU_GearSlctDis,#15</comment></asm>
				<asm><cov>never</cov><addr>P:800045D0</addr><code>16EA</code><mnemonic>cmovn16   d6,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>783</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<asm><cov>never</cov><addr>P:800045D2</addr><code>02DA</code><mnemonic>mov16     d15,#0x2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045D4</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045DE</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045E2</addr><code>05C9006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>784</line><src>    }</src></hll>
				<hll><line>785</line><src>}</src></hll>
				<hll><line>786</line><src></src></hll>
				<hll><line>787</line><src>#elif VEH_TYPE == EV</src></hll>
				<hll><line>788</line><src>static void update_vcu(void)</src></hll>
				<hll><line>789</line><src>{</src></hll>
				<hll><line>790</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>791</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>792</line><src></src></hll>
				<hll><line>793</line><src>    uint8 VCU_GearPosSta = ref_sig.VCU_GearPosSta;</src></hll>
				<hll><line>794</line><src>    uint8 VCU_AccPedDepVal = ref_sig.VCU_AccPedDepVal;</src></hll>
				<hll><line>795</line><src></src></hll>
				<hll><line>796</line><src>    if (is_timeout(CHASSIS_0, VCU_01_10ms_POS) == FALSE) {</src></hll>
				<hll><line>797</line><src>        update_info(&amp;vcu[VCU_C161C86_0], meet_precond,</src></hll>
				<hll><line>798</line><src>                    (is_e2e_err(CHASSIS_0, VCU_01_10ms_POS) == TRUE) || (VCU_GearPosSta == 0xF) || (VCU_AccPedDepVal == 0xFF),</src></hll>
				<hll><line>799</line><src>                    (is_updated(CHASSIS_0, VCU_01_10ms_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, VCU_01_10ms_POS) == FALSE) &amp;&amp; (VCU_GearPosSta != 0xF) &amp;&amp; (VCU_AccPedDepVal != 0xFF),</src></hll>
				<hll><line>800</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>801</line><src>    }</src></hll>
				<hll><line>802</line><src></src></hll>
				<hll><line>803</line><src>    if (is_timeout(CHASSIS_0, VCU_03_100ms_POS) == FALSE) {</src></hll>
				<hll><line>804</line><src>        update_info(&amp;vcu[VCU_C161C86_1], meet_precond,</src></hll>
				<hll><line>805</line><src>                    is_e2e_err(CHASSIS_0, VCU_03_100ms_POS) == TRUE,</src></hll>
				<hll><line>806</line><src>                    (is_updated(CHASSIS_0, VCU_03_100ms_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, VCU_03_100ms_POS) == FALSE),</src></hll>
				<hll><line>807</line><src>                    MS2TICK(2000), VALID_CNT_THR);</src></hll>
				<hll><line>808</line><src>    }</src></hll>
				<hll><line>809</line><src>}</src></hll>
				<hll><line>810</line><src></src></hll>
				<hll><line>811</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>812</line><src>static void update_ems(void)</src></hll>
				<hll><line>813</line><src>{</src></hll>
				<hll><line>814</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>815</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>816</line><src></src></hll>
				<hll><line>817</line><src>    uint16 HEV_AccelPdlVal = ref_sig.HEV_AccelPdlVal;</src></hll>
				<hll><line>818</line><src>    uint8 HEV_EngSpdErrSta = ref_sig.HEV_EngSpdErrSta;</src></hll>
				<hll><line>819</line><src></src></hll>
				<hll><line>820</line><src>    if ((is_timeout(CHASSIS_0, EMS_07_POS) == FALSE) &amp;&amp; (is_timeout(CHASSIS_0, EMS_11_POS) == FALSE)) {</src></hll>
				<hll><line>821</line><src>        update_info(&amp;ems[EMS_C161386_0], meet_precond,</src></hll>
				<hll><line>822</line><src>                    (is_e2e_err(CHASSIS_0, EMS_07_POS) == TRUE) || (is_e2e_err(CHASSIS_0, EMS_11_POS) == TRUE) || (HEV_AccelPdlVal == 0x3FF) || (HEV_EngSpdErrSta == 0x1),</src></hll>
				<hll><line>823</line><src>                    (is_updated(CHASSIS_0, EMS_07_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, EMS_07_POS) == FALSE) &amp;&amp; (is_e2e_err(CHASSIS_0, EMS_11_POS) == FALSE) &amp;&amp; (HEV_AccelPdlVal != 0x3FF) &amp;&amp; (HEV_EngSpdErrSta == 0x0),</src></hll>
				<hll><line>824</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>825</line><src>    }</src></hll>
				<hll><line>826</line><src>}</src></hll>
				<hll><line>827</line><src></src></hll>
				<hll><line>828</line><src>static void update_hcu(void)</src></hll>
				<hll><line>829</line><src>{</src></hll>
				<hll><line>830</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>831</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>832</line><src></src></hll>
				<hll><line>833</line><src>    uint8 HCU_HevRdySta = ref_sig.HCU_HevRdySta;</src></hll>
				<hll><line>834</line><src></src></hll>
				<hll><line>835</line><src>    if (is_timeout(CHASSIS_0, HCU_03_POS) == FALSE) {</src></hll>
				<hll><line>836</line><src>        update_info(&amp;hcu[HCU_C161C86_0], meet_precond,</src></hll>
				<hll><line>837</line><src>                    (is_e2e_err(CHASSIS_0, HCU_03_POS) == TRUE) || (HCU_HevRdySta == 0x3),</src></hll>
				<hll><line>838</line><src>                    (is_updated(CHASSIS_0, HCU_03_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, HCU_03_POS) == FALSE) &amp;&amp; (HCU_HevRdySta != 0x3),</src></hll>
				<hll><line>839</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>840</line><src>    }</src></hll>
				<hll><line>841</line><src></src></hll>
				<hll><line>842</line><src>    if (is_timeout(CHASSIS_0, HCU_05_POS) == FALSE) {</src></hll>
				<hll><line>843</line><src>        update_info(&amp;hcu[HCU_C161C86_1], meet_precond,</src></hll>
				<hll><line>844</line><src>                    (is_e2e_err(CHASSIS_0, HCU_05_POS) == TRUE),</src></hll>
				<hll><line>845</line><src>                    (is_updated(CHASSIS_0, HCU_05_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, HCU_05_POS) == FALSE),</src></hll>
				<hll><line>846</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>847</line><src>    }</src></hll>
				<hll><line>848</line><src>}</src></hll>
				<hll><line>849</line><src></src></hll>
				<hll><line>850</line><src>static void update_htcu(void)</src></hll>
				<hll><line>851</line><src>{</src></hll>
				<hll><line>852</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>853</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>854</line><src></src></hll>
				<hll><line>855</line><src>    uint8 HTCU_GearSlctrDis = ref_sig.HTCU_GearSlctrDis;</src></hll>
				<hll><line>856</line><src></src></hll>
				<hll><line>857</line><src>    if (is_timeout(CHASSIS_0, HTCU_04_POS) == FALSE) {</src></hll>
				<hll><line>858</line><src>        update_info(&amp;htcu[HTCU_C164686_0], meet_precond,</src></hll>
				<hll><line>859</line><src>                    (is_e2e_err(CHASSIS_0, HTCU_04_POS) == TRUE) || (HTCU_GearSlctrDis == 0xF),</src></hll>
				<hll><line>860</line><src>                    (is_updated(CHASSIS_0, HTCU_04_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, HTCU_04_POS) == FALSE) &amp;&amp; (HTCU_GearSlctrDis != 0xF),</src></hll>
				<hll><line>861</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>862</line><src>    }</src></hll>
				<hll><line>863</line><src>}</src></hll>
				<hll><line>864</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><line>865</line><src></src></hll>
				<hll><line>866</line><src>static void update_icu(void)</src></hll>
				<hll><line>867</line><src>{</src></hll>
				<hll><cov>never</cov><line>868</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>never</cov><addr>P:8000461C</addr><code>0A3D006D</code><mnemonic>call      0x80005A96</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>869</line><src>    boolean meet_precond = (p-&gt;is_norm_vol == TRUE) &amp;&amp; (p-&gt;is_3s_after_ign_on == TRUE) &amp;&amp; (p-&gt;is_eng_run == TRUE) &amp;&amp; (p-&gt;is_not_ecan_busoff == TRUE);</src></hll>
				<asm><cov>never</cov><addr>P:80004620</addr><code>FA8AFF61</code><mnemonic>fcall     0x80003B34</mnemonic><comment>.cocofun_44</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>870</line><src></src></hll>
				<hll><cov>never</cov><line>871</line><src>    uint8 Lamp_RrTrnSigLmpLftOpnSta = ref_sig.Lamp_RrTrnSigLmpLftOpnSta;</src></hll>
				<asm><cov>never</cov><addr>P:80004624</addr><code>087DFF09</code><mnemonic>ld.bu     d15,[a15]0x3D</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>872</line><src>    uint8 Lamp_RrTrnSigLmpRtOpnSta = ref_sig.Lamp_RrTrnSigLmpRtOpnSta;</src></hll>
				<asm><cov>never</cov><addr>P:8000462A</addr><code>087EF009</code><mnemonic>ld.bu     d0,[a15]0x3E</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>873</line><src>    uint8 Lamp_FrTrnSigLmpLftOpnSta = ref_sig.Lamp_FrTrnSigLmpLftOpnSta;</src></hll>
				<asm><cov>never</cov><addr>P:80004632</addr><code>087FF109</code><mnemonic>ld.bu     d1,[a15]0x3F</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>874</line><src>    uint8 Lamp_FrTrnSigLmpRtOpnSta = ref_sig.Lamp_FrTrnSigLmpRtOpnSta;</src></hll>
				<asm><cov>never</cov><addr>P:80004636</addr><code>1840F209</code><mnemonic>ld.bu     d2,[a15]0x40</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>875</line><src></src></hll>
				<hll><cov>never</cov><line>876</line><src>    if (is_timeout(CHASSIS_0, ICU_06_200ms_POS) == FALSE) {</src></hll>
				<asm><cov>never</cov><addr>P:8000463A</addr><code>802755EF</code><mnemonic>jnz.t     d5,#0x15,0x80004688</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>877</line><src>        update_info(&amp;icu[ICU_C183E86_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:80004678</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000467C</addr><code>407844D9</code><mnemonic>lea       a4,[a4]0x538</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>878</line><src>                    Lamp_RrTrnSigLmpLftOpnSta == 1 || Lamp_RrTrnSigLmpLftOpnSta == 3 || Lamp_RrTrnSigLmpRtOpnSta == 1 || Lamp_RrTrnSigLmpRtOpnSta == 3 || Lamp_FrTrnSigLmpLftOpnSta == 1 || Lamp_FrTrnSigLmpLftOpnSta == 3 || Lamp_FrTrnSigLmpRtOpnSta == 1 || Lamp_FrTrnSigLmpRtOpnSta == 3,</src></hll>
				<asm><cov>never</cov><addr>P:8000463E</addr><code>0582</code><mnemonic>mov16     d5,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004640</addr><code>1E1E</code><mnemonic>jeq16     d15,#0x1,0x8000465C</mnemonic><comment>Lamp_RrTrnSigLmpLftOpnSta,#1,0x8000465C</comment></asm>
				<asm><cov>never</cov><addr>P:80004642</addr><code>3D1E</code><mnemonic>jeq16     d15,#0x3,0x8000465C</mnemonic><comment>Lamp_RrTrnSigLmpLftOpnSta,#3,0x8000465C</comment></asm>
				<asm><cov>never</cov><addr>P:80004644</addr><code>000C10DF</code><mnemonic>jeq       d0,#0x1,0x8000465C</mnemonic><comment>Lamp_RrTrnSigLmpRtOpnSta,#1,0x8000465C</comment></asm>
				<asm><cov>never</cov><addr>P:80004648</addr><code>000A30DF</code><mnemonic>jeq       d0,#0x3,0x8000465C</mnemonic><comment>Lamp_RrTrnSigLmpRtOpnSta,#3,0x8000465C</comment></asm>
				<asm><cov>never</cov><addr>P:8000464C</addr><code>000811DF</code><mnemonic>jeq       d1,#0x1,0x8000465C</mnemonic><comment>Lamp_FrTrnSigLmpLftOpnSta,#1,0x8000465C</comment></asm>
				<asm><cov>never</cov><addr>P:80004650</addr><code>000631DF</code><mnemonic>jeq       d1,#0x3,0x8000465C</mnemonic><comment>Lamp_FrTrnSigLmpLftOpnSta,#3,0x8000465C</comment></asm>
				<asm><cov>never</cov><addr>P:80004654</addr><code>000412DF</code><mnemonic>jeq       d2,#0x1,0x8000465C</mnemonic><comment>Lamp_FrTrnSigLmpRtOpnSta,#1,0x8000465C</comment></asm>
				<asm><cov>never</cov><addr>P:80004658</addr><code>800332DF</code><mnemonic>jne       d2,#0x3,0x8000465E</mnemonic><comment>Lamp_FrTrnSigLmpRtOpnSta,#3,0x8000465E</comment></asm>
				<asm><cov>never</cov><addr>P:8000465C</addr><code>1582</code><mnemonic>mov16     d5,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>879</line><src>                    (is_updated(CHASSIS_0, ICU_06_200ms_POS) == TRUE) &amp;&amp; Lamp_RrTrnSigLmpLftOpnSta == 0 &amp;&amp; Lamp_RrTrnSigLmpRtOpnSta == 0 &amp;&amp; Lamp_FrTrnSigLmpLftOpnSta == 0 &amp;&amp; Lamp_FrTrnSigLmpRtOpnSta == 0,</src></hll>
				<asm><cov>never</cov><addr>P:8000465E</addr><code>FB59FF61</code><mnemonic>fcall     0x80003D10</mnemonic><comment>.cocofun_83</comment></asm>
				<asm><cov>never</cov><addr>P:80004668</addr><code>3676</code><mnemonic>jz16      d3,0x80004674</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000466A</addr><code>05EE</code><mnemonic>jnz16     d15,0x80004674</mnemonic><comment>Lamp_RrTrnSigLmpLftOpnSta,0x80004674</comment></asm>
				<asm><cov>never</cov><addr>P:8000466C</addr><code>04F6</code><mnemonic>jnz16     d0,0x80004674</mnemonic><comment>Lamp_RrTrnSigLmpRtOpnSta,0x80004674</comment></asm>
				<asm><cov>never</cov><addr>P:8000466E</addr><code>13F6</code><mnemonic>jnz16     d1,0x80004674</mnemonic><comment>Lamp_FrTrnSigLmpLftOpnSta,0x80004674</comment></asm>
				<asm><cov>never</cov><addr>P:80004670</addr><code>628016AB</code><mnemonic>sel       d6,d2,d6,#0x1</mnemonic><comment>d6,Lamp_FrTrnSigLmpRtOpnSta,d6,#1</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>880</line><src>                    MS2TICK(2000), 1);</src></hll>
				<asm><cov>never</cov><addr>P:80004674</addr><code>01DA</code><mnemonic>mov16     d15,#0x1</mnemonic><comment>Lamp_RrTrnSigLmpLftOpnSta,#1</comment></asm>
				<asm><cov>never</cov><addr>P:80004676</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic><comment>[a10],Lamp_RrTrnSigLmpLftOpnSta</comment></asm>
				<asm><cov>never</cov><addr>P:80004680</addr><code>700C803B</code><mnemonic>mov       d7,#0xC8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004684</addr><code>0578006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>881</line><src>    }</src></hll>
				<hll><line>882</line><src></src></hll>
				<hll><cov>never</cov><line>883</line><src>    if (!Get_HDA2_Option())</src></hll>
				<asm><cov>never</cov><addr>P:80004688</addr><code>09F8006D</code><mnemonic>call      0x80005A78</mnemonic><comment>Get_HDA2_Option</comment></asm>
				<asm><cov>never</cov><addr>P:8000468C</addr><code>25F6</code><mnemonic>jnz16     d2,0x80004696</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>884</line><src>        icu[ICU_C183E86_0].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000468E</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004692</addr><code>407828E9</code><mnemonic>st.b      [a2]0x538,d8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004970</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>885</line><src>}</src></hll>
				<hll><line>886</line><src></src></hll>
				<hll><line>887</line><src>static void update_yrs(void)</src></hll>
				<hll><line>888</line><src>{</src></hll>
				<hll><cov>never</cov><line>889</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>never</cov><addr>P:800046FE</addr><code>09CC006D</code><mnemonic>call      0x80005A96</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>890</line><src>    boolean meet_precond = (p-&gt;is_norm_vol == TRUE) &amp;&amp; (p-&gt;is_3s_after_ign_on == TRUE) &amp;&amp; (p-&gt;is_eng_run == TRUE) &amp;&amp; (p-&gt;is_not_ecan_busoff == TRUE);</src></hll>
				<asm><cov>never</cov><addr>P:80004702</addr><code>FA19FF61</code><mnemonic>fcall     0x80003B34</mnemonic><comment>.cocofun_44</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>891</line><src></src></hll>
				<hll><cov>never</cov><line>892</line><src>    uint16 YRS_YawRtVal = ref_sig.YRS_YawRtVal;</src></hll>
				<asm><cov>never</cov><addr>P:80004706</addr><code>08F4F309</code><mnemonic>ld.hu     d3,[a15]0x34</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>893</line><src>    uint16 YRS_LatAccelVal = ref_sig.YRS_LatAccelVal;</src></hll>
				<asm><cov>never</cov><addr>P:8000470C</addr><code>08F8F009</code><mnemonic>ld.hu     d0,[a15]0x38</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>894</line><src>    uint16 YRS_LongAccelVal = ref_sig.YRS_LongAccelVal;</src></hll>
				<asm><cov>never</cov><addr>P:80004714</addr><code>08F6F009</code><mnemonic>ld.hu     d0,[a15]0x36</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>895</line><src></src></hll>
				<hll><cov>never</cov><line>896</line><src>    if (is_timeout(CHASSIS_0, YRS_01_10ms_POS) == FALSE) {</src></hll>
				<asm><cov>never</cov><addr>P:80004718</addr><code>8025E2EF</code><mnemonic>jnz.t     d2,#0x1E,0x80004762</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>897</line><src>        update_info(&amp;yrs[YRS_C184286_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:80004752</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004756</addr><code>504444D9</code><mnemonic>lea       a4,[a4]0x544</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>898</line><src>                    (is_e2e_err(CHASSIS_0, YRS_01_10ms_POS) == TRUE) || (YRS_YawRtVal == 0xFFFF) || (YRS_LongAccelVal == 0xFFFF),</src></hll>
				<asm><cov>never</cov><addr>P:8000471C</addr><code>FAE5FF61</code><mnemonic>fcall     0x80003CE6</mnemonic><comment>.cocofun_79</comment></asm>
				<asm><cov>never</cov><addr>P:80004724</addr><code>25F6</code><mnemonic>jnz16     d2,0x8000472E</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004726</addr><code>FFFFF0BB</code><mnemonic>mov.u     d15,#0xFFFF</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000472A</addr><code>323E</code><mnemonic>jeq16     d15,d3,0x8000472E</mnemonic><comment>d15,IMU_YawRtVal,0x8000472E</comment></asm>
				<asm><cov>never</cov><addr>P:8000472C</addr><code>027E</code><mnemonic>jne16     d15,d0,0x80004730</mnemonic><comment>d15,IMU_LongAccelVal,0x80004730</comment></asm>
				<asm><cov>never</cov><addr>P:8000472E</addr><code>1582</code><mnemonic>mov16     d5,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>899</line><src>                    (is_updated(CHASSIS_0, YRS_01_10ms_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, YRS_01_10ms_POS) == FALSE) &amp;&amp; (YRS_YawRtVal != 0xFFFF) &amp;&amp; (YRS_LongAccelVal != 0xFFFF),</src></hll>
				<asm><cov>never</cov><addr>P:80004738</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000473C</addr><code>2976</code><mnemonic>jz16      d2,0x8000474E</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004742</addr><code>16F6</code><mnemonic>jnz16     d1,0x8000474E</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004744</addr><code>FFFFF0BB</code><mnemonic>mov.u     d15,#0xFFFF</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004748</addr><code>333E</code><mnemonic>jeq16     d15,d3,0x8000474E</mnemonic><comment>d15,IMU_YawRtVal,0x8000474E</comment></asm>
				<asm><cov>never</cov><addr>P:8000474A</addr><code>F03A</code><mnemonic>eq16      d15,d0,d15</mnemonic><comment>d15,IMU_LongAccelVal,d15</comment></asm>
				<asm><cov>never</cov><addr>P:8000474C</addr><code>16EA</code><mnemonic>cmovn16   d6,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>900</line><src>                    MS2TICK(100), VALID_CNT_THR);</src></hll>
				<asm><cov>never</cov><addr>P:8000474E</addr><code>02DA</code><mnemonic>mov16     d15,#0x2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004750</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000475A</addr><code>7000A03B</code><mnemonic>mov       d7,#0x0A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000475E</addr><code>050B006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>901</line><src>    }</src></hll>
				<hll><line>902</line><src>}</src></hll>
				<hll><line>903</line><src></src></hll>
				<hll><line>904</line><src>static void update_swrc(void)</src></hll>
				<hll><line>905</line><src>{</src></hll>
				<hll><cov>never</cov><line>906</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>never</cov><addr>P:80004762</addr><code>099A006D</code><mnemonic>call      0x80005A96</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>907</line><src>    boolean meet_precond = (p-&gt;is_norm_vol == TRUE) &amp;&amp; (p-&gt;is_3s_after_ign_on == TRUE) &amp;&amp; (p-&gt;is_eng_run == TRUE) &amp;&amp; (p-&gt;is_not_ecan_busoff == TRUE);</src></hll>
				<asm><cov>never</cov><addr>P:80004766</addr><code>F9E7FF61</code><mnemonic>fcall     0x80003B34</mnemonic><comment>.cocofun_44</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>908</line><src></src></hll>
				<hll><line>909</line><src>#if NO_SWRC == NOT_APPLIED</src></hll>
				<hll><cov>never</cov><line>910</line><src>    if (is_timeout(CHASSIS_0, SWRC_03_20ms_POS) == FALSE) {</src></hll>
				<asm><cov>never</cov><addr>P:80004770</addr><code>800DCFEF</code><mnemonic>jnz.t     d15,#0x1C,0x8000478A</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>911</line><src>        update_info(&amp;swrc[SWRC_C183D82_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:8000477A</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000477E</addr><code>504A44D9</code><mnemonic>lea       a4,[a4]0x54A</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>912</line><src>                    (is_e2e_err(CHASSIS_0, SWRC_03_20ms_POS) == TRUE),</src></hll>
				<asm><cov>never</cov><addr>P:80004782</addr><code>FA69FF61</code><mnemonic>fcall     0x80003C54</mnemonic><comment>.cocofun_65</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>913</line><src>                    (is_updated(CHASSIS_0, SWRC_03_20ms_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, SWRC_03_20ms_POS) == FALSE),</src></hll>
				<asm><cov>never</cov><addr>P:80004774</addr><code>F9F3FF61</code><mnemonic>fcall     0x80003B5A</mnemonic><comment>.cocofun_46</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>914</line><src>                    MS2TICK(2000), VALID_CNT_THR);</src></hll>
				<asm><cov>never</cov><addr>P:80004778</addr><code>A0B4</code><mnemonic>st16.h    [a10],d0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004786</addr><code>04F7006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>939</line><src></src></hll>
				<hll><line>940</line><src>static void update_sbcm(void)</src></hll>
				<hll><line>941</line><src>{</src></hll>
				<hll><line>942</line><src>#if OEM_CAR == HKMC_RS4 /* FIXME: REMOVE OEM_CAR for RS4_MCar, SBCM is not included in SG2EV_Proto */</src></hll>
				<hll><cov>never</cov><line>943</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>never</cov><addr>P:8000478E</addr><code>0984006D</code><mnemonic>call      0x80005A96</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>944</line><src>    boolean meet_precond = (p-&gt;is_norm_vol == TRUE) &amp;&amp; (p-&gt;is_3s_after_ign_on == TRUE) &amp;&amp; (p-&gt;is_not_ecan_busoff == TRUE);</src></hll>
				<asm><cov>never</cov><addr>P:80004792</addr><code>2F14</code><mnemonic>ld16.bu   d15,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004794</addr><code>0982</code><mnemonic>mov16     d9,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004796</addr><code>165E</code><mnemonic>jne16     d15,#0x1,0x800047A2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004798</addr><code>210C</code><mnemonic>ld16.bu   d15,[a2]0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000479A</addr><code>145E</code><mnemonic>jne16     d15,#0x1,0x800047A2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000479C</addr><code>240C</code><mnemonic>ld16.bu   d15,[a2]0x4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000479E</addr><code>1FBA</code><mnemonic>eq16      d15,d15,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047A0</addr><code>19AA</code><mnemonic>cmov16    d9,d15,#0x1</mnemonic><comment>meet_precond,d15,#1</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>945</line><src>    </src></hll>
				<hll><cov>never</cov><line>946</line><src>    uint8 SBCM_AST_DiagSta = ref_sig.SBCM_AST_DiagSta;</src></hll>
				<asm><cov>never</cov><addr>P:800047A4</addr><code>1040007B</code><mnemonic>movh      d1,#0x400</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047A8</addr><code>A008</code><mnemonic>ld16.bu   d0,[a15]0x0A</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>947</line><src>    uint8 SBCM_DRV_DiagSta = ref_sig.SBCM_DRV_DiagSta;</src></hll>
				<asm><cov>never</cov><addr>P:800047AA</addr><code>BA08</code><mnemonic>ld16.bu   d10,[a15]0x0B</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>948</line><src></src></hll>
				<hll><cov>never</cov><line>949</line><src>    if(is_timeout(CHASSIS_0, SBCM_AST_03_200ms_POS) == FALSE) {</src></hll>
				<asm><cov>never</cov><addr>P:800047AC</addr><code>8015A2EF</code><mnemonic>jnz.t     d2,#0x1A,0x800047D6</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>950</line><src>        update_info(&amp;sbcm[SBCM_C185481_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:800047C4</addr><code>FA72FF61</code><mnemonic>fcall     0x80003CA8</mnemonic><comment>.cocofun_73</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>951</line><src>                    SBCM_AST_DiagSta == 0x2,</src></hll>
				<asm><cov>never</cov><addr>P:800047C8</addr><code>5200208B</code><mnemonic>eq        d5,d0,#0x2</mnemonic><comment>d5,SBCM_AST_DiagSta,#2</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>952</line><src>                    (is_updated(CHASSIS_0, SBCM_AST_03_200ms_POS) == TRUE) &amp;&amp; SBCM_AST_DiagSta != 0x2,</src></hll>
				<asm><cov>never</cov><addr>P:800047B0</addr><code>FAB0FF61</code><mnemonic>fcall     0x80003D10</mnemonic><comment>.cocofun_83</comment></asm>
				<asm><cov>never</cov><addr>P:800047BA</addr><code>2376</code><mnemonic>jz16      d2,0x800047C0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047BC</addr><code>20BA</code><mnemonic>eq16      d15,d0,#0x2</mnemonic><comment>d15,SBCM_AST_DiagSta,#2</comment></asm>
				<asm><cov>never</cov><addr>P:800047BE</addr><code>16EA</code><mnemonic>cmovn16   d6,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>953</line><src>                    MS2TICK(1000), 1);</src></hll>
				<asm><cov>never</cov><addr>P:800047C0</addr><code>01DA</code><mnemonic>mov16     d15,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047C2</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047CC</addr><code>7006403B</code><mnemonic>mov       d7,#0x64</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047D0</addr><code>9402</code><mnemonic>mov16     d4,d9</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>never</cov><addr>P:800047D2</addr><code>04D1006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>954</line><src>    }</src></hll>
				<hll><line>955</line><src></src></hll>
				<hll><cov>never</cov><line>956</line><src>    if(is_timeout(CHASSIS_0, SBCM_DRV_02_200ms_POS) == 0) {</src></hll>
				<asm><cov>never</cov><addr>P:800047DC</addr><code>8016B0EF</code><mnemonic>jnz.t     d0,#0x1B,0x80004808</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>957</line><src>        update_info(&amp;sbcm[SBCM_C185381_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:800047F4</addr><code>FA5AFF61</code><mnemonic>fcall     0x80003CA8</mnemonic><comment>.cocofun_73</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>958</line><src>                    SBCM_DRV_DiagSta == 0x2,</src></hll>
				<asm><cov>never</cov><addr>P:800047F8</addr><code>52002A8B</code><mnemonic>eq        d5,d10,#0x2</mnemonic><comment>d5,SBCM_DRV_DiagSta,#2</comment></asm>
				<asm><cov>never</cov><addr>P:800047FC</addr><code>64B0</code><mnemonic>add16.a   a4,#0x6</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>959</line><src>                    (is_updated(CHASSIS_0, SBCM_DRV_02_200ms_POS) == TRUE) &amp;&amp; SBCM_DRV_DiagSta != 0x2,</src></hll>
				<asm><cov>never</cov><addr>P:800047E0</addr><code>FA98FF61</code><mnemonic>fcall     0x80003D10</mnemonic><comment>.cocofun_83</comment></asm>
				<asm><cov>never</cov><addr>P:800047EA</addr><code>0376</code><mnemonic>jz16      d0,0x800047F0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047EC</addr><code>2ABA</code><mnemonic>eq16      d15,d10,#0x2</mnemonic><comment>d15,SBCM_DRV_DiagSta,#2</comment></asm>
				<asm><cov>never</cov><addr>P:800047EE</addr><code>16EA</code><mnemonic>cmovn16   d6,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>960</line><src>                    MS2TICK(1000), 1);</src></hll>
				<asm><cov>never</cov><addr>P:800047F0</addr><code>01DA</code><mnemonic>mov16     d15,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047F2</addr><code>AFB4</code><mnemonic>st16.h    [a10],d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047FE</addr><code>9402</code><mnemonic>mov16     d4,d9</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>never</cov><addr>P:80004800</addr><code>7006403B</code><mnemonic>mov       d7,#0x64</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004804</addr><code>04B8006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>986</line><src></src></hll>
				<hll><line>987</line><src>static void update_icsc(void)</src></hll>
				<hll><line>988</line><src>{</src></hll>
				<hll><cov>never</cov><line>989</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>never</cov><addr>P:800045F0</addr><code>0A53006D</code><mnemonic>call      0x80005A96</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>990</line><src>    boolean meet_precond = (p-&gt;is_norm_vol == TRUE) &amp;&amp; (p-&gt;is_3s_after_ign_on == TRUE) &amp;&amp; (p-&gt;is_eng_run == TRUE) &amp;&amp; (p-&gt;is_not_ecan_busoff == TRUE);</src></hll>
				<asm><cov>never</cov><addr>P:800045F4</addr><code>FAA0FF61</code><mnemonic>fcall     0x80003B34</mnemonic><comment>.cocofun_44</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>991</line><src></src></hll>
				<hll><line>992</line><src>#if ICSC_MSG == APPLIED</src></hll>
				<hll><cov>never</cov><line>993</line><src>    if (is_timeout(CHASSIS_0, ICSC_02_100ms_POS) == FALSE) {</src></hll>
				<asm><cov>never</cov><addr>P:800045FE</addr><code>800F2FEF</code><mnemonic>jnz.t     d15,#0x12,0x8000461C</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>994</line><src>        update_info(&amp;icsc[ICSC_C187002_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:80004606</addr><code>52200F8B</code><mnemonic>ne        d5,d15,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000460A</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004614</addr><code>505044D9</code><mnemonic>lea       a4,[a4]0x550</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>995</line><src>                    (is_e2e_err(CHASSIS_0, ICSC_02_100ms_POS) == TRUE),</src></hll>
				<asm><cov>never</cov><addr>P:80004606</addr><code>52200F8B</code><mnemonic>ne        d5,d15,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000460A</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>996</line><src>                    (is_updated(CHASSIS_0, ICSC_02_100ms_POS) == TRUE) &amp;&amp; (is_e2e_err(CHASSIS_0, ICSC_02_100ms_POS) == FALSE),</src></hll>
				<asm><cov>never</cov><addr>P:80004602</addr><code>FAACFF61</code><mnemonic>fcall     0x80003B5A</mnemonic><comment>.cocofun_46</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>997</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<asm><cov>never</cov><addr>P:8000460E</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004612</addr><code>A0B4</code><mnemonic>st16.h    [a10],d0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004618</addr><code>05AE006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1361</line><src></src></hll>
				<hll><line>1362</line><src>static void update_fr_cmr(void)</src></hll>
				<hll><line>1363</line><src>{</src></hll>
				<hll><cov>never</cov><line>1364</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>never</cov><addr>P:80004810</addr><code>0943006D</code><mnemonic>call      0x80005A96</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1365</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_acan1_busoff;</src></hll>
				<asm><cov>never</cov><addr>P:80004814</addr><code>2F14</code><mnemonic>ld16.bu   d15,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004816</addr><code>0A82</code><mnemonic>mov16     d10,#0x0</mnemonic><comment>SBCM_DRV_DiagSta,#0</comment></asm>
				<asm><cov>never</cov><addr>P:80004818</addr><code>076E</code><mnemonic>jz16      d15,0x80004826</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000481A</addr><code>210C</code><mnemonic>ld16.bu   d15,[a2]0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000481C</addr><code>056E</code><mnemonic>jz16      d15,0x80004826</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000481E</addr><code>230C</code><mnemonic>ld16.bu   d15,[a2]0x3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004820</addr><code>036E</code><mnemonic>jz16      d15,0x80004826</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004822</addr><code>250C</code><mnemonic>ld16.bu   d15,[a2]0x5</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004824</addr><code>1AAA</code><mnemonic>cmov16    d10,d15,#0x1</mnemonic><comment>meet_precond,d15,#1</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1366</line><src></src></hll>
				<hll><cov>never</cov><line>1367</line><src>    uint8 FR_CMR_Genrl_FlInfoSta = ref_sig.FR_CMR_Genrl_FlInfoSta;</src></hll>
				<asm><cov>never</cov><addr>P:8000482C</addr><code>1849F909</code><mnemonic>ld.bu     d9,[a15]0x49</mnemonic><comment>meet_precond,[a15]73</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1368</line><src>    uint8 LFA_ShrtkeySwSta = ref_sig.LFA_ShrtkeySwSta;</src></hll>
				<asm><cov>never</cov><addr>P:80004830</addr><code>184AFF09</code><mnemonic>ld.bu     d15,[a15]0x4A</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1369</line><src>    if (!is_timeout(A_FR_CMR_0, A_FR_CMR_Genrl_01_30ms_POS)) {</src></hll>
				<asm><cov>never</cov><addr>P:80004834</addr><code>801D106F</code><mnemonic>jnz.t     d0,#0x1,0x8000486E</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1370</line><src>        update_info(&amp;fr_cmr[FR_CMR_28B086_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:80004838</addr><code>A402</code><mnemonic>mov16     d4,d10</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>never</cov><addr>P:8000483A</addr><code>E9004091</code><mnemonic>movh.a    a14,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000483E</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004842</addr><code>206EEED9</code><mnemonic>lea       a14,[a14]0x4AE</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1371</line><src>                    FR_CMR_Genrl_FlInfoSta == 2,</src></hll>
				<asm><cov>never</cov><addr>P:80004846</addr><code>5200298B</code><mnemonic>eq        d5,d9,#0x2</mnemonic><comment>d5,FR_CMR_Genrl_FlInfoSta,#2</comment></asm>
				<asm><cov>never</cov><addr>P:8000484A</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000484C</addr><code>6220298B</code><mnemonic>ne        d6,d9,#0x2</mnemonic><comment>d6,FR_CMR_Genrl_FlInfoSta,#2</comment></asm>
				<asm><cov>never</cov><addr>P:80004850</addr><code>E440</code><mnemonic>mov16.aa  a4,a14</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004852</addr><code>0491006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1372</line><src>                    FR_CMR_Genrl_FlInfoSta != 2,</src></hll>
				<hll><cov>never</cov><line>1373</line><src>                    MS2TICK(500), MS2TICK(500));</src></hll>
				<asm><cov>never</cov><addr>P:80004838</addr><code>A402</code><mnemonic>mov16     d4,d10</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>never</cov><addr>P:8000483A</addr><code>E9004091</code><mnemonic>movh.a    a14,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000483E</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004842</addr><code>206EEED9</code><mnemonic>lea       a14,[a14]0x4AE</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1374</line><src></src></hll>
				<hll><cov>never</cov><line>1375</line><src>        update_info(&amp;fr_cmr[FR_CMR_NA_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:80004856</addr><code>A402</code><mnemonic>mov16     d4,d10</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>never</cov><addr>P:80004858</addr><code>0A0CE449</code><mnemonic>lea       a4,[a14]0x0C</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000485C</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004860</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1376</line><src>                    FR_CMR_Genrl_FlInfoSta == 1,</src></hll>
				<asm><cov>never</cov><addr>P:80004862</addr><code>5200198B</code><mnemonic>eq        d5,d9,#0x1</mnemonic><comment>d5,FR_CMR_Genrl_FlInfoSta,#1</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1377</line><src>                    FR_CMR_Genrl_FlInfoSta != 1,</src></hll>
				<hll><cov>never</cov><line>1378</line><src>                    MS2TICK(500), MS2TICK(500));</src></hll>
				<asm><cov>never</cov><addr>P:80004856</addr><code>A402</code><mnemonic>mov16     d4,d10</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>never</cov><addr>P:80004858</addr><code>0A0CE449</code><mnemonic>lea       a4,[a14]0x0C</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000485C</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004860</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004866</addr><code>6220198B</code><mnemonic>ne        d6,d9,#0x1</mnemonic><comment>d6,FR_CMR_Genrl_FlInfoSta,#1</comment></asm>
				<asm><cov>never</cov><addr>P:8000486A</addr><code>0485006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1379</line><src>    }</src></hll>
				<hll><line>1380</line><src></src></hll>
				<hll><line>1381</line><src>#if LFA_SW_INTEG == APPLIED</src></hll>
				<hll><cov>never</cov><line>1382</line><src>    if (!is_timeout(A_FR_CMR_0, A_FR_CMR_Ctrl_01_10ms_POS)) {</src></hll>
				<asm><cov>never</cov><addr>P:80004870</addr><code>8013006F</code><mnemonic>jnz.t     d0,#0x0,0x80004896</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>1383</line><src>        update_info(&amp;fr_cmr[FR_CMR_28B086_1], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:8000487C</addr><code>52003F8B</code><mnemonic>eq        d5,d15,#0x3</mnemonic><comment>d5,LFA_ShrtkeySwSta,#3</comment></asm>
				<asm><cov>never</cov><addr>P:80004880</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004890</addr><code>64B0</code><mnemonic>add16.a   a4,#0x6</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1384</line><src>                    LFA_ShrtkeySwSta == 3,</src></hll>
				<asm><cov>never</cov><addr>P:8000487C</addr><code>52003F8B</code><mnemonic>eq        d5,d15,#0x3</mnemonic><comment>d5,LFA_ShrtkeySwSta,#3</comment></asm>
				<asm><cov>never</cov><addr>P:80004880</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1385</line><src>                    LFA_ShrtkeySwSta == 0 || LFA_ShrtkeySwSta == 1,</src></hll>
				<asm><cov>never</cov><addr>P:80004874</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004876</addr><code>026E</code><mnemonic>jz16      d15,0x8000487A</mnemonic><comment>LFA_ShrtkeySwSta,0x8000487A</comment></asm>
				<asm><cov>never</cov><addr>P:80004878</addr><code>125E</code><mnemonic>jne16     d15,#0x1,0x8000487C</mnemonic><comment>LFA_ShrtkeySwSta,#1,0x8000487C</comment></asm>
				<asm><cov>never</cov><addr>P:8000487A</addr><code>1682</code><mnemonic>mov16     d6,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>1386</line><src>                    MS2TICK(500), MS2TICK(500));</src></hll>
				<asm><cov>never</cov><addr>P:80004884</addr><code>A402</code><mnemonic>mov16     d4,d10</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>never</cov><addr>P:80004886</addr><code>206E44D9</code><mnemonic>lea       a4,[a4]0x4AE</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000488A</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000488E</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004892</addr><code>0471006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1387</line><src>    }</src></hll>
				<hll><line>1388</line><src>#endif /* LFA_SW_INTEG */</src></hll>
				<hll><line>1389</line><src>}</src></hll>
				<hll><line>1390</line><src></src></hll>
				<hll><line>1391</line><src>static void update_fr_rdr(void)</src></hll>
				<hll><line>1392</line><src>{</src></hll>
				<hll><cov>never</cov><line>1393</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>never</cov><addr>P:80004896</addr><code>0900006D</code><mnemonic>call      0x80005A96</mnemonic><comment>get_precond_ptr</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1394</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_acan1_busoff;</src></hll>
				<asm><cov>never</cov><addr>P:8000489A</addr><code>2F14</code><mnemonic>ld16.bu   d15,[a2]</mnemonic><comment>LFA_ShrtkeySwSta,[a2]</comment></asm>
				<asm><cov>never</cov><addr>P:8000489C</addr><code>0982</code><mnemonic>mov16     d9,#0x0</mnemonic><comment>FR_CMR_Genrl_FlInfoSta,#0</comment></asm>
				<asm><cov>never</cov><addr>P:8000489E</addr><code>076E</code><mnemonic>jz16      d15,0x800048AC</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048A0</addr><code>210C</code><mnemonic>ld16.bu   d15,[a2]0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048A2</addr><code>056E</code><mnemonic>jz16      d15,0x800048AC</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048A4</addr><code>230C</code><mnemonic>ld16.bu   d15,[a2]0x3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048A6</addr><code>036E</code><mnemonic>jz16      d15,0x800048AC</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048A8</addr><code>250C</code><mnemonic>ld16.bu   d15,[a2]0x5</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048AA</addr><code>19AA</code><mnemonic>cmov16    d9,d15,#0x1</mnemonic><comment>meet_precond,d15,#1</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1395</line><src></src></hll>
				<hll><cov>never</cov><line>1396</line><src>    uint8 FR_RDR_Genrl_FlInfoSta = ref_sig.FR_RDR_Genrl_FlInfoSta;</src></hll>
				<asm><cov>never</cov><addr>P:800048AE</addr><code>184BFA09</code><mnemonic>ld.bu     d10,[a15]0x4B</mnemonic><comment>meet_precond,[a15]75</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1397</line><src>    if (!is_timeout(A_FR_RDR_0, A_FR_RDR_Genrl_01_50ms_POS)) {</src></hll>
				<asm><cov>never</cov><addr>P:800048B2</addr><code>801B0F6F</code><mnemonic>jnz.t     d15,#0x0,0x800048E8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1398</line><src>        update_info(&amp;fr_rdr[FR_RDR_C28B186_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:800048B6</addr><code>F9F4FF61</code><mnemonic>fcall     0x80003C9E</mnemonic><comment>.cocofun_72</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1399</line><src>                    FR_RDR_Genrl_FlInfoSta == 2,</src></hll>
				<asm><cov>never</cov><addr>P:800048C0</addr><code>52002A8B</code><mnemonic>eq        d5,d10,#0x2</mnemonic><comment>d5,FR_RDR_Genrl_FlInfoSta,#2</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1400</line><src>                    FR_RDR_Genrl_FlInfoSta != 2,</src></hll>
				<hll><cov>never</cov><line>1401</line><src>                    MS2TICK(500), MS2TICK(500));</src></hll>
				<asm><cov>never</cov><addr>P:800048BA</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048BE</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048C4</addr><code>62202A8B</code><mnemonic>ne        d6,d10,#0x2</mnemonic><comment>d6,FR_RDR_Genrl_FlInfoSta,#2</comment></asm>
				<asm><cov>never</cov><addr>P:800048C8</addr><code>F440</code><mnemonic>mov16.aa  a4,a15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048CA</addr><code>9402</code><mnemonic>mov16     d4,d9</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>never</cov><addr>P:800048CC</addr><code>0454006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1402</line><src></src></hll>
				<hll><cov>never</cov><line>1403</line><src>        update_info(&amp;fr_rdr[FR_RDR_NA_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:800048D0</addr><code>9402</code><mnemonic>mov16     d4,d9</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>never</cov><addr>P:800048D2</addr><code>6FB0</code><mnemonic>add16.a   a15,#0x6</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048D4</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048D8</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1404</line><src>                    FR_RDR_Genrl_FlInfoSta == 1,</src></hll>
				<asm><cov>never</cov><addr>P:800048DA</addr><code>52001A8B</code><mnemonic>eq        d5,d10,#0x1</mnemonic><comment>d5,FR_RDR_Genrl_FlInfoSta,#1</comment></asm>
				<asm><cov>never</cov><addr>P:800048DE</addr><code>F440</code><mnemonic>mov16.aa  a4,a15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048E0</addr><code>62201A8B</code><mnemonic>ne        d6,d10,#0x1</mnemonic><comment>d6,FR_RDR_Genrl_FlInfoSta,#1</comment></asm>
				<asm><cov>never</cov><addr>P:800048E4</addr><code>0448006D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1405</line><src>                    FR_RDR_Genrl_FlInfoSta != 1,</src></hll>
				<hll><cov>never</cov><line>1406</line><src>                    MS2TICK(500), MS2TICK(500));</src></hll>
				<asm><cov>never</cov><addr>P:800048D0</addr><code>9402</code><mnemonic>mov16     d4,d9</mnemonic><comment>d4,meet_precond</comment></asm>
				<asm><cov>never</cov><addr>P:800048D2</addr><code>6FB0</code><mnemonic>add16.a   a15,#0x6</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048D4</addr><code>7003203B</code><mnemonic>mov       d7,#0x32</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048D8</addr><code>A7B4</code><mnemonic>st16.h    [a10],d7</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1528</line><src></src></hll>
				<hll><cov>never</cov><line>1529</line><src>void FS_UpdateInfo_InvalidSignal(void)</src></hll>
				<asm><cov>never</cov><addr>P:8000458C</addr><code>0820</code><label>FS_UpdateInfo_InvalidSignal:                                                                                                                                                                                                                                    </label><mnemonic>sub16.a   a10,#0x8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1530</line><src>{</src></hll>
				<hll><line>1531</line><src>    /* Chassis CAN */</src></hll>
				<hll><line>1532</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>1533</line><src>#if VEH_TYPE == NORMAL</src></hll>
				<hll><cov>never</cov><line>1534</line><src>    update_ems();</src></hll>
				<asm><cov>never</cov><addr>P:8000458E</addr><code>02A4006D</code><mnemonic>call      0x80004AD6</mnemonic><comment>update_ems</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1535</line><src>    update_tcu();</src></hll>
				<hll><line>1536</line><src>#elif VEH_TYPE == EV</src></hll>
				<hll><line>1537</line><src>    update_vcu();</src></hll>
				<hll><line>1538</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>1539</line><src>    update_ems();</src></hll>
				<hll><line>1540</line><src>    update_hcu();</src></hll>
				<hll><line>1541</line><src>    update_htcu();</src></hll>
				<hll><line>1542</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><cov>never</cov><line>1543</line><src>    update_clu();</src></hll>
				<asm><cov>never</cov><addr>P:800045E6</addr><code>0882</code><mnemonic>mov16     d8,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045E8</addr><code>0236006D</code><mnemonic>call      0x80004A54</mnemonic><comment>update_clu</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1544</line><src>    update_esc();</src></hll>
				<asm><cov>never</cov><addr>P:800045EC</addr><code>02DA006D</code><mnemonic>call      0x80004BA0</mnemonic><comment>update_esc</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1545</line><src>    update_icsc();</src></hll>
				<hll><line>1546</line><src>    update_icu();</src></hll>
				<hll><cov>never</cov><line>1547</line><src>    update_mdps();</src></hll>
				<asm><cov>never</cov><addr>P:80004696</addr><code>0597006D</code><mnemonic>call      0x800051C4</mnemonic><comment>update_mdps</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1548</line><src>    update_sas();</src></hll>
				<hll><line>1549</line><src>    update_yrs();</src></hll>
				<hll><line>1550</line><src>    update_swrc();</src></hll>
				<hll><cov>never</cov><line>1551</line><src>    update_bcm();</src></hll>
				<asm><cov>never</cov><addr>P:8000478A</addr><code>012A006D</code><mnemonic>call      0x800049DE</mnemonic><comment>update_bcm</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1552</line><src>    update_sbcm();</src></hll>
				<hll><cov>never</cov><line>1553</line><src>    update_hod();</src></hll>
				<asm><cov>never</cov><addr>P:80004808</addr><code>0480006D</code><mnemonic>call      0x80005108</mnemonic><comment>update_hod</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1554</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>1555</line><src>    update_ems();</src></hll>
				<hll><line>1556</line><src>    update_tcu();</src></hll>
				<hll><line>1557</line><src>    update_cgw();</src></hll>
				<hll><line>1558</line><src>    update_clu();</src></hll>
				<hll><line>1559</line><src>    update_esc();</src></hll>
				<hll><line>1560</line><src>    update_mdps();</src></hll>
				<hll><line>1561</line><src>    update_sas();</src></hll>
				<hll><line>1562</line><src>#endif /* CCAN */</src></hll>
				<hll><line>1563</line><src></src></hll>
				<hll><line>1564</line><src>    /* NAVI */</src></hll>
				<hll><cov>never</cov><line>1565</line><src>    update_navi();</src></hll>
				<asm><cov>never</cov><addr>P:8000480C</addr><code>05B5006D</code><mnemonic>call      0x80005376</mnemonic><comment>update_navi</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1566</line><src></src></hll>
				<hll><line>1567</line><src>    /* Local CAN */</src></hll>
				<hll><line>1568</line><src>    update_fr_cmr();</src></hll>
				<hll><line>1569</line><src>    update_fr_rdr();</src></hll>
				<hll><cov>never</cov><line>1570</line><src>    update_fr_c_rdr();</src></hll>
				<asm><cov>never</cov><addr>P:800048E8</addr><code>02C8006D</code><mnemonic>call      0x80004E78</mnemonic><comment>update_fr_c_rdr</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1571</line><src></src></hll>
				<hll><line>1572</line><src>    /* Radar Blockage Flag (CR: HKGL3-923) */</src></hll>
				<hll><cov>never</cov><line>1573</line><src>    update_rdr_fail_flg();</src></hll>
				<asm><cov>never</cov><addr>P:800048EC</addr><code>0626006D</code><mnemonic>call      0x80005538</mnemonic><comment>update_rdr_fail_flg</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1574</line><src></src></hll>
				<hll><line>1575</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>1576</line><src>    /* Recover group 5 */</src></hll>
				<hll><line>1577</line><src>    int i;</src></hll>
				<hll><cov>never</cov><line>1578</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], CLU_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:800048F0</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048F4</addr><code>7056FFD9</code><mnemonic>lea       a15,[a15]0x5D6</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048F8</addr><code>5F08</code><mnemonic>ld16.bu   d15,[a15]0x5</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048FA</addr><code>082E</code><mnemonic>jz16.t    d15,#0x0,0x8000490A</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1579</line><src>        for (i = CLU_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<asm><cov>never</cov><addr>P:80004904</addr><code>14A0</code><mnemonic>mov16.a   a4,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004906</addr><code>F979FF61</code><mnemonic>fcall     0x80003BF8</mnemonic><comment>.cocofun_57</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1580</line><src>                        clu[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:800048FC</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004900</addr><code>307A22D9</code><mnemonic>lea       a2,[a2]0x4FA</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1581</line><src>                }</src></hll>
				<hll><line>1582</line><src>        }</src></hll>
				<hll><cov>never</cov><line>1583</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], ESC_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:8000490A</addr><code>182E</code><mnemonic>jz16.t    d15,#0x1,0x8000491A</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1584</line><src>        for (i = ESC_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<asm><cov>never</cov><addr>P:80004914</addr><code>94A0</code><mnemonic>mov16.a   a4,#0x9</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004916</addr><code>F971FF61</code><mnemonic>fcall     0x80003BF8</mnemonic><comment>.cocofun_57</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1585</line><src>                        esc[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000490C</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004910</addr><code>104222D9</code><mnemonic>lea       a2,[a2]0x442</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1586</line><src>                }</src></hll>
				<hll><line>1587</line><src>        }</src></hll>
				<hll><cov>never</cov><line>1588</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], MDPS_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:8000491A</addr><code>282E</code><mnemonic>jz16.t    d15,#0x2,0x8000492A</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1589</line><src>        for (i = MDPS_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<asm><cov>never</cov><addr>P:80004924</addr><code>44A0</code><mnemonic>mov16.a   a4,#0x4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004926</addr><code>F969FF61</code><mnemonic>fcall     0x80003BF8</mnemonic><comment>.cocofun_57</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1590</line><src>                        mdps[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000491C</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004920</addr><code>204622D9</code><mnemonic>lea       a2,[a2]0x486</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1591</line><src>                }</src></hll>
				<hll><line>1592</line><src>        }</src></hll>
				<hll><cov>never</cov><line>1593</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], SAS_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:8000492A</addr><code>352E</code><mnemonic>jz16.t    d15,#0x3,0x80004934</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004930</addr><code>407E28E9</code><mnemonic>st.b      [a2]0x53E,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1594</line><src>        for (i = SAS_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<hll><cov>never</cov><line>1595</line><src>                        sas[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000492C</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1596</line><src>                }</src></hll>
				<hll><line>1597</line><src>        }</src></hll>
				<hll><line>1598</line><src>#if VEH_TYPE == NORMAL</src></hll>
				<hll><cov>never</cov><line>1599</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], EMS_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:80004934</addr><code>482E</code><mnemonic>jz16.t    d15,#0x4,0x80004944</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1600</line><src>        for (i = EMS_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<asm><cov>never</cov><addr>P:8000493E</addr><code>24A0</code><mnemonic>mov16.a   a4,#0x2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004940</addr><code>F95CFF61</code><mnemonic>fcall     0x80003BF8</mnemonic><comment>.cocofun_57</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1601</line><src>                        ems[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:80004936</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000493A</addr><code>206E22D9</code><mnemonic>lea       a2,[a2]0x4AE</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1602</line><src>                }</src></hll>
				<hll><line>1603</line><src>        }</src></hll>
				<hll><cov>never</cov><line>1604</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], TCU_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:80004944</addr><code>552E</code><mnemonic>jz16.t    d15,#0x5,0x8000494E</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000494A</addr><code>407228E9</code><mnemonic>st.b      [a2]0x532,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1605</line><src>        for (i = TCU_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<hll><cov>never</cov><line>1606</line><src>                        tcu[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:80004946</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1607</line><src>                }</src></hll>
				<hll><line>1608</line><src>        }</src></hll>
				<hll><line>1609</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>1610</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], EMS_INVALID_SIGNAL) != 0) {</src></hll>
				<hll><line>1611</line><src>        for (i = EMS_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<hll><line>1612</line><src>                        ems[i].fault = FALSE;</src></hll>
				<hll><line>1613</line><src>                }</src></hll>
				<hll><line>1614</line><src>        }</src></hll>
				<hll><line>1615</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], TCU_INVALID_SIGNAL) != 0) {</src></hll>
				<hll><line>1616</line><src>        for (i = HTCU_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<hll><line>1617</line><src>                        htcu[i].fault = FALSE;</src></hll>
				<hll><line>1618</line><src>                }</src></hll>
				<hll><line>1619</line><src>        }</src></hll>
				<hll><line>1620</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><cov>never</cov><line>1621</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], YRS_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:8000494E</addr><code>652E</code><mnemonic>jz16.t    d15,#0x6,0x80004958</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004954</addr><code>504428E9</code><mnemonic>st.b      [a2]0x544,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1622</line><src>        for (i = YRS_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<hll><cov>never</cov><line>1623</line><src>                        yrs[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:80004950</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1624</line><src>                }</src></hll>
				<hll><line>1625</line><src>        }</src></hll>
				<hll><cov>never</cov><line>1626</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], SWRC_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:80004958</addr><code>752E</code><mnemonic>jz16.t    d15,#0x7,0x80004962</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000495E</addr><code>504A28E9</code><mnemonic>st.b      [a2]0x54A,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1627</line><src>        for (i = SWRC_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<hll><cov>never</cov><line>1628</line><src>                        swrc[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000495A</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1629</line><src>                }</src></hll>
				<hll><line>1630</line><src>        }</src></hll>
				<hll><line>1631</line><src></src></hll>
				<hll><line>1632</line><src>    /* Recover group 6 */</src></hll>
				<hll><line>1633</line><src>#if VEH_TYPE == EV</src></hll>
				<hll><line>1634</line><src>   if (TEST_BIT(recover_mask[RECOVER_GROUP_6], VCU_HCU_INVALID_SIGNAL) != 0) {</src></hll>
				<hll><line>1635</line><src>        for (i = VCU_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<hll><line>1636</line><src>                        vcu[i].fault = FALSE;</src></hll>
				<hll><line>1637</line><src>                }</src></hll>
				<hll><line>1638</line><src>   }</src></hll>
				<hll><line>1639</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>1640</line><src>   if (TEST_BIT(recover_mask[RECOVER_GROUP_6], VCU_HCU_INVALID_SIGNAL) != 0) {</src></hll>
				<hll><line>1641</line><src>        for (i = HCU_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<hll><line>1642</line><src>                        hcu[i].fault = FALSE;</src></hll>
				<hll><line>1643</line><src>                }</src></hll>
				<hll><line>1644</line><src>   }</src></hll>
				<hll><line>1645</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><cov>never</cov><line>1646</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], ICSC_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:80004962</addr><code>6F08</code><mnemonic>ld16.bu   d15,[a15]0x6</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004964</addr><code>152E</code><mnemonic>jz16.t    d15,#0x1,0x8000496E</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000496A</addr><code>5050F8E9</code><mnemonic>st.b      [a15]0x550,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1647</line><src>        for (i = ICSC_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<hll><cov>never</cov><line>1648</line><src>                        icsc[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:80004966</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1649</line><src>                }</src></hll>
				<hll><line>1650</line><src>        }</src></hll>
				<hll><cov>never</cov><line>1651</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], ICU_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:8000496E</addr><code>252E</code><mnemonic>jz16.t    d15,#0x2,0x80004978</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004974</addr><code>4078F8E9</code><mnemonic>st.b      [a15]0x538,d8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1652</line><src>        for (i = ICU_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<hll><line>1653</line><src>                        icu[i].fault = FALSE;</src></hll>
				<hll><line>1654</line><src>                }</src></hll>
				<hll><line>1655</line><src>        }</src></hll>
				<hll><cov>never</cov><line>1656</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], NAVI_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:80004978</addr><code>382E</code><mnemonic>jz16.t    d15,#0x3,0x80004988</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1657</line><src>        for (i = NAVI_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<asm><cov>never</cov><addr>P:80004982</addr><code>12A0</code><mnemonic>mov16.a   a2,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004984</addr><code>F93EFF61</code><mnemonic>fcall     0x80003C00</mnemonic><comment>.cocofun_58</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1658</line><src>                        navi[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000497A</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000497E</addr><code>405EFFD9</code><mnemonic>lea       a15,[a15]0x51E</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1659</line><src>                }</src></hll>
				<hll><line>1660</line><src>        }</src></hll>
				<hll><cov>never</cov><line>1661</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_CMR_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:80004988</addr><code>482E</code><mnemonic>jz16.t    d15,#0x4,0x80004998</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1662</line><src>        for (i = FR_CMR_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<asm><cov>never</cov><addr>P:80004992</addr><code>22A0</code><mnemonic>mov16.a   a2,#0x2</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004994</addr><code>F936FF61</code><mnemonic>fcall     0x80003C00</mnemonic><comment>.cocofun_58</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1663</line><src>                        fr_cmr[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000498A</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000498E</addr><code>3040FFD9</code><mnemonic>lea       a15,[a15]0x4C0</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1664</line><src>                }</src></hll>
				<hll><line>1665</line><src>        }</src></hll>
				<hll><cov>never</cov><line>1666</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_RDR_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:80004998</addr><code>582E</code><mnemonic>jz16.t    d15,#0x5,0x800049A8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1667</line><src>        for (i = FR_RDR_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<asm><cov>never</cov><addr>P:800049A2</addr><code>12A0</code><mnemonic>mov16.a   a2,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800049A4</addr><code>F92EFF61</code><mnemonic>fcall     0x80003C00</mnemonic><comment>.cocofun_58</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1668</line><src>                        fr_rdr[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000499A</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000499E</addr><code>406AFFD9</code><mnemonic>lea       a15,[a15]0x52A</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1669</line><src>                }</src></hll>
				<hll><line>1670</line><src>        }</src></hll>
				<hll><cov>never</cov><line>1671</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_C_RDR_INVALID_SIGNAL) != 0) {</src></hll>
				<asm><cov>never</cov><addr>P:800049A8</addr><code>692E</code><mnemonic>jz16.t    d15,#0x6,0x800049BA</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1672</line><src>        for (i = FR_C_RDR_ITEM_NUM; i--&gt;0; ) {</src></hll>
				<asm><cov>never</cov><addr>P:800049B2</addr><code>001302C5</code><mnemonic>lea       a2,0x13</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800049B6</addr><code>F925FF61</code><mnemonic>fcall     0x80003C00</mnemonic><comment>.cocofun_58</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1673</line><src>                        fr_c_rdr[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:800049AA</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800049AE</addr><code>E038FFD9</code><mnemonic>lea       a15,[a15]0x3B8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1674</line><src>                }</src></hll>
				<hll><line>1675</line><src>        }</src></hll>
				<hll><line>1676</line><src></src></hll>
				<hll><line>1677</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>1678</line><src>    /* Recover group 5 */</src></hll>
				<hll><line>1679</line><src>    int i;</src></hll>
				<hll><line>1680</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], CGW_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1681</line><src>        for (i = CGW_ITEM_NUM; i--&gt;0; ) cgw[i].fault = FALSE;</src></hll>
				<hll><line>1682</line><src>        }</src></hll>
				<hll><line>1683</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], CLU_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1684</line><src>        for (i = CLU_ITEM_NUM; i--&gt;0; ) clu[i].fault = FALSE;</src></hll>
				<hll><line>1685</line><src>        }</src></hll>
				<hll><line>1686</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], ESC_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1687</line><src>        for (i = ESC_ITEM_NUM; i--&gt;0; ) esc[i].fault = FALSE;</src></hll>
				<hll><line>1688</line><src>        }</src></hll>
				<hll><line>1689</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], MDPS_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1690</line><src>        for (i = MDPS_ITEM_NUM; i--&gt;0; ) mdps[i].fault = FALSE;</src></hll>
				<hll><line>1691</line><src>        }</src></hll>
				<hll><line>1692</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], SAS_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1693</line><src>        for (i = SAS_ITEM_NUM; i--&gt;0; ) sas[i].fault = FALSE;</src></hll>
				<hll><line>1694</line><src>        }</src></hll>
				<hll><line>1695</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], EMS_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1696</line><src>        for (i = EMS_ITEM_NUM; i--&gt;0; ) ems[i].fault = FALSE;</src></hll>
				<hll><line>1697</line><src>        }</src></hll>
				<hll><line>1698</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_5], TCU_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1699</line><src>        for (i = TCU_ITEM_NUM; i--&gt;0; ) tcu[i].fault = FALSE;</src></hll>
				<hll><line>1700</line><src>        }</src></hll>
				<hll><line>1701</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], NAVI_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1702</line><src>        for (i = NAVI_ITEM_NUM; i--&gt;0; ) navi[i].fault = FALSE;</src></hll>
				<hll><line>1703</line><src>        }</src></hll>
				<hll><line>1704</line><src></src></hll>
				<hll><line>1705</line><src>    /* Recover group 6 */</src></hll>
				<hll><line>1706</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_CMR_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1707</line><src>        for (i = FR_CMR_ITEM_NUM; i--&gt;0; ) fr_cmr[i].fault = FALSE;</src></hll>
				<hll><line>1708</line><src>        }</src></hll>
				<hll><line>1709</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_RDR_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1710</line><src>        for (i = FR_RDR_ITEM_NUM; i--&gt;0; ) fr_rdr[i].fault = FALSE;</src></hll>
				<hll><line>1711</line><src>        }</src></hll>
				<hll><line>1712</line><src>    if (TEST_BIT(recover_mask[RECOVER_GROUP_6], FR_C_RDR_INVALID_SIGNAL)) {</src></hll>
				<hll><line>1713</line><src>        for (i = FR_C_RDR_ITEM_NUM; i--&gt;0; ) fr_c_rdr[i].fault = FALSE;</src></hll>
				<hll><line>1714</line><src>        }</src></hll>
				<hll><line>1715</line><src>#endif /* CCAN */</src></hll>
				<hll><cov>never</cov><line>1716</line><src>}</src></hll>
				<asm><cov>never</cov><addr>P:800049BA</addr><code>9000</code><mnemonic>ret16     </mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\SWC_Failsafe.h" type="multiple">
				<hll><line>1</line><src>#ifndef FAILSAFE_H</src></hll>
				<hll><line>2</line><src>#define FAILSAFE_H</src></hll>
				<hll><line>3</line><src></src></hll>
				<hll><line>4</line><src>#include &quot;Platform_Types.h&quot;</src></hll>
				<hll><line>5</line><src>#include &quot;DRV_par.h&quot;</src></hll>
				<hll><line>6</line><src>#include &quot;FS_InvalidSignal.h&quot;</src></hll>
				<hll><line>7</line><src>#include &quot;Dio.h&quot;</src></hll>
				<hll><line>8</line><src></src></hll>
				<hll><line>9</line><src>#define BIT(nr) (1UL &lt;&lt; (nr))</src></hll>
				<hll><line>10</line><src>#define CLEAR_BIT(nr) (0UL &lt;&lt; (nr))</src></hll>
				<hll><line>11</line><src></src></hll>
				<hll><line>12</line><src>#define TEST_BIT(var,nr) ((var) &amp; ((uint8)((0x01U) &lt;&lt; (nr))))</src></hll>
				<hll><line>13</line><src>#define ARRAY_SIZE(x) (sizeof((x))/sizeof((x)[0]))</src></hll>
				<hll><line>14</line><src>#define MS2TICK(ms) ((ms) / 10UL)</src></hll>
				<hll><line>15</line><src></src></hll>
				<hll><line>16</line><src>#define SET_DTC(DTC, FAULT_CONDITION) \</src></hll>
				<hll><line>17</line><src>    Rte_Call_Event_DEM_E_UDS_DTC_##DTC##_SetEventStatus((FAULT_CONDITION) ? DEM_EVENT_STATUS_FAILED : DEM_EVENT_STATUS_PASSED)</src></hll>
				<hll><line>18</line><src></src></hll>
				<hll><line>19</line><src>#define IGN_ON_DELAY  3000  // ms</src></hll>
				<hll><line>20</line><src>#define IGN_OFF_DELAY 185000 // ms</src></hll>
				<hll><line>21</line><src>#define BAT_VOL_UPPER 16000 // mV</src></hll>
				<hll><line>22</line><src>#define BAT_VOL_LOWER 9000  // mV</src></hll>
				<hll><line>23</line><src>#define ERR_CNT_THR   3</src></hll>
				<hll><line>24</line><src></src></hll>
				<hll><line>25</line><src>#define IGN_OFF  0</src></hll>
				<hll><line>26</line><src>#define IGN_ON   1</src></hll>
				<hll><line>27</line><src>#define PWR_OFF  0xFF</src></hll>
				<hll><line>28</line><src></src></hll>
				<hll><line>29</line><src>#define FS_DEBUG    0</src></hll>
				<hll><line>30</line><src></src></hll>
				<hll><line>31</line><src>struct internal_error_info {</src></hll>
				<hll><line>32</line><src>    uint32 hw_err_cnt;</src></hll>
				<hll><line>33</line><src>    uint32 sw_err_cnt;</src></hll>
				<hll><line>34</line><src>    struct {</src></hll>
				<hll><line>35</line><src>        uint8  err_idx1;</src></hll>
				<hll><line>36</line><src>        uint8  err_idx2;</src></hll>
				<hll><line>37</line><src>        uint32 err_info;</src></hll>
				<hll><line>38</line><src>    } err_item[13];</src></hll>
				<hll><line>39</line><src>};</src></hll>
				<hll><line>40</line><src></src></hll>
				<hll><line>41</line><src>struct reference_signal {</src></hll>
				<hll><line>42</line><src>#if VEH_TYPE == NORMAL</src></hll>
				<hll><line>43</line><src>    /* EMS */</src></hll>
				<hll><line>44</line><src>    uint8 ENG_EngSpdErrSta;      // EMS_01_10ms</src></hll>
				<hll><line>45</line><src>    uint8 ENG_IsgSta;            // EMS_01_10ms</src></hll>
				<hll><line>46</line><src>    uint8 ENG_EngSta;            // EMS_02_10ms</src></hll>
				<hll><line>47</line><src>    uint16 ENG_AccelPdlVal;      // EMS_02_10ms</src></hll>
				<hll><line>48</line><src>    uint8 ENG_AppAccelPdlSta;    // EMS_02_10ms</src></hll>
				<hll><line>49</line><src>    uint8 CF_ECU_SSC_STAT;       // EMS_03_10ms</src></hll>
				<hll><line>50</line><src>    /* TCU */</src></hll>
				<hll><line>51</line><src>    uint8 TCU_GearSlctDis;       // TCU_01_10ms</src></hll>
				<hll><line>52</line><src>#elif VEH_TYPE == EV</src></hll>
				<hll><line>53</line><src>    /* VCU */</src></hll>
				<hll><line>54</line><src>    uint8 VCU_EvDrvRdySta;       // VCU_01_10ms</src></hll>
				<hll><line>55</line><src>    uint8 VCU_GearPosSta;        // VCU_01_10ms</src></hll>
				<hll><line>56</line><src>    uint8 VCU_AccPedDepVal;      // VCU_01_10ms</src></hll>
				<hll><line>57</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>58</line><src>    /* EMS */</src></hll>
				<hll><line>59</line><src>    uint16 HEV_AccelPdlVal;      // EMS_07_10ms</src></hll>
				<hll><line>60</line><src>    uint8 HEV_EngSpdErrSta;      // EMS_11_10ms</src></hll>
				<hll><line>61</line><src>    /* HCU */</src></hll>
				<hll><line>62</line><src>    uint8 HCU_HevRdySta;         // HCU_03_10ms</src></hll>
				<hll><line>63</line><src>    /* HTCU */</src></hll>
				<hll><line>64</line><src>    uint8 HTCU_GearSlctrDis;     // HTCU_04_10ms</src></hll>
				<hll><line>65</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><line>66</line><src>    /* BCM */</src></hll>
				<hll><line>67</line><src>    uint8 BCM_Ign1InSta;         // BCM_02_200ms</src></hll>
				<hll><line>68</line><src>    /* SBCM */</src></hll>
				<hll><line>69</line><src>    uint8 SBCM_AST_DiagSta;      // SBCM_AST_03_200ms</src></hll>
				<hll><line>70</line><src>    uint8 SBCM_DRV_DiagSta;      // SBCM_DRV_02_200ms</src></hll>
				<hll><line>71</line><src>    /* CLU */</src></hll>
				<hll><line>72</line><src>    uint16 CLU_DisSpdVal;        // CLU_01_20ms</src></hll>
				<hll><line>73</line><src>    uint8 CLU_HDALCFuncOnSetReq; // CLU_11_00ms</src></hll>
				<hll><line>74</line><src>    /* ESC */</src></hll>
				<hll><line>75</line><src>    uint8 ABS_DiagSta;           // ABS_ESC_01_10ms</src></hll>
				<hll><line>76</line><src>    uint8 ESC_CylPrsrSta;        // ESC_01_10ms</src></hll>
				<hll><line>77</line><src>    uint16 ESC_CylPrsrVal;       // ESC_01_10ms</src></hll>
				<hll><line>78</line><src>    uint8 ESC_IMURstStaAck;      // ESC_01_10ms</src></hll>
				<hll><line>79</line><src>    uint8 ESC_Sta;               // ESC_01_10ms</src></hll>
				<hll><line>80</line><src>    uint8 FCA_EquipSta;          // ESC_03_20ms</src></hll>
				<hll><line>81</line><src>    uint8 FCA_AvlblSta;          // ESC_03_20ms</src></hll>
				<hll><line>82</line><src>    uint8 SCC_EnblReq;           // ESC_03_20ms</src></hll>
				<hll><line>83</line><src>    uint8 SCC_OptTyp;            // ESC_03_20ms</src></hll>
				<hll><line>84</line><src>    uint16 WHL_SpdFLVal;         // WHL_01_10ms</src></hll>
				<hll><line>85</line><src>    uint16 WHL_SpdFRVal;         // WHL_01_10ms</src></hll>
				<hll><line>86</line><src>    uint16 WHL_SpdRLVal;         // WHL_01_10ms</src></hll>
				<hll><line>87</line><src>    uint16 WHL_SpdRRVal;         // WHL_01_10ms</src></hll>
				<hll><line>88</line><src>    uint8 WHL_PlsFLVal;          // WHL_01_10ms</src></hll>
				<hll><line>89</line><src>    uint8 WHL_PlsFRVal;          // WHL_01_10ms</src></hll>
				<hll><line>90</line><src>    uint8 WHL_PlsRLVal;          // WHL_01_10ms</src></hll>
				<hll><line>91</line><src>    uint8 WHL_PlsRRVal;          // WHL_01_10ms</src></hll>
				<hll><line>92</line><src>    /* HOD */</src></hll>
				<hll><line>93</line><src>    uint8 HOD_Dir_Status;        //HOD_01_100ms</src></hll>
				<hll><line>94</line><src>    /* MDPS */</src></hll>
				<hll><line>95</line><src>    uint16 MDPS_StrTqSnsrVal;    // MDPS_01_10ms</src></hll>
				<hll><line>96</line><src>    uint8 MDPS_LkaToiActvSta;    // MDPS_01_10ms</src></hll>
				<hll><line>97</line><src>    uint8 MDPS_LkaToiUnblSta;    // MDPS_01_10ms</src></hll>
				<hll><line>98</line><src>    uint8 MDPS_LkaToiFltSta;     // MDPS_01_10ms</src></hll>
				<hll><line>99</line><src>    uint8 MDPS_LkaFailSta;       // MDPS_01_10ms</src></hll>
				<hll><line>100</line><src>    uint8 MDPS_LkaPlgInSta;      // MDPS_01_10ms</src></hll>
				<hll><line>101</line><src>    uint8 MDPS_Typ;              // MDPS_01_10ms</src></hll>
				<hll><line>102</line><src>    /* SAS */</src></hll>
				<hll><line>103</line><src>    sint16 SAS_AnglVal;          // SAS_01_10ms</src></hll>
				<hll><line>104</line><src>    uint8 SAS_SpdVal;            // SAS_01_10ms</src></hll>
				<hll><line>105</line><src>    /* SWRC */</src></hll>
				<hll><line>106</line><src>    uint8 SWRC_LFASwSta;         // SWRC_03_20ms</src></hll>
				<hll><line>107</line><src>    /* YRS */</src></hll>
				<hll><line>108</line><src>    uint16 IMU_YawRtVal;         // IMU_01_10ms</src></hll>
				<hll><line>109</line><src>    uint16 IMU_LongAccelVal;     // IMU_01_10ms</src></hll>
				<hll><line>110</line><src>    uint16 IMU_LatAccelVal;      // IMU_01_10ms</src></hll>
				<hll><line>111</line><src>    uint8 IMU_AcuRstSta;         // IMU_01_10ms</src></hll>
				<hll><line>112</line><src>    /* ICU */</src></hll>
				<hll><line>113</line><src>    uint8 ExtLamp_TrnSigLmpLftBlnkngSta; // ICU_04_200ms &amp; used in F010_InputOutput service</src></hll>
				<hll><line>114</line><src>    uint8 ExtLamp_TrnSigLmpRtBlnkngSta;  // ICU_04_200ms &amp; used in F010_InputOutput service</src></hll>
				<hll><line>115</line><src>    uint8 Lamp_RrTrnSigLmpLftOpnSta;     // ICU_06_200ms</src></hll>
				<hll><line>116</line><src>    uint8 Lamp_RrTrnSigLmpRtOpnSta;      // ICU_06_200ms</src></hll>
				<hll><line>117</line><src>    uint8 Lamp_FrTrnSigLmpLftOpnSta;     // ICU_06_200ms</src></hll>
				<hll><line>118</line><src>    uint8 Lamp_FrTrnSigLmpRtOpnSta;      // ICU_06_200ms</src></hll>
				<hll><line>119</line><src></src></hll>
				<hll><line>120</line><src>    /* NAVI */</src></hll>
				<hll><line>121</line><src>    uint8 HU_NaviStatus;                // HU_CLU_PE_05</src></hll>
				<hll><line>122</line><src>    uint8 HU_AliveStatus;               // HU_GW_PE_01</src></hll>
				<hll><line>123</line><src>    uint8 HU_AdasSupport;               // HU_MON_PE_01</src></hll>
				<hll><line>124</line><src>    uint8 HU_DistributeInfo;            // HU_MON_PE_01</src></hll>
				<hll><line>125</line><src>    uint8 HU_NaviHandshakingSupport;    // HU_MON_PE_01</src></hll>
				<hll><line>126</line><src>    uint8 HU_Navi_RspADASMapMsg ;       // HU_MON_PE_01</src></hll>
				<hll><line>127</line><src>    uint8 POS_CyclicCounter;         // HU_NAVI_V2_POS_PE</src></hll>
				<hll><line>128</line><src>    uint8 SEG_CalculatedRoute;       // HU_NAVI_V2_SEG_E</src></hll>
				<hll><line>129</line><src></src></hll>
				<hll><line>130</line><src>    /* Front Camera */</src></hll>
				<hll><line>131</line><src>    uint8 FR_CMR_Genrl_FlInfoSta; // A_FR_CMR_Genrl_01_30ms</src></hll>
				<hll><line>132</line><src>    uint8 LFA_ShrtkeySwSta;       // A_FR_CMR_Ctrl_01</src></hll>
				<hll><line>133</line><src>    /* Front Radar */</src></hll>
				<hll><line>134</line><src>    uint8 FR_RDR_Genrl_FlInfoSta; // A_FR_RDR_Genrl_01_50ms</src></hll>
				<hll><line>135</line><src>    /* Front-Rear Corner Radar */</src></hll>
				<hll><line>136</line><src>    uint8 FR_C_RDR_Genrl_FlrPosInfoSta; // A_FR_C_RDR_Genrl_01_50ms</src></hll>
				<hll><line>137</line><src>    uint8 FR_C_RDR_Genrl_BlkgPosInfoSta; // A_FR_C_RDR_Genrl_01_50ms</src></hll>
				<hll><line>138</line><src>};</src></hll>
				<hll><line>139</line><src></src></hll>
				<hll><line>140</line><src>struct precondition {</src></hll>
				<hll><line>141</line><src>    boolean is_norm_vol;</src></hll>
				<hll><line>142</line><src>    boolean is_3s_after_ign_on;</src></hll>
				<hll><line>143</line><src>    boolean for_3min_after_ign_off;</src></hll>
				<hll><line>144</line><src>    boolean is_eng_run;</src></hll>
				<hll><line>145</line><src>    boolean is_not_ecan_busoff;</src></hll>
				<hll><line>146</line><src>    boolean is_not_acan1_busoff;</src></hll>
				<hll><line>147</line><src>    boolean is_not_acan2_busoff;</src></hll>
				<hll><line>148</line><src>};</src></hll>
				<hll><line>149</line><src></src></hll>
				<hll><line>150</line><src></src></hll>
				<hll><line>151</line><src>/* HDA_InfoPUDis */</src></hll>
				<hll><line>152</line><src>enum {</src></hll>
				<hll><line>153</line><src>    NO_FAULT      = 0,</src></hll>
				<hll><line>154</line><src>    HDA_FAULT     = 1, // FS_02</src></hll>
				<hll><line>155</line><src>    HDA_LFA_FAULT = 2, // FS_01</src></hll>
				<hll><line>156</line><src>};</src></hll>
				<hll><line>157</line><src></src></hll>
				<hll><line>158</line><src>typedef struct {</src></hll>
				<hll><line>159</line><src>    uint8 FcaRo_Inhibit;</src></hll>
				<hll><line>160</line><src>    uint8 FcaSf2_Inhibit;</src></hll>
				<hll><line>161</line><src>    uint8 FcaSf3_Inhibit;</src></hll>
				<hll><line>162</line><src>    uint8 FcaSf3_JT_Inhibit;</src></hll>
				<hll><line>163</line><src>    uint8 FcaRo_JC_Inhibit;</src></hll>
				<hll><line>164</line><src>    uint8 FcaSf3_JC_Inhibit;</src></hll>
				<hll><line>165</line><src>    uint8 FcaSf2_Lo_Inhibit;</src></hll>
				<hll><line>166</line><src>    uint8 FcaSF3_LS_Inhibit;</src></hll>
				<hll><line>167</line><src>    uint8 Fca_ESA_Inhibit;</src></hll>
				<hll><line>168</line><src>} fca_inhibit_t;</src></hll>
				<hll><line>169</line><src></src></hll>
				<hll><line>170</line><src>typedef struct {</src></hll>
				<hll><line>171</line><src>    uint8 SccCc_Inhibit;</src></hll>
				<hll><line>172</line><src>    uint8 SccRo_Inhibit;</src></hll>
				<hll><line>173</line><src>    uint8 SccSf2_Inhibit;</src></hll>
				<hll><line>174</line><src>    uint8 SccSf3_Inhibit;</src></hll>
				<hll><line>175</line><src>} scc_inhibit_t;</src></hll>
				<hll><line>176</line><src></src></hll>
				<hll><line>177</line><src>typedef struct {</src></hll>
				<hll><line>178</line><src>    uint8 SccMl_Inhibit;</src></hll>
				<hll><line>179</line><src>} sccml_inhibit_t;</src></hll>
				<hll><line>180</line><src></src></hll>
				<hll><line>181</line><src>typedef struct {</src></hll>
				<hll><line>182</line><src>    uint8 NScc_Z_C_Inhibit;</src></hll>
				<hll><line>183</line><src>    uint8 NScc_R_Inhibit;</src></hll>
				<hll><line>184</line><src>} nscc_inhibit_t;</src></hll>
				<hll><line>185</line><src></src></hll>
				<hll><line>186</line><src>typedef struct {</src></hll>
				<hll><line>187</line><src>    uint8 Lfa_Lat_Inhibit;</src></hll>
				<hll><line>188</line><src>    uint8 LfaSf2_Inhibit;</src></hll>
				<hll><line>189</line><src>} lfa_inhibit_t;</src></hll>
				<hll><line>190</line><src></src></hll>
				<hll><line>191</line><src>typedef struct {</src></hll>
				<hll><line>192</line><src>    uint8 Hda_Lat_Inhibit;</src></hll>
				<hll><line>193</line><src>    uint8 Hda_Long_Inhibit;</src></hll>
				<hll><line>194</line><src>    uint8 Hda_Inhibit;</src></hll>
				<hll><line>195</line><src>    uint8 HdaII_Inhibit;</src></hll>
				<hll><line>196</line><src>} hda_inhibit_t;</src></hll>
				<hll><line>197</line><src></src></hll>
				<hll><line>198</line><src>typedef struct {</src></hll>
				<hll><line>199</line><src>    uint8 BCA_Inhibit;</src></hll>
				<hll><line>200</line><src>    uint8 BCA_RDRBlk_Inhibit; </src></hll>
				<hll><line>201</line><src>} bca_inhibit_t;</src></hll>
				<hll><line>202</line><src></src></hll>
				<hll><line>203</line><src>typedef struct {</src></hll>
				<hll><line>204</line><src>    uint8 SEA_Inhibit;</src></hll>
				<hll><line>205</line><src>} sea_inhibit_t;</src></hll>
				<hll><line>206</line><src></src></hll>
				<hll><line>207</line><src>typedef struct {</src></hll>
				<hll><line>208</line><src>    uint8 RCCA_Inhibit;</src></hll>
				<hll><line>209</line><src>    uint8 RCCA_RDRBlk_Inhibit;</src></hll>
				<hll><line>210</line><src>} rcca_inhibit_t;</src></hll>
				<hll><line>211</line><src></src></hll>
				<hll><line>212</line><src>typedef struct {</src></hll>
				<hll><line>213</line><src>    uint8 FCA_SysFlrSta;</src></hll>
				<hll><line>214</line><src>    uint8 SCC_SysFlrSta;</src></hll>
				<hll><line>215</line><src>    uint8 SCCMode_OptUsmSta;</src></hll>
				<hll><line>216</line><src>    uint8 SCC_NSCCOnOffSta;</src></hll>
				<hll><line>217</line><src>    uint8 HDA_InfoPUDis;</src></hll>
				<hll><line>218</line><src>    uint8 HDA_LCFuncSta;</src></hll>
				<hll><line>219</line><src>    uint8 BCW_IndSta;</src></hll>
				<hll><line>220</line><src>} warning_t;</src></hll>
				<hll><line>221</line><src></src></hll>
				<hll><line>222</line><src>struct inhibit_info {</src></hll>
				<hll><line>223</line><src>    scc_inhibit_t scc;</src></hll>
				<hll><line>224</line><src>    sccml_inhibit_t sccml;</src></hll>
				<hll><line>225</line><src>    nscc_inhibit_t nscc;</src></hll>
				<hll><line>226</line><src>    fca_inhibit_t fca;</src></hll>
				<hll><line>227</line><src>    lfa_inhibit_t lfa;</src></hll>
				<hll><line>228</line><src>    hda_inhibit_t hda;</src></hll>
				<hll><line>229</line><src>    bca_inhibit_t bca;</src></hll>
				<hll><line>230</line><src>    sea_inhibit_t sea;</src></hll>
				<hll><line>231</line><src>    rcca_inhibit_t rcca;</src></hll>
				<hll><line>232</line><src>    warning_t warning;</src></hll>
				<hll><line>233</line><src>};</src></hll>
				<hll><line>234</line><src></src></hll>
				<hll><line>235</line><src></src></hll>
				<hll><line>236</line><src>/* Voltage enum */</src></hll>
				<hll><line>237</line><src>enum {</src></hll>
				<hll><line>238</line><src>    VOL_IGN,</src></hll>
				<hll><line>239</line><src>    VOL_IGN_FLAG,</src></hll>
				<hll><line>240</line><src>    VOL_BAT,</src></hll>
				<hll><line>241</line><src>    VOL_BUCK5P0,</src></hll>
				<hll><line>242</line><src>    VOL_PMIC5P0,</src></hll>
				<hll><line>243</line><src>    VOL_PMIC3P3,</src></hll>
				<hll><line>244</line><src>    VOL_PMIC1P25,</src></hll>
				<hll><line>245</line><src>    VOL_BUCKPG5P0,</src></hll>
				<hll><line>246</line><src>    VOL_GRP_NUM</src></hll>
				<hll><line>247</line><src>};</src></hll>
				<hll><line>248</line><src></src></hll>
				<hll><line>249</line><src>/* Message type definition */</src></hll>
				<hll><line>250</line><src>enum msg_type {</src></hll>
				<hll><line>251</line><src>    CHASSIS_0,</src></hll>
				<hll><line>252</line><src>    CHASSIS_1,</src></hll>
				<hll><line>253</line><src>    A_FR_CMR_0,</src></hll>
				<hll><line>254</line><src>    A_FR_RDR_0,</src></hll>
				<hll><line>255</line><src>    A_FR_RDR_1,</src></hll>
				<hll><line>256</line><src>    A_FR_C_RDR_0,</src></hll>
				<hll><line>257</line><src>    A_FR_C_RDR_1,</src></hll>
				<hll><line>258</line><src>    A_FR_CMR_1,</src></hll>
				<hll><line>259</line><src>    A_FR_CMR_2,     </src></hll>
				<hll><line>260</line><src>    MSG_GRP_NUM,</src></hll>
				<hll><line>261</line><src>};</src></hll>
				<hll><line>262</line><src></src></hll>
				<hll><line>263</line><src>/* Chassis CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>264</line><src>enum chassis_0_msgs {</src></hll>
				<hll><line>265</line><src>        ABS_ESC_01_10ms_POS,</src></hll>
				<hll><line>266</line><src>    BCM_02_200ms_POS,</src></hll>
				<hll><line>267</line><src>        BCM_10_200ms_POS,</src></hll>
				<hll><line>268</line><src>        CLU_01_20ms_POS,</src></hll>
				<hll><line>269</line><src>        CLU_02_100ms_POS,</src></hll>
				<hll><line>270</line><src>#if VEH_TYPE == NORMAL</src></hll>
				<hll><line>271</line><src>        EMS_01_10ms_POS,</src></hll>
				<hll><line>272</line><src>        EMS_02_10ms_POS,</src></hll>
				<hll><line>273</line><src>    EMS_03_10ms_POS,</src></hll>
				<hll><line>274</line><src>    EMS_05_100ms_POS,</src></hll>
				<hll><line>275</line><src>    EMS_08_100ms_POS,</src></hll>
				<hll><line>276</line><src>    TCU_01_10ms_POS,</src></hll>
				<hll><line>277</line><src>#elif VEH_TYPE == EV</src></hll>
				<hll><line>278</line><src>    VCU_01_10ms_POS,</src></hll>
				<hll><line>279</line><src>    VCU_03_100ms_POS,</src></hll>
				<hll><line>280</line><src>#endif</src></hll>
				<hll><line>281</line><src>        ESC_01_10ms_POS,</src></hll>
				<hll><line>282</line><src>        ESC_03_20ms_POS,</src></hll>
				<hll><line>283</line><src>    HOD_01_100ms_POS,</src></hll>
				<hll><line>284</line><src>        HU_CLU_PE_05_POS,</src></hll>
				<hll><line>285</line><src>        HU_GW_PE_01_POS,</src></hll>
				<hll><line>286</line><src>        HU_MON_PE_01_POS,</src></hll>
				<hll><line>287</line><src>    HU_NAVI_V2_POS_PE_POS,</src></hll>
				<hll><line>288</line><src>        ICSC_02_100ms_POS,</src></hll>
				<hll><line>289</line><src>    ICU_02_200ms_POS,</src></hll>
				<hll><line>290</line><src>        ICU_04_200ms_POS,</src></hll>
				<hll><line>291</line><src>        ICU_06_200ms_POS,</src></hll>
				<hll><line>292</line><src>        ICU_07_200ms_POS,</src></hll>
				<hll><line>293</line><src>        MDPS_01_10ms_POS,</src></hll>
				<hll><line>294</line><src>    MFSW_01_200ms_POS,</src></hll>
				<hll><line>295</line><src>        SAS_01_10ms_POS,</src></hll>
				<hll><line>296</line><src>    SBCM_AST_03_200ms_POS,</src></hll>
				<hll><line>297</line><src>        SBCM_DRV_02_200ms_POS,</src></hll>
				<hll><line>298</line><src>        SWRC_03_20ms_POS,</src></hll>
				<hll><line>299</line><src>        WHL_01_10ms_POS,</src></hll>
				<hll><line>300</line><src>        IMU_01_10ms_POS,</src></hll>
				<hll><line>301</line><src>        CHASSIS_0_NUM</src></hll>
				<hll><line>302</line><src>};</src></hll>
				<hll><line>303</line><src>extern char compiler_assert_CHASSIS_0_NUM_exceed_32[(CHASSIS_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>304</line><src></src></hll>
				<hll><line>305</line><src>/* Chassis CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>306</line><src>enum chassis_1_msgs {</src></hll>
				<hll><line>307</line><src>    ADAS_PRK_21_20ms_POS,</src></hll>
				<hll><line>308</line><src>        BCM_09_200ms_POS,</src></hll>
				<hll><line>309</line><src>    CLU_11_00ms_POS,</src></hll>
				<hll><line>310</line><src>    CTM_01_200ms_POS,</src></hll>
				<hll><line>311</line><src>    FR_CMR_02_100ms_POS,</src></hll>
				<hll><line>312</line><src>        HU_NAVI_V2_META_E_POS,  </src></hll>
				<hll><line>313</line><src>        HU_NAVI_V2_PROLONG_E_POS,</src></hll>
				<hll><line>314</line><src>        HU_NAVI_V2_PROSHORT_E_00_POS,</src></hll>
				<hll><line>315</line><src>        HU_NAVI_V2_PROSHORT_SUB_E_POS,</src></hll>
				<hll><line>316</line><src>        HU_NAVI_V2_SEG_E_POS,</src></hll>
				<hll><line>317</line><src>        HU_NAVI_V2_SEG_SUB_E_POS,</src></hll>
				<hll><line>318</line><src>        HU_NAVI_V2_STUB_E_POS,</src></hll>
				<hll><line>319</line><src>#if HU_USM == NOT_APPLIED</src></hll>
				<hll><line>320</line><src>    CLU_04_00ms_POS,</src></hll>
				<hll><line>321</line><src>    CLU_12_00ms_POS,</src></hll>
				<hll><line>322</line><src>    CLU_13_00ms_POS,</src></hll>
				<hll><line>323</line><src>#elif HU_USM == APPLIED</src></hll>
				<hll><line>324</line><src>        HU_USM_E_01_POS,</src></hll>
				<hll><line>325</line><src>        HU_USM_E_02_POS,</src></hll>
				<hll><line>326</line><src>        HU_USM_E_04_POS,</src></hll>
				<hll><line>327</line><src>        HU_USM_E_08_POS,</src></hll>
				<hll><line>328</line><src>#endif</src></hll>
				<hll><line>329</line><src>    MFSW_02_200ms_POS,</src></hll>
				<hll><line>330</line><src>    RR_C_RDR_03_50ms_POS,</src></hll>
				<hll><line>331</line><src>    SBCM_AST_02_200ms_POS,</src></hll>
				<hll><line>332</line><src>        SBCM_DRV_01_200ms_POS,</src></hll>
				<hll><line>333</line><src>        SBCM_RL_01_200ms_POS,</src></hll>
				<hll><line>334</line><src>        SBCM_RR_01_200ms_POS,</src></hll>
				<hll><line>335</line><src>        ICU_08_200ms_POS,</src></hll>
				<hll><line>336</line><src>        IEB_01_10ms_POS,</src></hll>
				<hll><line>337</line><src>        CHASSIS_1_NUM</src></hll>
				<hll><line>338</line><src>};</src></hll>
				<hll><line>339</line><src>extern char compiler_assert_CHASSIS_1_NUM_exceed_32[(CHASSIS_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>340</line><src></src></hll>
				<hll><line>341</line><src>/* Front Camera CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>342</line><src>enum l_fr_cmr_0_msgs {</src></hll>
				<hll><line>343</line><src>    A_FR_CMR_Ctrl_01_10ms_POS,</src></hll>
				<hll><line>344</line><src>        A_FR_CMR_Genrl_01_30ms_POS,</src></hll>
				<hll><line>345</line><src>        A_FR_CMR_Ln_01_50ms_POS,</src></hll>
				<hll><line>346</line><src>        A_FR_CMR_Ln_02_50ms_POS,</src></hll>
				<hll><line>347</line><src>        A_FR_CMR_Ln_03_50ms_POS,</src></hll>
				<hll><line>348</line><src>    A_FR_CMR_Obj_01_30ms_POS,</src></hll>
				<hll><line>349</line><src>        A_FR_CMR_Obj_02_30ms_POS,</src></hll>
				<hll><line>350</line><src>        A_FR_CMR_Obj_03_30ms_POS,</src></hll>
				<hll><line>351</line><src>        A_FR_CMR_Obj_04_30ms_POS,</src></hll>
				<hll><line>352</line><src>        A_FR_CMR_Obj_05_30ms_POS,</src></hll>
				<hll><line>353</line><src>        A_FR_CMR_Obj_06_30ms_POS,</src></hll>
				<hll><line>354</line><src>        A_FR_CMR_Obj_07_30ms_POS,</src></hll>
				<hll><line>355</line><src>        A_FR_CMR_Obj_08_30ms_POS,</src></hll>
				<hll><line>356</line><src>        A_FR_CMR_Obj_09_30ms_POS,</src></hll>
				<hll><line>357</line><src>        A_FR_CMR_Obj_10_30ms_POS,</src></hll>
				<hll><line>358</line><src>        A_FR_CMR_Obj_11_30ms_POS,</src></hll>
				<hll><line>359</line><src>        A_FR_CMR_Obj_12_30ms_POS,</src></hll>
				<hll><line>360</line><src>        A_FR_CMR_Obj_13_30ms_POS,</src></hll>
				<hll><line>361</line><src>        A_FR_CMR_Obj_14_30ms_POS,</src></hll>
				<hll><line>362</line><src>        A_FR_CMR_Obj_15_30ms_POS,</src></hll>
				<hll><line>363</line><src>        A_FR_CMR_Obj_16_30ms_POS,</src></hll>
				<hll><line>364</line><src>        A_FR_CMR_Obj_17_30ms_POS,</src></hll>
				<hll><line>365</line><src>        A_FR_CMR_Obj_18_30ms_POS,</src></hll>
				<hll><line>366</line><src>        A_FR_CMR_Obj_19_30ms_POS,</src></hll>
				<hll><line>367</line><src>        A_FR_CMR_Obj_20_30ms_POS,</src></hll>
				<hll><line>368</line><src>    A_FR_CMR_FS_01_30ms_POS,</src></hll>
				<hll><line>369</line><src>        A_FR_CMR_FS_02_30ms_POS,</src></hll>
				<hll><line>370</line><src>        A_FR_CMR_FS_03_30ms_POS,</src></hll>
				<hll><line>371</line><src>        A_FR_CMR_FS_04_30ms_POS,</src></hll>
				<hll><line>372</line><src>        A_FR_CMR_FS_05_30ms_POS,</src></hll>
				<hll><line>373</line><src>        A_FR_CMR_FS_06_30ms_POS,</src></hll>
				<hll><line>374</line><src>    A_FR_CMR_FS_07_30ms_POS,</src></hll>
				<hll><line>375</line><src>    A_FR_CMR_0_NUM,</src></hll>
				<hll><line>376</line><src>};</src></hll>
				<hll><line>377</line><src>extern char compiler_assert_A_FR_CMR_0_NUM_exceed_32[(A_FR_CMR_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>378</line><src></src></hll>
				<hll><line>379</line><src>enum l_fr_cmr_1_msgs {    </src></hll>
				<hll><line>380</line><src>    A_FR_CMR_FS_08_30ms_POS,</src></hll>
				<hll><line>381</line><src>        A_FR_CMR_FS_09_30ms_POS,</src></hll>
				<hll><line>382</line><src>        A_FR_CMR_FS_10_30ms_POS,</src></hll>
				<hll><line>383</line><src>        A_FR_CMR_FS_11_30ms_POS,</src></hll>
				<hll><line>384</line><src>        A_FR_CMR_FS_12_30ms_POS,</src></hll>
				<hll><line>385</line><src>        A_FR_CMR_FS_13_30ms_POS,</src></hll>
				<hll><line>386</line><src>        A_FR_CMR_FS_14_30ms_POS,</src></hll>
				<hll><line>387</line><src>        A_FR_CMR_FS_15_30ms_POS,</src></hll>
				<hll><line>388</line><src>        A_FR_CMR_FS_16_30ms_POS,</src></hll>
				<hll><line>389</line><src>        A_FR_CMR_FS_17_30ms_POS,</src></hll>
				<hll><line>390</line><src>        A_FR_CMR_FS_18_30ms_POS,</src></hll>
				<hll><line>391</line><src>        A_FR_CMR_FS_19_30ms_POS,</src></hll>
				<hll><line>392</line><src>        A_FR_CMR_FS_20_30ms_POS,</src></hll>
				<hll><line>393</line><src>        A_FR_CMR_FS_21_30ms_POS,</src></hll>
				<hll><line>394</line><src>        A_FR_CMR_FS_22_30ms_POS,</src></hll>
				<hll><line>395</line><src>        A_FR_CMR_FS_23_30ms_POS,</src></hll>
				<hll><line>396</line><src>        A_FR_CMR_FS_24_30ms_POS,    </src></hll>
				<hll><line>397</line><src>    A_FR_CMR_1_NUM,</src></hll>
				<hll><line>398</line><src>};</src></hll>
				<hll><line>399</line><src>extern char compiler_assert_A_FR_CMR_1_NUM_exceed_32[(A_FR_CMR_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>400</line><src></src></hll>
				<hll><line>401</line><src>enum l_fr_cmr_2_msgs {</src></hll>
				<hll><line>402</line><src>    A_FR_CMR_Ctrl_02_20ms_POS,</src></hll>
				<hll><line>403</line><src>        A_FR_CMR_CA_01_30ms_POS,        </src></hll>
				<hll><line>404</line><src>        A_FR_CMR_CA_02_30ms_POS,</src></hll>
				<hll><line>405</line><src>    A_FR_CMR_CA_03_30ms_POS,</src></hll>
				<hll><line>406</line><src>    A_FR_CMR_CA_04_30ms_POS,</src></hll>
				<hll><line>407</line><src>    A_FR_CMR_HZ_01_30ms_POS,</src></hll>
				<hll><line>408</line><src>    A_FR_CMR_HZ_02_30ms_POS,</src></hll>
				<hll><line>409</line><src>    A_FR_CMR_HZ_03_30ms_POS,</src></hll>
				<hll><line>410</line><src>    A_FR_CMR_RdEdg_01_50ms_POS,</src></hll>
				<hll><line>411</line><src>    A_FR_CMR_RdEdg_02_50ms_POS,</src></hll>
				<hll><line>412</line><src>    A_FR_CMR_RdMrk_01_50ms_POS,</src></hll>
				<hll><line>413</line><src>    A_FR_CMR_RdMrk_02_50ms_POS,</src></hll>
				<hll><line>414</line><src>    A_FR_CMR_RdMrk_03_50ms_POS,</src></hll>
				<hll><line>415</line><src>    A_FR_CMR_2_NUM,</src></hll>
				<hll><line>416</line><src>};</src></hll>
				<hll><line>417</line><src>extern char compiler_assert_A_FR_CMR_2_NUM_exceed_32[(A_FR_CMR_2_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>418</line><src></src></hll>
				<hll><line>419</line><src>/* Front Radar CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>420</line><src></src></hll>
				<hll><line>421</line><src>enum l_fr_rdr_0_msgs {</src></hll>
				<hll><line>422</line><src>    A_FR_RDR_Genrl_01_50ms_POS,</src></hll>
				<hll><line>423</line><src>        A_FR_RDR_Genrl_02_50ms_POS,</src></hll>
				<hll><line>424</line><src>    A_FR_RDR_ODM_01_50ms_POS,</src></hll>
				<hll><line>425</line><src>    A_FR_RDR_Obj_01_50ms_POS,</src></hll>
				<hll><line>426</line><src>        A_FR_RDR_Obj_02_50ms_POS,</src></hll>
				<hll><line>427</line><src>        A_FR_RDR_Obj_03_50ms_POS,</src></hll>
				<hll><line>428</line><src>        A_FR_RDR_Obj_04_50ms_POS,</src></hll>
				<hll><line>429</line><src>        A_FR_RDR_Obj_05_50ms_POS,</src></hll>
				<hll><line>430</line><src>        A_FR_RDR_Obj_06_50ms_POS,</src></hll>
				<hll><line>431</line><src>        A_FR_RDR_Obj_07_50ms_POS,</src></hll>
				<hll><line>432</line><src>        A_FR_RDR_Obj_08_50ms_POS,</src></hll>
				<hll><line>433</line><src>        A_FR_RDR_Obj_09_50ms_POS,</src></hll>
				<hll><line>434</line><src>        A_FR_RDR_Obj_10_50ms_POS,</src></hll>
				<hll><line>435</line><src>        A_FR_RDR_Obj_11_50ms_POS,</src></hll>
				<hll><line>436</line><src>        A_FR_RDR_Obj_12_50ms_POS,</src></hll>
				<hll><line>437</line><src>        A_FR_RDR_Obj_13_50ms_POS,</src></hll>
				<hll><line>438</line><src>        A_FR_RDR_Obj_14_50ms_POS,</src></hll>
				<hll><line>439</line><src>        A_FR_RDR_Obj_15_50ms_POS,</src></hll>
				<hll><line>440</line><src>        A_FR_RDR_Obj_16_50ms_POS,</src></hll>
				<hll><line>441</line><src>        A_FR_RDR_Obj_17_50ms_POS,</src></hll>
				<hll><line>442</line><src>        A_FR_RDR_Obj_18_50ms_POS,</src></hll>
				<hll><line>443</line><src>        A_FR_RDR_Obj_19_50ms_POS,</src></hll>
				<hll><line>444</line><src>        A_FR_RDR_Obj_20_50ms_POS,</src></hll>
				<hll><line>445</line><src>        A_FR_RDR_Obj_21_50ms_POS,</src></hll>
				<hll><line>446</line><src>        A_FR_RDR_Obj_22_50ms_POS,</src></hll>
				<hll><line>447</line><src>        A_FR_RDR_Obj_23_50ms_POS,</src></hll>
				<hll><line>448</line><src>        A_FR_RDR_Obj_24_50ms_POS,</src></hll>
				<hll><line>449</line><src>        A_FR_RDR_Obj_25_50ms_POS,</src></hll>
				<hll><line>450</line><src>        A_FR_RDR_Obj_26_50ms_POS,</src></hll>
				<hll><line>451</line><src>        A_FR_RDR_Obj_27_50ms_POS,</src></hll>
				<hll><line>452</line><src>        A_FR_RDR_Obj_28_50ms_POS,</src></hll>
				<hll><line>453</line><src>        A_FR_RDR_Obj_29_50ms_POS,</src></hll>
				<hll><line>454</line><src>    A_FR_RDR_0_NUM,</src></hll>
				<hll><line>455</line><src>};</src></hll>
				<hll><line>456</line><src>extern char compiler_assert_A_FR_RDR_0_NUM_exceed_32[(A_FR_RDR_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>457</line><src></src></hll>
				<hll><line>458</line><src>enum l_fr_rdr_1_msgs {</src></hll>
				<hll><line>459</line><src>    A_FR_RDR_Obj_30_50ms_POS,</src></hll>
				<hll><line>460</line><src>        A_FR_RDR_Obj_31_50ms_POS,</src></hll>
				<hll><line>461</line><src>        A_FR_RDR_Obj_32_50ms_POS,</src></hll>
				<hll><line>462</line><src>    A_FR_RDR_FS_01_50ms_POS,</src></hll>
				<hll><line>463</line><src>        A_FR_RDR_FS_02_50ms_POS,</src></hll>
				<hll><line>464</line><src>        A_FR_RDR_FS_03_50ms_POS,</src></hll>
				<hll><line>465</line><src>        A_FR_RDR_FS_04_50ms_POS,</src></hll>
				<hll><line>466</line><src>        A_FR_RDR_FS_05_50ms_POS,</src></hll>
				<hll><line>467</line><src>    A_FR_RDR_1_NUM,</src></hll>
				<hll><line>468</line><src>};</src></hll>
				<hll><line>469</line><src>extern char compiler_assert_A_FR_RDR_1_NUM_exceed_32[(A_FR_RDR_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>470</line><src></src></hll>
				<hll><line>471</line><src>/* Front Corner Radar CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>472</line><src>enum l_fr_c_rdr_0_msgs {</src></hll>
				<hll><line>473</line><src>        A_FR_C_RDR_Genrl_01_50ms_POS,</src></hll>
				<hll><line>474</line><src>        A_FR_C_RDR_ODM_01_50ms_POS,</src></hll>
				<hll><line>475</line><src>        A_FR_C_RDR_Obj_01_50ms_POS,</src></hll>
				<hll><line>476</line><src>        A_FR_C_RDR_Obj_02_50ms_POS,</src></hll>
				<hll><line>477</line><src>        A_FR_C_RDR_Obj_03_50ms_POS,</src></hll>
				<hll><line>478</line><src>        A_FR_C_RDR_Obj_04_50ms_POS,</src></hll>
				<hll><line>479</line><src>        A_FR_C_RDR_Obj_05_50ms_POS,</src></hll>
				<hll><line>480</line><src>        A_FR_C_RDR_Obj_06_50ms_POS,</src></hll>
				<hll><line>481</line><src>        A_FR_C_RDR_Obj_07_50ms_POS,</src></hll>
				<hll><line>482</line><src>        A_FR_C_RDR_Obj_08_50ms_POS,</src></hll>
				<hll><line>483</line><src>        A_FR_C_RDR_Obj_09_50ms_POS,</src></hll>
				<hll><line>484</line><src>        A_FR_C_RDR_Obj_10_50ms_POS,</src></hll>
				<hll><line>485</line><src>        A_FR_C_RDR_Obj_11_50ms_POS,</src></hll>
				<hll><line>486</line><src>        A_FR_C_RDR_Obj_12_50ms_POS,</src></hll>
				<hll><line>487</line><src>        A_FR_C_RDR_Obj_13_50ms_POS,</src></hll>
				<hll><line>488</line><src>        A_FR_C_RDR_Obj_14_50ms_POS,</src></hll>
				<hll><line>489</line><src>        A_FR_C_RDR_Obj_15_50ms_POS,</src></hll>
				<hll><line>490</line><src>        A_FR_C_RDR_Obj_16_50ms_POS,</src></hll>
				<hll><line>491</line><src>        A_FR_C_RDR_Obj_17_50ms_POS,</src></hll>
				<hll><line>492</line><src>        A_FR_C_RDR_Obj_18_50ms_POS,</src></hll>
				<hll><line>493</line><src>        A_FR_C_RDR_Obj_19_50ms_POS,</src></hll>
				<hll><line>494</line><src>        A_FR_C_RDR_Obj_20_50ms_POS,</src></hll>
				<hll><line>495</line><src>        A_FR_C_RDR_Obj_21_50ms_POS,</src></hll>
				<hll><line>496</line><src>        A_FR_C_RDR_Obj_22_50ms_POS,</src></hll>
				<hll><line>497</line><src>        A_FR_C_RDR_Obj_23_50ms_POS,</src></hll>
				<hll><line>498</line><src>        A_FR_C_RDR_Obj_24_50ms_POS,</src></hll>
				<hll><line>499</line><src>        A_FR_C_RDR_Obj_25_50ms_POS,</src></hll>
				<hll><line>500</line><src>        A_FR_C_RDR_Obj_26_50ms_POS,</src></hll>
				<hll><line>501</line><src>        A_FR_C_RDR_Obj_27_50ms_POS,</src></hll>
				<hll><line>502</line><src>        A_FR_C_RDR_Obj_28_50ms_POS,</src></hll>
				<hll><line>503</line><src>        A_FR_C_RDR_Obj_29_50ms_POS,</src></hll>
				<hll><line>504</line><src>        A_FR_C_RDR_Obj_30_50ms_POS,</src></hll>
				<hll><line>505</line><src>    A_FR_C_RDR_0_NUM,</src></hll>
				<hll><line>506</line><src>};</src></hll>
				<hll><line>507</line><src>extern char compiler_assert_A_FR_C_RDR_0_NUM_exceed_32[(A_FR_C_RDR_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>508</line><src></src></hll>
				<hll><line>509</line><src>enum l_fr_c_rdr_1_msgs {</src></hll>
				<hll><line>510</line><src>        A_FR_C_RDR_FS_01_50ms_POS,</src></hll>
				<hll><line>511</line><src>        A_FR_C_RDR_FS_02_50ms_POS,</src></hll>
				<hll><line>512</line><src>        A_FR_C_RDR_FS_03_50ms_POS,</src></hll>
				<hll><line>513</line><src>        A_FR_C_RDR_FS_04_50ms_POS,</src></hll>
				<hll><line>514</line><src>        A_FR_C_RDR_FS_05_50ms_POS,</src></hll>
				<hll><line>515</line><src>        A_FR_C_RDR_FS_06_50ms_POS,</src></hll>
				<hll><line>516</line><src>        A_FR_C_RDR_FS_07_50ms_POS,</src></hll>
				<hll><line>517</line><src>        A_FR_C_RDR_FS_08_50ms_POS,</src></hll>
				<hll><line>518</line><src>        A_FR_C_RDR_FS_09_50ms_POS,</src></hll>
				<hll><line>519</line><src>        A_FR_C_RDR_FS_10_50ms_POS,</src></hll>
				<hll><line>520</line><src>        A_FR_C_RDR_FS_11_50ms_POS,</src></hll>
				<hll><line>521</line><src>        A_FR_C_RDR_FS_12_50ms_POS,</src></hll>
				<hll><line>522</line><src>        A_FR_C_RDR_FS_13_50ms_POS,</src></hll>
				<hll><line>523</line><src>        A_FR_C_RDR_FS_14_50ms_POS,</src></hll>
				<hll><line>524</line><src>        A_FR_C_RDR_FS_15_50ms_POS,</src></hll>
				<hll><line>525</line><src>        A_FR_C_RDR_FS_16_50ms_POS,</src></hll>
				<hll><line>526</line><src>        A_FR_C_RDR_Tkl_01_50ms_POS,</src></hll>
				<hll><line>527</line><src>        A_FR_C_RDR_Tkl_02_50ms_POS,</src></hll>
				<hll><line>528</line><src>        A_FR_C_RDR_Tkl_03_50ms_POS,</src></hll>
				<hll><line>529</line><src>        A_FR_C_RDR_Tkl_04_50ms_POS,</src></hll>
				<hll><line>530</line><src>        A_FR_C_RDR_Tkl_05_50ms_POS,</src></hll>
				<hll><line>531</line><src>        A_FR_C_RDR_Tkl_06_50ms_POS,</src></hll>
				<hll><line>532</line><src>        A_FR_C_RDR_Tkl_07_50ms_POS,</src></hll>
				<hll><line>533</line><src>        A_FR_C_RDR_Tkl_08_50ms_POS,</src></hll>
				<hll><line>534</line><src>        A_FR_C_RDR_Tkl_09_50ms_POS,</src></hll>
				<hll><line>535</line><src>        A_FR_C_RDR_Tkl_10_50ms_POS,</src></hll>
				<hll><line>536</line><src>        A_FR_C_RDR_Tkl_11_50ms_POS,</src></hll>
				<hll><line>537</line><src>        A_FR_C_RDR_Tkl_12_50ms_POS,</src></hll>
				<hll><line>538</line><src>        A_FR_C_RDR_Tkl_13_50ms_POS,</src></hll>
				<hll><line>539</line><src>        A_FR_C_RDR_Tkl_14_50ms_POS,</src></hll>
				<hll><line>540</line><src>        A_FR_C_RDR_Tkl_15_50ms_POS,</src></hll>
				<hll><line>541</line><src>    A_FR_C_RDR_1_NUM,</src></hll>
				<hll><line>542</line><src>};</src></hll>
				<hll><line>543</line><src>extern char compiler_assert_A_FR_C_RDR_1_NUM_exceed_32[(A_FR_C_RDR_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>544</line><src></src></hll>
				<hll><line>545</line><src>/* Forcing Recover */</src></hll>
				<hll><line>546</line><src>enum {</src></hll>
				<hll><line>547</line><src>    RECOVER_GROUP_0,</src></hll>
				<hll><line>548</line><src>    RECOVER_GROUP_1,</src></hll>
				<hll><line>549</line><src>    RECOVER_GROUP_2,</src></hll>
				<hll><line>550</line><src>    RECOVER_GROUP_3,</src></hll>
				<hll><line>551</line><src>    RECOVER_GROUP_4,</src></hll>
				<hll><line>552</line><src>    RECOVER_GROUP_5,</src></hll>
				<hll><line>553</line><src>    RECOVER_GROUP_6,</src></hll>
				<hll><line>554</line><src>    RECOVER_GROUP_7,</src></hll>
				<hll><line>555</line><src>    RECOVER_GROUP_NUM,</src></hll>
				<hll><line>556</line><src>};</src></hll>
				<hll><line>557</line><src>extern uint8 recover_mask[RECOVER_GROUP_NUM];</src></hll>
				<hll><line>558</line><src></src></hll>
				<hll><line>559</line><src>/* Recover group 0 */</src></hll>
				<hll><line>560</line><src>enum {</src></hll>
				<hll><line>561</line><src>    VOL_HIGH,</src></hll>
				<hll><line>562</line><src>    VOL_LOW,</src></hll>
				<hll><line>563</line><src>    ECAN_BUSOFF,</src></hll>
				<hll><line>564</line><src>    ACAN1_BUSOFF,</src></hll>
				<hll><line>565</line><src>    ACAN2_BUSOFF,</src></hll>
				<hll><line>566</line><src>    GROUP_0_NUM,</src></hll>
				<hll><line>567</line><src>};</src></hll>
				<hll><line>568</line><src>extern char compiler_assert_GROUP_0_exceed_8[(GROUP_0_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>569</line><src></src></hll>
				<hll><line>570</line><src>/* Recover group 1 */</src></hll>
				<hll><line>571</line><src>enum {</src></hll>
				<hll><line>572</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>573</line><src>    ABS_ESC_TIMEOUT,</src></hll>
				<hll><line>574</line><src>    VCU_HCU_TIMEOUT,</src></hll>
				<hll><line>575</line><src>    BCM_TIMEOUT,</src></hll>
				<hll><line>576</line><src>    CLU_TIMEOUT,</src></hll>
				<hll><line>577</line><src>    EMS_TIMEOUT,</src></hll>
				<hll><line>578</line><src>    ESC_TIMEOUT,</src></hll>
				<hll><line>579</line><src>    HOD_TIMEOUT,</src></hll>
				<hll><line>580</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>581</line><src>    CGW1_TIMEOUT,</src></hll>
				<hll><line>582</line><src>    CGW2_TIMEOUT,</src></hll>
				<hll><line>583</line><src>    CGW8_TIMEOUT,</src></hll>
				<hll><line>584</line><src>    CGW_PC4_TIMEOUT,</src></hll>
				<hll><line>585</line><src>    CGW_PC5_TIMEOUT,</src></hll>
				<hll><line>586</line><src>    CLU11_TIMEOUT,</src></hll>
				<hll><line>587</line><src>    CLU13_TIMEOUT,</src></hll>
				<hll><line>588</line><src>    EMS12_TIMEOUT,</src></hll>
				<hll><line>589</line><src>#endif /* CCAN */</src></hll>
				<hll><line>590</line><src>    GROUP_1_NUM,</src></hll>
				<hll><line>591</line><src>};</src></hll>
				<hll><line>592</line><src>extern char compiler_assert_GROUP_1_exceed_8[(GROUP_1_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>593</line><src></src></hll>
				<hll><line>594</line><src>/* Recover group 2 */</src></hll>
				<hll><line>595</line><src>enum {</src></hll>
				<hll><line>596</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>597</line><src>    HU_CLU_PE_TIMEOUT,</src></hll>
				<hll><line>598</line><src>    HU_GW_PE_TIMEOUT,</src></hll>
				<hll><line>599</line><src>    HU_MON_PE_TIMEOUT,</src></hll>
				<hll><line>600</line><src>    HU_NAVI_V2_POS_PE_TIMEOUT,</src></hll>
				<hll><line>601</line><src>    ICSC_TIMEOUT,</src></hll>
				<hll><line>602</line><src>    ICU_TIMEOUT,</src></hll>
				<hll><line>603</line><src>    MDPS_TIMEOUT,</src></hll>
				<hll><line>604</line><src>    MFSW_TIMEOUT,</src></hll>
				<hll><line>605</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>606</line><src>    EMS16_TIMEOUT,</src></hll>
				<hll><line>607</line><src>    ESP12_TIMEOUT,</src></hll>
				<hll><line>608</line><src>    HU_CLU_PE_05_TIMEOUT,</src></hll>
				<hll><line>609</line><src>    HU_GW_PE_01_TIMEOUT,</src></hll>
				<hll><line>610</line><src>    HU_MON_PE_01_TIMEOUT,</src></hll>
				<hll><line>611</line><src>    MDPS11_TIMEOUT,</src></hll>
				<hll><line>612</line><src>    MDPS12_TIMEOUT,</src></hll>
				<hll><line>613</line><src>    NAVI_V2_POS_E_POS_TIMEOUT,</src></hll>
				<hll><line>614</line><src>#endif /* CCAN */</src></hll>
				<hll><line>615</line><src>    GROUP_2_NUM,</src></hll>
				<hll><line>616</line><src>};</src></hll>
				<hll><line>617</line><src>extern char compiler_assert_GROUP_2_exceed_8[(GROUP_2_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>618</line><src></src></hll>
				<hll><line>619</line><src>/* Recover group 3 */</src></hll>
				<hll><line>620</line><src>enum {</src></hll>
				<hll><line>621</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>622</line><src>    RR_C_RDR_TIMEOUT,</src></hll>
				<hll><line>623</line><src>    SAS_TIMEOUT,</src></hll>
				<hll><line>624</line><src>    SWRC_TIMEOUT,</src></hll>
				<hll><line>625</line><src>    TCU_TIMEOUT,</src></hll>
				<hll><line>626</line><src>    WHL_TIMEOUT,</src></hll>
				<hll><line>627</line><src>    YRS_TIMEOUT,</src></hll>
				<hll><line>628</line><src>    SBCM_TIMEOUT,</src></hll>
				<hll><line>629</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>630</line><src>    P_STS_TIMEOUT,</src></hll>
				<hll><line>631</line><src>    RR_C_RDR_02_TIMEOUT,</src></hll>
				<hll><line>632</line><src>    SAS11_TIMEOUT,</src></hll>
				<hll><line>633</line><src>    TCS11_TIMEOUT,</src></hll>
				<hll><line>634</line><src>    TCS13_TIMEOUT,</src></hll>
				<hll><line>635</line><src>    VSM11_TIMEOUT,</src></hll>
				<hll><line>636</line><src>    WHL_SPD11_TIMEOUT,</src></hll>
				<hll><line>637</line><src>#endif /* CCAN */</src></hll>
				<hll><line>638</line><src>    GROUP_3_NUM,</src></hll>
				<hll><line>639</line><src>};</src></hll>
				<hll><line>640</line><src>extern char compiler_assert_GROUP_3_exceed_8[(GROUP_3_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>641</line><src></src></hll>
				<hll><line>642</line><src>/* Recover group 4 */</src></hll>
				<hll><line>643</line><src>enum {</src></hll>
				<hll><line>644</line><src>    A_FR_CMR_TIMEOUT,</src></hll>
				<hll><line>645</line><src>    A_FR_RDR_TIMEOUT,</src></hll>
				<hll><line>646</line><src>    A_FR_C_RDR_TIMEOUT,</src></hll>
				<hll><line>647</line><src>    GROUP_4_NUM,</src></hll>
				<hll><line>648</line><src>};</src></hll>
				<hll><line>649</line><src>extern char compiler_assert_GROUP_4_exceed_8[(GROUP_4_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>650</line><src></src></hll>
				<hll><line>651</line><src>/* Recover group 5 */</src></hll>
				<hll><line>652</line><src>enum {</src></hll>
				<hll><line>653</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>654</line><src>    CLU_INVALID_SIGNAL,</src></hll>
				<hll><line>655</line><src>    ESC_INVALID_SIGNAL,</src></hll>
				<hll><line>656</line><src>    MDPS_INVALID_SIGNAL,</src></hll>
				<hll><line>657</line><src>    SAS_INVALID_SIGNAL,</src></hll>
				<hll><line>658</line><src>    EMS_INVALID_SIGNAL,</src></hll>
				<hll><line>659</line><src>    TCU_INVALID_SIGNAL,</src></hll>
				<hll><line>660</line><src>    YRS_INVALID_SIGNAL,</src></hll>
				<hll><line>661</line><src>    SWRC_INVALID_SIGNAL,</src></hll>
				<hll><line>662</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>663</line><src>    CGW_INVALID_SIGNAL,</src></hll>
				<hll><line>664</line><src>    CLU_INVALID_SIGNAL,</src></hll>
				<hll><line>665</line><src>    ESC_INVALID_SIGNAL,</src></hll>
				<hll><line>666</line><src>    MDPS_INVALID_SIGNAL,</src></hll>
				<hll><line>667</line><src>    SAS_INVALID_SIGNAL,</src></hll>
				<hll><line>668</line><src>    EMS_INVALID_SIGNAL,</src></hll>
				<hll><line>669</line><src>    TCU_INVALID_SIGNAL,</src></hll>
				<hll><line>670</line><src>    NAVI_INVALID_SIGNAL,</src></hll>
				<hll><line>671</line><src>#endif /* CCAN */</src></hll>
				<hll><line>672</line><src>    GROUP_5_NUM,</src></hll>
				<hll><line>673</line><src>};</src></hll>
				<hll><line>674</line><src>extern char compiler_assert_GROUP_5_exceed_8[(GROUP_5_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>675</line><src></src></hll>
				<hll><line>676</line><src>/* Recover group 6 */</src></hll>
				<hll><line>677</line><src>enum {</src></hll>
				<hll><line>678</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>679</line><src>    VCU_HCU_INVALID_SIGNAL,</src></hll>
				<hll><line>680</line><src>    ICSC_INVALID_SIGNAL,</src></hll>
				<hll><line>681</line><src>    ICU_INVALID_SIGNAL,</src></hll>
				<hll><line>682</line><src>    NAVI_INVALID_SIGNAL,</src></hll>
				<hll><line>683</line><src>    FR_CMR_INVALID_SIGNAL,</src></hll>
				<hll><line>684</line><src>    FR_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>685</line><src>    FR_C_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>686</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>687</line><src>    FR_CMR_INVALID_SIGNAL,</src></hll>
				<hll><line>688</line><src>    FR_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>689</line><src>    FR_C_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>690</line><src>    RESERVED2,</src></hll>
				<hll><line>691</line><src>    RESERVED3,</src></hll>
				<hll><line>692</line><src>    RESERVED4,</src></hll>
				<hll><line>693</line><src>    RESERVED5,</src></hll>
				<hll><line>694</line><src>    RESERVED6,</src></hll>
				<hll><line>695</line><src>#endif /* CCAN */</src></hll>
				<hll><line>696</line><src>    GROUP_6_NUM,</src></hll>
				<hll><line>697</line><src>};</src></hll>
				<hll><line>698</line><src>extern char compiler_assert_GROUP_6_exceed_8[(GROUP_6_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>699</line><src></src></hll>
				<hll><line>700</line><src>/* Recover group 7 */</src></hll>
				<hll><line>701</line><src>enum {</src></hll>
				<hll><line>702</line><src>    GROUP_7_NUM,</src></hll>
				<hll><line>703</line><src>};</src></hll>
				<hll><line>704</line><src>extern char compiler_assert_GROUP_7_exceed_8[(GROUP_7_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>705</line><src></src></hll>
				<hll><line>706</line><src></src></hll>
				<hll><line>707</line><src>/* Failsafe */</src></hll>
				<hll><line>708</line><src>extern struct internal_error_info int_err_info;</src></hll>
				<hll><line>709</line><src>extern volatile struct reference_signal ref_sig;</src></hll>
				<hll><line>710</line><src>extern uint16 vol_grp[VOL_GRP_NUM];</src></hll>
				<hll><line>711</line><src>extern boolean internal_sw_fault;</src></hll>
				<hll><line>712</line><src>extern boolean internal_hw_fault;</src></hll>
				<hll><line>713</line><src>extern uint32 can_timeout_fault[MSG_GRP_NUM];</src></hll>
				<hll><line>714</line><src>extern boolean clear_dtc;</src></hll>
				<hll><line>715</line><src>extern uint8 Get_ADAS_DRV_FailInfoSta(void);</src></hll>
				<hll><line>716</line><src>extern uint8 Get_ADAS_DRV_CodingSta(void); </src></hll>
				<hll><line>717</line><src>extern uint8 Get_ADAS_DRV_ACANMonSta(void);</src></hll>
				<hll><line>718</line><src>extern uint8 Get_RadarFailureFlg(void);</src></hll>
				<hll><line>719</line><src>extern volatile boolean BSW_InitCompleted;</src></hll>
				<hll><line>720</line><src>extern uint8 rdr_fail_flag;</src></hll>
				<hll><line>721</line><src>extern sigerr_t fr_rdr[FR_RDR_ITEM_NUM];</src></hll>
				<hll><line>722</line><src></src></hll>
				<hll><line>723</line><src>void FS_Init(void);</src></hll>
				<hll><line>724</line><src>void FS_MasterLoop(void);</src></hll>
				<hll><line>725</line><src>void update_inhibit_info(struct inhibit_info new);</src></hll>
				<hll><line>726</line><src>void store_in_nvm(void);</src></hll>
				<hll><line>727</line><src>struct precondition *get_precond_ptr(void);</src></hll>
				<hll><line>728</line><src>struct inhibit_info *get_inhibit_ptr(void);</src></hll>
				<hll><line>729</line><src>boolean Get_NAVI_Option(void);</src></hll>
				<hll><line>730</line><src>boolean Get_HDA2_Option(void);</src></hll>
				<hll><line>731</line><src>boolean Get_BCA_Option(void);</src></hll>
				<hll><line>732</line><src>boolean Get_SEW_Option(void);</src></hll>
				<hll><line>733</line><src>boolean Get_RCCW_Option(void);</src></hll>
				<hll><line>734</line><src></src></hll>
				<hll><line>735</line><src></src></hll>
				<hll><line>736</line><src>static inline boolean is_timeout(uint8 msg_grp, uint8 pos)</src></hll>
				<hll><line>737</line><src>{</src></hll>
				<hll><cov>never</cov><line>738</line><src>    return !!(can_timeout_fault[msg_grp] &amp; BIT(pos));</src></hll>
				<asm><cov>never</cov><addr>P:800045A0</addr><code>1040003B</code><mnemonic>mov       d1,#0x400</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045A4</addr><code>FB5DFF61</code><mnemonic>fcall     0x80003C5E</mnemonic><comment>.cocofun_66</comment></asm>
				<asm><cov>never</cov><addr>P:800045A8</addr><code>CF54</code><mnemonic>ld16.w    d15,[a12]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045F8</addr><code>CF54</code><mnemonic>ld16.w    d15,[a12]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045FA</addr><code>0000407B</code><mnemonic>movh      d0,#0x4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004628</addr><code>C554</code><mnemonic>ld16.w    d5,[a12]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000462E</addr><code>3002007B</code><mnemonic>movh      d3,#0x20</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046A2</addr><code>C154</code><mnemonic>ld16.w    d1,[a12]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046A8</addr><code>0020007B</code><mnemonic>movh      d0,#0x200</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000470A</addr><code>C254</code><mnemonic>ld16.w    d2,[a12]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004710</addr><code>1400007B</code><mnemonic>movh      d1,#0x4000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000476A</addr><code>CF54</code><mnemonic>ld16.w    d15,[a12]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000476C</addr><code>0100007B</code><mnemonic>movh      d0,#0x1000</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047A2</addr><code>C254</code><mnemonic>ld16.w    d2,[a12]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047A4</addr><code>1040007B</code><mnemonic>movh      d1,#0x400</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047A8</addr><code>A008</code><mnemonic>ld16.bu   d0,[a15]0x0A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047D6</addr><code>C054</code><mnemonic>ld16.w    d0,[a12]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047D8</addr><code>F080007B</code><mnemonic>movh      d15,#0x800</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004826</addr><code>0A08CD49</code><mnemonic>lea       a13,[a12]0x8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000482A</addr><code>D054</code><mnemonic>ld16.w    d0,[a13]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000486E</addr><code>D054</code><mnemonic>ld16.w    d0,[a13]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800048AC</addr><code>C34C</code><mnemonic>ld16.w    d15,[a12]0x0C</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\SWC_Failsafe.h" type="multiple">
				<hll><line>739</line><src>}</src></hll>
				<hll><line>740</line><src></src></hll>
				<hll><line>741</line><src>static inline boolean internal_error_occurred(void)</src></hll>
				<hll><line>742</line><src>{</src></hll>
				<hll><line>743</line><src>    return !!((int_err_info.hw_err_cnt &gt;= ERR_CNT_THR) || (int_err_info.sw_err_cnt &gt;= ERR_CNT_THR));</src></hll>
				<hll><line>744</line><src>}</src></hll>
				<hll><line>745</line><src></src></hll>
				<hll><line>746</line><src>static inline void external_wdg_enable(void)</src></hll>
				<hll><line>747</line><src>{</src></hll>
				<hll><line>748</line><src>    Dio_WriteChannel(DioConf_DioChannel_Dio_Port2_Pin4, 0U);</src></hll>
				<hll><line>749</line><src>}</src></hll>
				<hll><line>750</line><src></src></hll>
				<hll><line>751</line><src>/* SWC_ISR */</src></hll>
				<hll><line>752</line><src>extern volatile uint32 e2e_err_flags[MSG_GRP_NUM];</src></hll>
				<hll><line>753</line><src>extern volatile uint32 msg_received_flags[MSG_GRP_NUM]; </src></hll>
				<hll><line>754</line><src>extern volatile uint32 msg_received_buf[MSG_GRP_NUM];</src></hll>
				<hll><line>755</line><src></src></hll>
				<hll><line>756</line><src>static inline boolean is_updated(uint8 msg_grp, uint8 pos)</src></hll>
				<hll><line>757</line><src>{</src></hll>
				<hll><cov>never</cov><line>758</line><src>    return !!(msg_received_flags[msg_grp] &amp; BIT(pos));</src></hll>
				<asm><cov>never</cov><addr>P:800045BC</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045BE</addr><code>FB41FF61</code><mnemonic>fcall     0x80003C40</mnemonic><comment>.cocofun_63</comment></asm>
				<asm><cov>never</cov><addr>P:800045C2</addr><code>1F26</code><mnemonic>and16     d15,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004662</addr><code>20382719</code><mnemonic>ld.w      d7,[a2]0xB8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004666</addr><code>7326</code><mnemonic>and16     d3,d7</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046CA</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046CE</addr><code>20384119</code><mnemonic>ld.w      d1,[a4]0xB8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046D4</addr><code>0126</code><mnemonic>and16     d1,d0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004730</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004734</addr><code>20384219</code><mnemonic>ld.w      d2,[a4]0xB8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000473A</addr><code>1226</code><mnemonic>and16     d2,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047B4</addr><code>20382219</code><mnemonic>ld.w      d2,[a2]0xB8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047B8</addr><code>1226</code><mnemonic>and16     d2,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047E4</addr><code>20382019</code><mnemonic>ld.w      d0,[a2]0xB8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800047E8</addr><code>F026</code><mnemonic>and16     d0,d15</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\SWC_Failsafe.h" type="multiple">
				<hll><line>759</line><src>}</src></hll>
				<hll><line>760</line><src></src></hll>
				<hll><line>761</line><src>static inline boolean is_e2e_err(uint8 msg_grp, uint8 pos)</src></hll>
				<hll><line>762</line><src>{</src></hll>
				<hll><cov>never</cov><line>763</line><src>    return !!(e2e_err_flags[msg_grp] &amp; BIT(pos));</src></hll>
				<asm><cov>never</cov><addr>P:800045B2</addr><code>1F26</code><mnemonic>and16     d15,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045C6</addr><code>2F54</code><mnemonic>ld16.w    d15,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800045C8</addr><code>F126</code><mnemonic>and16     d1,d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046B8</addr><code>2154</code><mnemonic>ld16.w    d1,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046BA</addr><code>0126</code><mnemonic>and16     d1,d0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046D8</addr><code>2154</code><mnemonic>ld16.w    d1,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800046DA</addr><code>1026</code><mnemonic>and16     d0,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004720</addr><code>2254</code><mnemonic>ld16.w    d2,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004722</addr><code>1226</code><mnemonic>and16     d2,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000473E</addr><code>2254</code><mnemonic>ld16.w    d2,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80004740</addr><code>2126</code><mnemonic>and16     d1,d2</mnemonic></asm>
			</mixed>
		</List.EXPORT>
	</listing>
</TRACE32>

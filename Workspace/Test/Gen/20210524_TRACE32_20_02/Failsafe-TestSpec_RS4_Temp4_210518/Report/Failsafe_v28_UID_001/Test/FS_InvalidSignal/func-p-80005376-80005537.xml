<?xml version="1.0" encoding="iso-8859-1" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="t32transform.xsl"?>
<TRACE32 file="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Gen\20210524_TRACE32_20_02\Failsafe-TestSpec_RS4_Temp4_210518\Report\Failsafe_v28_UID_001\Test\FS_InvalidSignal\func-p-80005376-80005537.xml">
	<coverage>
		<COVerage.EXPORT.ListLine ts="1621823166" t32ver="R.2020.09.000128638" t32pv="TRICORE" cpu="TC397XE" metric="object">
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\Rte_SWC_Diag</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>-</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>0</never>
				<bytes>638</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\FS_HWFailure</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>16</never>
				<bytes>236</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\SWC_Failsafe</tree>
				<cov>partial</cov>
				<exec metric="object">0.600%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>16</never>
				<bytes>1666</bytes>
				<bytesok>10</bytesok>
			</module>
			<module>
				<addrFrom>P:80002DEA</addrFrom>
				<addrTo>P:80002F83</addrTo>
				<tree>\\Test\FS_BatteryVoltage</tree>
				<cov>partial</cov>
				<exec metric="object">59.512%</exec>
				<branches>52.000%</branches>
				<ok>8</ok>
				<taken>3</taken>
				<nottaken>7</nottaken>
				<never>7</never>
				<bytes>410</bytes>
				<bytesok>244</bytesok>
			</module>
			<module>
				<addrFrom>P:80002F84</addrFrom>
				<addrTo>P:800030BB</addrTo>
				<tree>\\Test\FS_CANBusOff</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>17</never>
				<bytes>312</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\FS_CANTimeout</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>350</never>
				<bytes>2458</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\FS_InvalidSignal</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>350</never>
				<bytes>6758</bytes>
				<bytesok>0</bytesok>
				<function>
					<addrFrom>P:80005376</addrFrom>
					<addrTo>P:80005537</addrTo>
					<tree uid="p-80005376-80005537">\\Test\FS_InvalidSignal\update_navi</tree>
					<cov>never</cov>
					<exec metric="object">0.000%</exec>
					<branches>0.000%</branches>
					<ok>0</ok>
					<taken>0</taken>
					<nottaken>0</nottaken>
					<never>35</never>
					<bytes>450</bytes>
					<bytesok>0</bytesok>
					<line>
						<addrFrom>P:80005376</addrFrom>
						<addrTo>P:80005377</addrTo>
						<tree>FS_InvalidSignal.c \998--1229</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1230--1231</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000537C</addrFrom>
						<addrTo>P:80005387</addrTo>
						<tree>FS_InvalidSignal.c \1232--1234</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000538A</addrFrom>
						<addrTo>P:8000538D</addrTo>
						<tree>FS_InvalidSignal.c \1235--1235</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1236--1250</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005392</addrFrom>
						<addrTo>P:80005395</addrTo>
						<tree>FS_InvalidSignal.c \1251--1251</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005398</addrFrom>
						<addrTo>P:8000539B</addrTo>
						<tree>FS_InvalidSignal.c \1252--1252</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000539E</addrFrom>
						<addrTo>P:800053A3</addrTo>
						<tree>FS_InvalidSignal.c \1253--1253</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800053A4</addrFrom>
						<addrTo>P:800053A7</addrTo>
						<tree>FS_InvalidSignal.c \1254--1254</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800053A8</addrFrom>
						<addrTo>P:800053AB</addrTo>
						<tree>FS_InvalidSignal.c \1255--1255</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800053AC</addrFrom>
						<addrTo>P:800053BB</addrTo>
						<tree>FS_InvalidSignal.c \1256--1257</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>4</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1258--1258</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>4</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1259--1259</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1260--1261</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1262--1267</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1268--1268</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1269--1269</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005402</addrFrom>
						<addrTo>P:80005405</addrTo>
						<tree>FS_InvalidSignal.c \1270--1270</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005406</addrFrom>
						<addrTo>P:80005413</addrTo>
						<tree>FS_InvalidSignal.c \1271--1272</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>14</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005414</addrFrom>
						<addrTo>P:80005427</addrTo>
						<tree>FS_InvalidSignal.c \1273--1273</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>20</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005428</addrFrom>
						<addrTo>P:8000542B</addrTo>
						<tree>FS_InvalidSignal.c \1274--1274</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000542C</addrFrom>
						<addrTo>P:8000542D</addrTo>
						<tree>FS_InvalidSignal.c \1275--1277</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000542E</addrFrom>
						<addrTo>P:80005431</addrTo>
						<tree>FS_InvalidSignal.c \1278--1281</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005432</addrFrom>
						<addrTo>P:80005433</addrTo>
						<tree>FS_InvalidSignal.c \1282--1283</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1284--1286</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>24</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000543C</addrFrom>
						<addrTo>P:80005441</addrTo>
						<tree>FS_InvalidSignal.c \1287--1287</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005442</addrFrom>
						<addrTo>P:80005449</addrTo>
						<tree>FS_InvalidSignal.c \1288--1288</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1289--1289</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1290--1295</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>2</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1296--1297</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>20</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005480</addrFrom>
						<addrTo>P:80005483</addrTo>
						<tree>FS_InvalidSignal.c \1298--1298</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1299--1299</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005484</addrFrom>
						<addrTo>P:80005487</addrTo>
						<tree>FS_InvalidSignal.c \1300--1300</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005484</addrFrom>
						<addrTo>P:80005487</addrTo>
						<tree>FS_InvalidSignal.c \1301--1301</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005488</addrFrom>
						<addrTo>P:80005489</addrTo>
						<tree>FS_InvalidSignal.c \1302--1305</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000548A</addrFrom>
						<addrTo>P:8000548B</addrTo>
						<tree>FS_InvalidSignal.c \1306--1306</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000548C</addrFrom>
						<addrTo>P:80005491</addrTo>
						<tree>FS_InvalidSignal.c \1307--1309</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005492</addrFrom>
						<addrTo>P:8000549B</addrTo>
						<tree>FS_InvalidSignal.c \1310--1310</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>10</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1311--1313</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>8</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1314--1314</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>22</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054C4</addrFrom>
						<addrTo>P:800054C5</addrTo>
						<tree>FS_InvalidSignal.c \1315--1316</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1317--1324</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>12</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054D6</addrFrom>
						<addrTo>P:800054D7</addrTo>
						<tree>FS_InvalidSignal.c \1325--1325</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054E2</addrFrom>
						<addrTo>P:800054E5</addrTo>
						<tree>FS_InvalidSignal.c \1326--1327</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054D8</addrFrom>
						<addrTo>P:800054D9</addrTo>
						<tree>FS_InvalidSignal.c \1328--1328</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054E6</addrFrom>
						<addrTo>P:800054E9</addrTo>
						<tree>FS_InvalidSignal.c \1329--1330</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054DA</addrFrom>
						<addrTo>P:800054DB</addrTo>
						<tree>FS_InvalidSignal.c \1331--1331</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054DE</addrFrom>
						<addrTo>P:800054E1</addrTo>
						<tree>FS_InvalidSignal.c \1332--1332</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054EA</addrFrom>
						<addrTo>P:800054ED</addrTo>
						<tree>FS_InvalidSignal.c \1333--1334</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054DC</addrFrom>
						<addrTo>P:800054DD</addrTo>
						<tree>FS_InvalidSignal.c \1335--1335</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054EE</addrFrom>
						<addrTo>P:800054F1</addrTo>
						<tree>FS_InvalidSignal.c \1336--1337</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:800054F2</addrFrom>
						<addrTo>P:800054F3</addrTo>
						<tree>FS_InvalidSignal.c \1338--1340</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1341--1343</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>18</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005524</addrFrom>
						<addrTo>P:80005527</addrTo>
						<tree>FS_InvalidSignal.c \1344--1348</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>4</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005510</addrFrom>
						<addrTo>P:80005517</addrTo>
						<tree>FS_InvalidSignal.c \1349--1349</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>8</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000550A</addrFrom>
						<addrTo>P:8000550F</addrTo>
						<tree>FS_InvalidSignal.c \1350--1350</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>FS_InvalidSignal.c \1351--1351</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000552C</addrFrom>
						<addrTo>P:8000552D</addrTo>
						<tree>FS_InvalidSignal.c \1352--1355</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:8000552E</addrFrom>
						<addrTo>P:8000552F</addrTo>
						<tree>FS_InvalidSignal.c \1356--1356</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005530</addrFrom>
						<addrTo>P:80005535</addrTo>
						<tree>FS_InvalidSignal.c \1357--1357</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>1</never>
						<bytes>6</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>P:80005536</addrFrom>
						<addrTo>P:80005537</addrTo>
						<tree>FS_InvalidSignal.c \1358--1360</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>2</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>SWC_Failsafe.h \1--738</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\SWC_Failsafe.h</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>28</bytes>
						<bytesok>0</bytesok>
					</line>
					<line>
						<addrFrom>multiple</addrFrom>
						<tree>SWC_Failsafe.h \739--758</tree>
						<srcpath>C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\SWC_Failsafe.h</srcpath>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>-</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>0</never>
						<bytes>16</bytes>
						<bytesok>0</bytesok>
					</line>
					<total>
						<cov>never</cov>
						<exec metric="object">0.000%</exec>
						<branches>0.000%</branches>
						<ok>0</ok>
						<taken>0</taken>
						<nottaken>0</nottaken>
						<never>32</never>
						<bytes>494</bytes>
						<bytesok>0</bytesok>
					</total>
				</function>
				<total>
					<cov>never</cov>
					<exec metric="object">0.000%</exec>
					<branches>0.000%</branches>
					<ok>0</ok>
					<taken>0</taken>
					<nottaken>0</nottaken>
					<never>35</never>
					<bytes>450</bytes>
					<bytesok>0</bytesok>
				</total>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\FS_SWFailure</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>17</never>
				<bytes>304</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\prost_cstart</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>5</never>
				<bytes>806</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\prost_cstart_tc1</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>402</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\prost_cstart_tc2</tree>
				<cov>partial</cov>
				<exec metric="object">81.094%</exec>
				<branches>87.500%</branches>
				<ok>3</ok>
				<taken>0</taken>
				<nottaken>1</nottaken>
				<never>0</never>
				<bytes>402</bytes>
				<bytesok>326</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\prost_cstart_tc3</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>multiple</addrFrom>
				<tree>\\Test\prost_main</tree>
				<cov>partial</cov>
				<exec metric="object">27.835%</exec>
				<branches>31.818%</branches>
				<ok>1</ok>
				<taken>4</taken>
				<nottaken>1</nottaken>
				<never>5</never>
				<bytes>388</bytes>
				<bytesok>108</bytesok>
			</module>
			<module>
				<addrFrom>P:800065B6</addrFrom>
				<addrTo>P:8000674B</addrTo>
				<tree>\\Test\prost_cstart_tc4</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:8000674C</addrFrom>
				<addrTo>P:800068E1</addrTo>
				<tree>\\Test\prost_cstart_tc5</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>4</never>
				<bytes>406</bytes>
				<bytesok>0</bytesok>
			</module>
			<module>
				<addrFrom>P:80006A62</addrFrom>
				<addrTo>P:80006A91</addrTo>
				<tree>\\Test\prost_stubs</tree>
				<cov>never</cov>
				<exec metric="object">0.000%</exec>
				<branches>0.000%</branches>
				<ok>0</ok>
				<taken>0</taken>
				<nottaken>0</nottaken>
				<never>2</never>
				<bytes>48</bytes>
				<bytesok>0</bytesok>
			</module>
			<total>
				<cov>partial</cov>
				<exec metric="object">4.287%</exec>
				<branches>2.412%</branches>
				<ok>12</ok>
				<taken>7</taken>
				<nottaken>9</nottaken>
				<never>801</never>
				<bytes>16046</bytes>
				<bytesok>688</bytesok>
			</total>
		</COVerage.EXPORT.ListLine>
	</coverage>
	<marker>
		<BookMark.EXPORT ts="1621823166" t32ver="R.2020.09.000128638" t32pv="TRICORE" cpu="TC397XE">
		</BookMark.EXPORT>
	</marker>
	<listing>
		<List.EXPORT ts="1621823166" t32ver="R.2020.09.000128638" t32pv="TRICORE" order="source">
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>998</line><src>    }</src></hll>
				<hll><line>999</line><src>#endif /* ICSC_MSG */</src></hll>
				<hll><line>1000</line><src>}</src></hll>
				<hll><line>1001</line><src></src></hll>
				<hll><line>1002</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>1003</line><src>static void update_cgw(void)</src></hll>
				<hll><line>1004</line><src>{</src></hll>
				<hll><line>1005</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>1006</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>1007</line><src></src></hll>
				<hll><line>1008</line><src>    if (!is_timeout(CHASSIS_0, P_STS_POS)) {</src></hll>
				<hll><line>1009</line><src>        update_info(&amp;cgw[CGW_C181786_0], meet_precond,</src></hll>
				<hll><line>1010</line><src>                    is_e2e_err(CHASSIS_0, P_STS_POS),</src></hll>
				<hll><line>1011</line><src>                    is_updated(CHASSIS_0, P_STS_POS),</src></hll>
				<hll><line>1012</line><src>                    MS2TICK(2000), VALID_CNT_THR);</src></hll>
				<hll><line>1013</line><src>    }</src></hll>
				<hll><line>1014</line><src>}</src></hll>
				<hll><line>1015</line><src></src></hll>
				<hll><line>1016</line><src>static void update_clu(void)</src></hll>
				<hll><line>1017</line><src>{</src></hll>
				<hll><line>1018</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>1019</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>1020</line><src></src></hll>
				<hll><line>1021</line><src>    uint16 CF_Clu_Vanz = ref_sig.CF_Clu_Vanz;</src></hll>
				<hll><line>1022</line><src>    uint8 CF_Clu_HDALCFuncOnSetReq = ref_sig.CF_Clu_HDALCFuncOnSetReq;</src></hll>
				<hll><line>1023</line><src></src></hll>
				<hll><line>1024</line><src>    if (!is_timeout(CHASSIS_0, CLU11_POS)) {</src></hll>
				<hll><line>1025</line><src>        update_info(&amp;clu[CLU_C165686_0], meet_precond,</src></hll>
				<hll><line>1026</line><src>                    is_e2e_err(CHASSIS_0, CLU11_POS) || (CF_Clu_Vanz == 0x1FF),</src></hll>
				<hll><line>1027</line><src>                    is_updated(CHASSIS_0, CLU11_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, CLU11_POS) &amp;&amp; (CF_Clu_Vanz != 0x1FF),</src></hll>
				<hll><line>1028</line><src>                    MS2TICK(2000), VALID_CNT_THR);</src></hll>
				<hll><line>1029</line><src>    }</src></hll>
				<hll><line>1030</line><src></src></hll>
				<hll><line>1031</line><src>    update_info(&amp;clu[CLU_C165686_1], meet_precond,</src></hll>
				<hll><line>1032</line><src>                CF_Clu_HDALCFuncOnSetReq == 0x3,</src></hll>
				<hll><line>1033</line><src>                is_updated(CHASSIS_0, CLU25_POS) &amp;&amp; CF_Clu_HDALCFuncOnSetReq != 0x3,</src></hll>
				<hll><line>1034</line><src>                MS2TICK(2000), VALID_CNT_THR);</src></hll>
				<hll><line>1035</line><src></src></hll>
				<hll><line>1036</line><src>    if (!Get_HDA2_Option())</src></hll>
				<hll><line>1037</line><src>        clu[CLU_C165686_1].fault = FALSE;</src></hll>
				<hll><line>1038</line><src>}</src></hll>
				<hll><line>1039</line><src></src></hll>
				<hll><line>1040</line><src>static void update_esc(void)</src></hll>
				<hll><line>1041</line><src>{</src></hll>
				<hll><line>1042</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>1043</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>1044</line><src></src></hll>
				<hll><line>1045</line><src>    uint8 CYL_PRES_STAT = ref_sig.CYL_PRES_STAT;</src></hll>
				<hll><line>1046</line><src>    uint16 CYL_PRES = ref_sig.CYL_PRES;</src></hll>
				<hll><line>1047</line><src>    uint8 ABS_DIAG = ref_sig.ABS_DIAG;</src></hll>
				<hll><line>1048</line><src>    uint8 FCA_EQUIP = ref_sig.FCA_EQUIP;</src></hll>
				<hll><line>1049</line><src>    uint8 CF_VSM_Avail = ref_sig.CF_VSM_Avail;</src></hll>
				<hll><line>1050</line><src>    uint8 SCCEnable = ref_sig.SCCEnable;</src></hll>
				<hll><line>1051</line><src>    uint8 SCC_EQUIP = ref_sig.SCC_EQUIP;</src></hll>
				<hll><line>1052</line><src>    uint16 YAW_RATE = ref_sig.YAW_RATE;</src></hll>
				<hll><line>1053</line><src>    uint8 YAW_RATE_STAT = ref_sig.YAW_RATE_STAT;</src></hll>
				<hll><line>1054</line><src>    uint16 LAT_ACCEL = ref_sig.LAT_ACCEL;</src></hll>
				<hll><line>1055</line><src>    uint8 LAT_ACCEL_STAT = ref_sig.LAT_ACCEL_STAT;</src></hll>
				<hll><line>1056</line><src>    uint16 LONG_ACCEL = ref_sig.LONG_ACCEL;</src></hll>
				<hll><line>1057</line><src>    uint8 LONG_ACCEL_STAT = ref_sig.LONG_ACCEL_STAT;</src></hll>
				<hll><line>1058</line><src>    uint16 WHL_SPD_FL = ref_sig.WHL_SPD_FL;</src></hll>
				<hll><line>1059</line><src>    uint16 WHL_SPD_FR = ref_sig.WHL_SPD_FR;</src></hll>
				<hll><line>1060</line><src>    uint16 WHL_SPD_RL = ref_sig.WHL_SPD_RL;</src></hll>
				<hll><line>1061</line><src>    uint16 WHL_SPD_RR = ref_sig.WHL_SPD_RR;</src></hll>
				<hll><line>1062</line><src></src></hll>
				<hll><line>1063</line><src>    if (!is_timeout(CHASSIS_0, TCS11_POS) &amp;&amp; !is_timeout(CHASSIS_0, TCS13_POS) &amp;&amp; !is_timeout(CHASSIS_0, ESP12_POS)) {</src></hll>
				<hll><line>1064</line><src>        uint8 WHL_SPD_FAULT_CNT = 0;</src></hll>
				<hll><line>1065</line><src>        if (WHL_SPD_FL == 0x3FFF) WHL_SPD_FAULT_CNT++;</src></hll>
				<hll><line>1066</line><src>        if (WHL_SPD_FR == 0x3FFF) WHL_SPD_FAULT_CNT++;</src></hll>
				<hll><line>1067</line><src>        if (WHL_SPD_RL == 0x3FFF) WHL_SPD_FAULT_CNT++;</src></hll>
				<hll><line>1068</line><src>        if (WHL_SPD_RR == 0x3FFF) WHL_SPD_FAULT_CNT++;</src></hll>
				<hll><line>1069</line><src></src></hll>
				<hll><line>1070</line><src>        update_info(&amp;esc[ESC_C164286_0], meet_precond,</src></hll>
				<hll><line>1071</line><src>                    is_e2e_err(CHASSIS_0, TCS11_POS) || is_e2e_err(CHASSIS_0, TCS13_POS) || (CYL_PRES_STAT == 1 &amp;&amp; CYL_PRES == 0xFFF) || (YAW_RATE == 0x1FFF &amp;&amp; YAW_RATE_STAT == 1) || (LONG_ACCEL == 0x7FF &amp;&amp; LONG_ACCEL_STAT == 1) || (LAT_ACCEL == 0x7FF &amp;&amp; LAT_ACCEL_STAT == 1) || WHL_SPD_FAULT_CNT &gt;= 2,</src></hll>
				<hll><line>1072</line><src>                    is_updated(CHASSIS_0, TCS13_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, TCS11_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, TCS13_POS) &amp;&amp; (CYL_PRES_STAT == 0 &amp;&amp; CYL_PRES != 0xFFF) &amp;&amp; (YAW_RATE != 0x1FFF &amp;&amp; YAW_RATE_STAT == 0) &amp;&amp; (LONG_ACCEL != 0x7FF &amp;&amp; LONG_ACCEL_STAT == 0) &amp;&amp; (LAT_ACCEL != 0x7FF &amp;&amp; LAT_ACCEL_STAT == 0) &amp;&amp; WHL_SPD_FAULT_CNT &lt;= 1,</src></hll>
				<hll><line>1073</line><src>                    MS2TICK(100), VALID_CNT_THR);</src></hll>
				<hll><line>1074</line><src>    }</src></hll>
				<hll><line>1075</line><src></src></hll>
				<hll><line>1076</line><src>    if (!is_timeout(CHASSIS_0, TCS11_POS) &amp;&amp; !is_timeout(CHASSIS_0, TCS13_POS)) {</src></hll>
				<hll><line>1077</line><src>        update_info(&amp;esc[ESC_C164286_1], meet_precond,</src></hll>
				<hll><line>1078</line><src>                    FCA_EQUIP == 0 || (CF_VSM_Avail == 1 &amp;&amp; ABS_DIAG == 0) || CF_VSM_Avail == 2,</src></hll>
				<hll><line>1079</line><src>                    is_updated(CHASSIS_0, TCS13_POS) &amp;&amp; FCA_EQUIP == 1 &amp;&amp; CF_VSM_Avail == 0,</src></hll>
				<hll><line>1080</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>1081</line><src>    }</src></hll>
				<hll><line>1082</line><src></src></hll>
				<hll><line>1083</line><src>    if (!is_timeout(CHASSIS_0, TCS11_POS) &amp;&amp; !is_timeout(CHASSIS_0, TCS13_POS)) {</src></hll>
				<hll><line>1084</line><src>        update_info(&amp;esc[ESC_NA_0], meet_precond,</src></hll>
				<hll><line>1085</line><src>                    CF_VSM_Avail == 1 &amp;&amp; ABS_DIAG == 1,</src></hll>
				<hll><line>1086</line><src>                    is_updated(CHASSIS_0, TCS13_POS) &amp;&amp; CF_VSM_Avail == 0,</src></hll>
				<hll><line>1087</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>1088</line><src>    }</src></hll>
				<hll><line>1089</line><src></src></hll>
				<hll><line>1090</line><src>    if (!is_timeout(CHASSIS_0, TCS13_POS)) {</src></hll>
				<hll><line>1091</line><src>        update_info(&amp;esc[ESC_C16B981_0], meet_precond,</src></hll>
				<hll><line>1092</line><src>                    CF_VSM_Avail == 3,</src></hll>
				<hll><line>1093</line><src>                    is_updated(CHASSIS_0, TCS13_POS) &amp;&amp; CF_VSM_Avail == 0,</src></hll>
				<hll><line>1094</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>1095</line><src>    }</src></hll>
				<hll><line>1096</line><src></src></hll>
				<hll><line>1097</line><src>    if (!is_timeout(CHASSIS_0, TCS11_POS) &amp;&amp; !is_timeout(CHASSIS_0, TCS13_POS)) {</src></hll>
				<hll><line>1098</line><src>        update_info(&amp;esc[ESC_C136081_0], meet_precond,</src></hll>
				<hll><line>1099</line><src>                    SCC_EQUIP == 0 || (SCCEnable == 1 &amp;&amp; ABS_DIAG == 0) || SCCEnable == 2,</src></hll>
				<hll><line>1100</line><src>                    is_updated(CHASSIS_0, TCS13_POS) &amp;&amp; SCC_EQUIP == 1 &amp;&amp; SCCEnable == 0,</src></hll>
				<hll><line>1101</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>1102</line><src>    }</src></hll>
				<hll><line>1103</line><src></src></hll>
				<hll><line>1104</line><src>    if (!is_timeout(CHASSIS_0, TCS11_POS) &amp;&amp; !is_timeout(CHASSIS_0, TCS13_POS)) {</src></hll>
				<hll><line>1105</line><src>        update_info(&amp;esc[ESC_NA_1], meet_precond,</src></hll>
				<hll><line>1106</line><src>                    SCCEnable == 1 &amp;&amp; ABS_DIAG == 1,</src></hll>
				<hll><line>1107</line><src>                    is_updated(CHASSIS_0, TCS13_POS) &amp;&amp; SCCEnable == 0,</src></hll>
				<hll><line>1108</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>1109</line><src>    }</src></hll>
				<hll><line>1110</line><src></src></hll>
				<hll><line>1111</line><src>    if (!is_timeout(CHASSIS_0, TCS13_POS)) {</src></hll>
				<hll><line>1112</line><src>        update_info(&amp;esc[ESC_C16B981_1], meet_precond,</src></hll>
				<hll><line>1113</line><src>                    SCCEnable == 3,</src></hll>
				<hll><line>1114</line><src>                    is_updated(CHASSIS_0, TCS13_POS) &amp;&amp; SCCEnable == 0,</src></hll>
				<hll><line>1115</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>1116</line><src>    }</src></hll>
				<hll><line>1117</line><src>}</src></hll>
				<hll><line>1118</line><src></src></hll>
				<hll><line>1119</line><src>static void update_mdps(void)</src></hll>
				<hll><line>1120</line><src>{</src></hll>
				<hll><line>1121</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>1122</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>1123</line><src></src></hll>
				<hll><line>1124</line><src>    extern MsgGr_CCAN_ADAS_CMD_30_1_10ms MsgGr_ADAS_CMD_30_1_10ms_Out;</src></hll>
				<hll><line>1125</line><src></src></hll>
				<hll><line>1126</line><src>    uint16 CR_Mdps_StrColTq = ref_sig.CR_Mdps_StrColTq;</src></hll>
				<hll><line>1127</line><src>    uint8 CF_Mdps_ToiActive = ref_sig.CF_Mdps_ToiActive;</src></hll>
				<hll><line>1128</line><src>    uint8 CF_Mdps_ToiUnavail = ref_sig.CF_Mdps_ToiUnavail;</src></hll>
				<hll><line>1129</line><src>    uint8 CF_Mdps_FailStat = ref_sig.CF_Mdps_FailStat;</src></hll>
				<hll><line>1130</line><src>    uint8 CF_Mdps_ToiFlt = ref_sig.CF_Mdps_ToiFlt;</src></hll>
				<hll><line>1131</line><src>    uint8 LKA_ActToiSta = MsgGr_ADAS_CMD_30_1_10ms_Out.LKA_ActToiSta;</src></hll>
				<hll><line>1132</line><src></src></hll>
				<hll><line>1133</line><src>    if (!is_timeout(CHASSIS_0, MDPS12_POS)) {</src></hll>
				<hll><line>1134</line><src>        update_info(&amp;mdps[MDPS_C168886_0], meet_precond,</src></hll>
				<hll><line>1135</line><src>                    CR_Mdps_StrColTq == 0x7FF,</src></hll>
				<hll><line>1136</line><src>                    is_updated(CHASSIS_0, MDPS12_POS) &amp;&amp; (CR_Mdps_StrColTq != 0x7FF),</src></hll>
				<hll><line>1137</line><src>                    MS2TICK(100), VALID_CNT_THR);</src></hll>
				<hll><line>1138</line><src>    }</src></hll>
				<hll><line>1139</line><src></src></hll>
				<hll><line>1140</line><src>    if (!is_timeout(CHASSIS_0, MDPS12_POS)) {</src></hll>
				<hll><line>1141</line><src>        update_info(&amp;mdps[MDPS_C223986_0], meet_precond,</src></hll>
				<hll><line>1142</line><src>                    CF_Mdps_ToiFlt != 0x0,</src></hll>
				<hll><line>1143</line><src>                    is_updated(CHASSIS_0, MDPS12_POS) &amp;&amp; (CF_Mdps_ToiFlt == 0x0),</src></hll>
				<hll><line>1144</line><src>                    MS2TICK(100), VALID_CNT_THR);</src></hll>
				<hll><line>1145</line><src>    }</src></hll>
				<hll><line>1146</line><src></src></hll>
				<hll><line>1147</line><src>    /* ADAS_ActToiSta and MDPS_LkaToiActvSta mismatch */</src></hll>
				<hll><line>1148</line><src>    static uint8 CF_Mdps_ToiUnavail_prev;</src></hll>
				<hll><line>1149</line><src>    static uint8 CF_Mdps_ToiFlt_prev;</src></hll>
				<hll><line>1150</line><src>    static uint8 CF_Mdps_FailStat_prev;</src></hll>
				<hll><line>1151</line><src>    static uint8 rampdown_tick_remain;</src></hll>
				<hll><line>1152</line><src></src></hll>
				<hll><line>1153</line><src>    if (!is_timeout(CHASSIS_0, MDPS12_POS)) {</src></hll>
				<hll><line>1154</line><src>        if (LKA_ActToiSta == 1 &amp;&amp; ((CF_Mdps_ToiUnavail_prev == 0 &amp;&amp; CF_Mdps_ToiUnavail == 1) ||</src></hll>
				<hll><line>1155</line><src>                                   (CF_Mdps_ToiFlt_prev == 0 &amp;&amp; CF_Mdps_ToiFlt == 1) ||</src></hll>
				<hll><line>1156</line><src>                                   (CF_Mdps_FailStat_prev == 0 &amp;&amp; CF_Mdps_FailStat == 1))) {</src></hll>
				<hll><line>1157</line><src>            rampdown_tick_remain = MS2TICK(1000);</src></hll>
				<hll><line>1158</line><src>        } else if (rampdown_tick_remain) {</src></hll>
				<hll><line>1159</line><src>            rampdown_tick_remain--;</src></hll>
				<hll><line>1160</line><src>        }</src></hll>
				<hll><line>1161</line><src></src></hll>
				<hll><line>1162</line><src>        meet_precond &amp;= (rampdown_tick_remain == 0);</src></hll>
				<hll><line>1163</line><src>        update_info(&amp;mdps[MDPS_C168886_1], meet_precond,</src></hll>
				<hll><line>1164</line><src>                    LKA_ActToiSta != CF_Mdps_ToiActive,</src></hll>
				<hll><line>1165</line><src>                    is_updated(CHASSIS_0, MDPS12_POS) &amp;&amp; (LKA_ActToiSta == CF_Mdps_ToiActive),</src></hll>
				<hll><line>1166</line><src>                    MS2TICK(100), VALID_CNT_THR);</src></hll>
				<hll><line>1167</line><src>    }</src></hll>
				<hll><line>1168</line><src></src></hll>
				<hll><line>1169</line><src>    CF_Mdps_ToiUnavail_prev = CF_Mdps_ToiUnavail;</src></hll>
				<hll><line>1170</line><src>    CF_Mdps_ToiFlt_prev = CF_Mdps_ToiFlt;</src></hll>
				<hll><line>1171</line><src>    CF_Mdps_FailStat_prev = CF_Mdps_FailStat;</src></hll>
				<hll><line>1172</line><src>}</src></hll>
				<hll><line>1173</line><src></src></hll>
				<hll><line>1174</line><src>static void update_sas(void)</src></hll>
				<hll><line>1175</line><src>{</src></hll>
				<hll><line>1176</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>1177</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>1178</line><src></src></hll>
				<hll><line>1179</line><src>    sint16 SAS_Angle = ref_sig.SAS_Angle;</src></hll>
				<hll><line>1180</line><src>    uint8 SAS_Speed = ref_sig.SAS_Speed;</src></hll>
				<hll><line>1181</line><src></src></hll>
				<hll><line>1182</line><src>    if (!is_timeout(CHASSIS_0, SAS11_POS)) {</src></hll>
				<hll><line>1183</line><src>        update_info(&amp;sas[SAS_C181486_0], meet_precond,</src></hll>
				<hll><line>1184</line><src>                    is_e2e_err(CHASSIS_0, SAS11_POS) || SAS_Angle == 0x7FFF || SAS_Speed == 0xFF,</src></hll>
				<hll><line>1185</line><src>                    is_updated(CHASSIS_0, SAS11_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, SAS11_POS) &amp;&amp; SAS_Angle != 0x7FFF &amp;&amp; SAS_Speed != 0xFF,</src></hll>
				<hll><line>1186</line><src>                    MS2TICK(100), VALID_CNT_THR);</src></hll>
				<hll><line>1187</line><src>    }</src></hll>
				<hll><line>1188</line><src>}</src></hll>
				<hll><line>1189</line><src></src></hll>
				<hll><line>1190</line><src>static void update_ems(void)</src></hll>
				<hll><line>1191</line><src>{</src></hll>
				<hll><line>1192</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>1193</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>1194</line><src></src></hll>
				<hll><line>1195</line><src>    uint8 F_N_ENG = ref_sig.F_N_ENG;</src></hll>
				<hll><line>1196</line><src>    uint8 ENG_STAT = ref_sig.ENG_STAT;</src></hll>
				<hll><line>1197</line><src>    uint16 PV_AV_CAN = ref_sig.PV_AV_CAN;</src></hll>
				<hll><line>1198</line><src>    uint8 CF_Ems_AclAct = ref_sig.CF_Ems_AclAct;</src></hll>
				<hll><line>1199</line><src></src></hll>
				<hll><line>1200</line><src>    if (!is_timeout(CHASSIS_0, EMS12_POS) &amp;&amp; !is_timeout(CHASSIS_0, EMS16_POS)) {</src></hll>
				<hll><line>1201</line><src>        update_info(&amp;ems[EMS_C161386_0], meet_precond,</src></hll>
				<hll><line>1202</line><src>                    is_e2e_err(CHASSIS_0, EMS16_POS) || PV_AV_CAN == 0xFF || ENG_STAT == 0x7 || F_N_ENG == 1,</src></hll>
				<hll><line>1203</line><src>                    is_updated(CHASSIS_0, EMS12_POS) &amp;&amp; !is_e2e_err(CHASSIS_0, EMS16_POS) &amp;&amp; PV_AV_CAN != 0xFF &amp;&amp; ENG_STAT != 0x7 &amp;&amp; F_N_ENG == 0,</src></hll>
				<hll><line>1204</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>1205</line><src>    }</src></hll>
				<hll><line>1206</line><src></src></hll>
				<hll><line>1207</line><src>    if (!is_timeout(CHASSIS_0, EMS16_POS)) {</src></hll>
				<hll><line>1208</line><src>        update_info(&amp;ems[EMS_C161386_1], meet_precond,</src></hll>
				<hll><line>1209</line><src>                    CF_Ems_AclAct == 3,</src></hll>
				<hll><line>1210</line><src>                    is_updated(CHASSIS_0, EMS16_POS) &amp;&amp; CF_Ems_AclAct != 3,</src></hll>
				<hll><line>1211</line><src>                    MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>1212</line><src>    }</src></hll>
				<hll><line>1213</line><src>}</src></hll>
				<hll><line>1214</line><src></src></hll>
				<hll><line>1215</line><src>static void update_tcu(void)</src></hll>
				<hll><line>1216</line><src>{</src></hll>
				<hll><line>1217</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<hll><line>1218</line><src>    boolean meet_precond = p-&gt;is_norm_vol &amp;&amp; p-&gt;is_3s_after_ign_on &amp;&amp; p-&gt;is_eng_run &amp;&amp; p-&gt;is_not_ecan_busoff;</src></hll>
				<hll><line>1219</line><src></src></hll>
				<hll><line>1220</line><src>    uint8 G_SEL_DISP = ref_sig.G_SEL_DISP;</src></hll>
				<hll><line>1221</line><src></src></hll>
				<hll><line>1222</line><src>    update_info(&amp;tcu[TCU_C164686_0], meet_precond,</src></hll>
				<hll><line>1223</line><src>                G_SEL_DISP == 0xF,</src></hll>
				<hll><line>1224</line><src>                is_updated(CHASSIS_0, CGW_PC5_POS) &amp;&amp; G_SEL_DISP != 0xF,</src></hll>
				<hll><line>1225</line><src>                MS2TICK(500), VALID_CNT_THR);</src></hll>
				<hll><line>1226</line><src>}</src></hll>
				<hll><line>1227</line><src>#endif /* CCAN */</src></hll>
				<hll><line>1228</line><src></src></hll>
				<hll><cov>never</cov><line>1229</line><src>static void update_navi(void)</src></hll>
				<asm><cov>never</cov><addr>P:80005376</addr><code>0820</code><label>update_navi:                                                                                                                                                                                                                                                    </label><mnemonic>sub16.a   a10,#0x8</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1230</line><src>{</src></hll>
				<hll><cov>never</cov><line>1231</line><src>    struct precondition *p = get_precond_ptr();</src></hll>
				<asm><cov>never</cov><addr>P:80005378</addr><code>038F006D</code><mnemonic>call      0x80005A96</mnemonic><comment>get_precond_ptr</comment></asm>
				<asm><cov>never</cov><addr>P:80005388</addr><code>2F40</code><mnemonic>mov16.aa  a15,a2</mnemonic><comment>a15,p</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1232</line><src>    boolean meet_precond;</src></hll>
				<hll><line>1233</line><src></src></hll>
				<hll><cov>never</cov><line>1234</line><src>    uint8 HU_AdasSupport = ref_sig.HU_AdasSupport;</src></hll>
				<asm><cov>never</cov><addr>P:8000537C</addr><code>C9004091</code><mnemonic>movh.a    a12,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005380</addr><code>E038CCD9</code><mnemonic>lea       a12,[a12]0x3B8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005384</addr><code>1843C809</code><mnemonic>ld.bu     d8,[a12]0x43</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1235</line><src>    uint8 HU_NaviHandshakingSupport = ref_sig.HU_NaviHandshakingSupport;</src></hll>
				<asm><cov>never</cov><addr>P:8000538A</addr><code>1845C909</code><mnemonic>ld.bu     d9,[a12]0x45</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1236</line><src></src></hll>
				<hll><line>1237</line><src>#if NAVI_VER == GEN6</src></hll>
				<hll><line>1238</line><src>#define SAMPLE_HOLD_TIME   300</src></hll>
				<hll><line>1239</line><src>#elif NAVI_VER == GEN5</src></hll>
				<hll><line>1240</line><src>#define SAMPLE_HOLD_TIME   750</src></hll>
				<hll><line>1241</line><src>#else</src></hll>
				<hll><line>1242</line><src>#error Undefined AVN type</src></hll>
				<hll><line>1243</line><src>#endif /* NAVI_VER */</src></hll>
				<hll><line>1244</line><src></src></hll>
				<hll><line>1245</line><src>    static uint16 sample_delay = MS2TICK(SAMPLE_HOLD_TIME);</src></hll>
				<hll><line>1246</line><src>    static uint8 POS_CyclicCounter_prev = 0xFF;</src></hll>
				<hll><line>1247</line><src>    static boolean is_normal_cyclic_counter = TRUE;</src></hll>
				<hll><line>1248</line><src>    static boolean is_normal_resp_map_msg = FALSE;</src></hll>
				<hll><line>1249</line><src></src></hll>
				<hll><cov>never</cov><line>1250</line><src>    boolean navi_option = Get_NAVI_Option();</src></hll>
				<asm><cov>never</cov><addr>P:8000538E</addr><code>0375006D</code><mnemonic>call      0x80005A78</mnemonic><comment>Get_HDA2_Option</comment></asm>
				<asm><cov>never</cov><addr>P:80005396</addr><code>2B02</code><mnemonic>mov16     d11,d2</mnemonic><comment>d11,navi_option</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1251</line><src>    uint8 HU_NaviStatus = ref_sig.HU_NaviStatus;</src></hll>
				<asm><cov>never</cov><addr>P:80005392</addr><code>1841CA09</code><mnemonic>ld.bu     d10,[a12]0x41</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1252</line><src>    uint8 HU_AliveStatus= ref_sig.HU_AliveStatus;</src></hll>
				<asm><cov>never</cov><addr>P:80005398</addr><code>1842CC09</code><mnemonic>ld.bu     d12,[a12]0x42</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1253</line><src>    uint8 HU_Navi_RspADASMapMsg = ref_sig.HU_Navi_RspADASMapMsg;</src></hll>
				<asm><cov>never</cov><addr>P:8000539E</addr><code>1846CF09</code><mnemonic>ld.bu     d15,[a12]0x46</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053A2</addr><code>0178</code><mnemonic>st16.w    [a10]0x4,d15</mnemonic><comment>[a10]4,HU_Navi_RspADASMapMsg</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1254</line><src>    uint8 POS_CyclicCounter = ref_sig.POS_CyclicCounter;</src></hll>
				<asm><cov>never</cov><addr>P:800053A4</addr><code>1847C209</code><mnemonic>ld.bu     d2,[a12]0x47</mnemonic><comment>navi_option,[a12]71</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1255</line><src>    uint8 SEG_CalculatedRoute = ref_sig.SEG_CalculatedRoute;</src></hll>
				<asm><cov>never</cov><addr>P:800053A8</addr><code>1848C009</code><mnemonic>ld.bu     d0,[a12]0x48</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1256</line><src></src></hll>
				<hll><cov>never</cov><line>1257</line><src>    meet_precond = (navi_option == TRUE) &amp;&amp; (p-&gt;is_eng_run == TRUE) &amp;&amp; (p-&gt;is_norm_vol == TRUE) &amp;&amp; (p-&gt;is_not_ecan_busoff == TRUE) &amp;&amp;</src></hll>
				<asm><cov>never</cov><addr>P:800053AC</addr><code>80171BDF</code><mnemonic>jne       d11,#0x1,0x800053DA</mnemonic><comment>navi_option,#1,0x800053DA</comment></asm>
				<asm><cov>never</cov><addr>P:800053B0</addr><code>3F08</code><mnemonic>ld16.bu   d15,[a15]0x3</mnemonic><comment>HU_Navi_RspADASMapMsg,[a15]3</comment></asm>
				<asm><cov>never</cov><addr>P:800053B2</addr><code>14DE</code><mnemonic>jne16     d15,#0x1,0x800053DA</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053B4</addr><code>FF14</code><mnemonic>ld16.bu   d15,[a15]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053B6</addr><code>12DE</code><mnemonic>jne16     d15,#0x1,0x800053DA</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053B8</addr><code>4F08</code><mnemonic>ld16.bu   d15,[a15]0x4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053BA</addr><code>10DE</code><mnemonic>jne16     d15,#0x1,0x800053DA</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>1258</line><src>                   (HU_NaviStatus == 1) &amp;&amp; (HU_AliveStatus == 1) &amp;&amp; (is_timeout(CHASSIS_0, HU_CLU_PE_05_POS) == FALSE) &amp;&amp;</src></hll>
				<asm><cov>never</cov><addr>P:800053BC</addr><code>800F1ADF</code><mnemonic>jne       d10,#0x1,0x800053DA</mnemonic><comment>HU_NaviStatus,#1,0x800053DA</comment></asm>
				<asm><cov>never</cov><addr>P:800053C0</addr><code>800D1CDF</code><mnemonic>jne       d12,#0x1,0x800053DA</mnemonic><comment>HU_AliveStatus,#1,0x800053DA</comment></asm>
				<asm><cov>never</cov><addr>P:800053CC</addr><code>E7AE</code><mnemonic>jnz16.t   d15,#0x0E,0x800053DA</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>1259</line><src>                   (is_timeout(CHASSIS_0, HU_GW_PE_01_POS) == FALSE) &amp;&amp; (SEG_CalculatedRoute == 0 || SEG_CalculatedRoute == 1) &amp;&amp;</src></hll>
				<asm><cov>never</cov><addr>P:8000539C</addr><code>0482</code><mnemonic>mov16     d4,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053CE</addr><code>F6AE</code><mnemonic>jnz16.t   d15,#0x0F,0x800053DA</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053D0</addr><code>0376</code><mnemonic>jz16      d0,0x800053D6</mnemonic><comment>SEG_CalculatedRoute,0x800053D6</comment></asm>
				<asm><cov>never</cov><addr>P:800053D2</addr><code>800410DF</code><mnemonic>jne       d0,#0x1,0x800053DA</mnemonic><comment>SEG_CalculatedRoute,#1,0x800053DA</comment></asm>
				<asm><cov>never</cov><addr>P:800053D8</addr><code>14AA</code><mnemonic>cmov16    d4,d15,#0x1</mnemonic><comment>meet_precond,d15,#1</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1260</line><src>#if MAP_VER == V2_3</src></hll>
				<hll><cov>never</cov><line>1261</line><src>            (HU_AdasSupport == 5);</src></hll>
				<asm><cov>never</cov><addr>P:800053D6</addr><code>58BA</code><mnemonic>eq16      d15,d8,#0x5</mnemonic><comment>d15,HU_AdasSupport,#5</comment></asm>
				<asm><cov>never</cov><addr>P:800053E2</addr><code>0E82</code><mnemonic>mov16     d14,#0x0</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1262</line><src>#elif MAP_VER == V2</src></hll>
				<hll><line>1263</line><src>            (HU_AdasSupport == 3 || HU_AdasSupport == 4);</src></hll>
				<hll><line>1264</line><src>#else</src></hll>
				<hll><line>1265</line><src>    #error Undefined map version</src></hll>
				<hll><line>1266</line><src>#endif /* MAP_VER */          </src></hll>
				<hll><cov>never</cov><line>1267</line><src>    if (is_timeout(CHASSIS_0, HU_NAVI_V2_POS_PE_POS) == FALSE) {</src></hll>
				<asm><cov>never</cov><addr>P:800053E4</addr><code>80391FEF</code><mnemonic>jnz.t     d15,#0x11,0x80005456</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005452</addr><code>DD34</code><mnemonic>st16.b    [a13],d13</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005454</addr><code>CFB4</code><mnemonic>st16.h    [a12],d15</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>1268</line><src>        if (sample_delay == 0) {</src></hll>
				<asm><cov>never</cov><addr>P:800053E8</addr><code>C9004091</code><mnemonic>movh.a    a12,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053EC</addr><code>804ECCD9</code><mnemonic>lea       a12,[a12]0x60E</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053F0</addr><code>08C0CF09</code><mnemonic>ld.hu     d15,[a12]0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053FE</addr><code>04EE</code><mnemonic>jnz16     d15,0x80005406</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>1269</line><src>            is_normal_cyclic_counter = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:800053F4</addr><code>D9004091</code><mnemonic>movh.a    a13,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053F8</addr><code>8058DDD9</code><mnemonic>lea       a13,[a13]0x618</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053FC</addr><code>DD14</code><mnemonic>ld16.bu   d13,[a13]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005400</addr><code>ED02</code><mnemonic>mov16     d13,d14</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1270</line><src>            sample_delay = MS2TICK(SAMPLE_HOLD_TIME);</src></hll>
				<asm><cov>never</cov><addr>P:80005402</addr><code>4BDA</code><mnemonic>mov16     d15,#0x4B</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005404</addr><code>183C</code><mnemonic>j16       0x80005434</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1271</line><src>        } else {</src></hll>
				<hll><cov>never</cov><line>1272</line><src>            if (POS_CyclicCounter != POS_CyclicCounter_prev) {</src></hll>
				<asm><cov>never</cov><addr>P:80005406</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000540A</addr><code>805722D9</code><mnemonic>lea       a2,[a2]0x617</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000540E</addr><code>2314</code><mnemonic>ld16.bu   d3,[a2]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005410</addr><code>0011325F</code><mnemonic>jeq       d2,d3,0x80005432</mnemonic><comment>POS_CyclicCounter,d3,0x80005432</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1273</line><src>                if ((4 + POS_CyclicCounter - POS_CyclicCounter_prev) % 4 == 1 || POS_CyclicCounter_prev == 0xFF) {</src></hll>
				<asm><cov>never</cov><addr>P:80005414</addr><code>0080320B</code><mnemonic>sub       d0,d2,d3</mnemonic><comment>SEG_CalculatedRoute,POS_CyclicCounter,d3</comment></asm>
				<asm><cov>never</cov><addr>P:80005418</addr><code>40C2</code><mnemonic>add16     d0,#0x4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000541A</addr><code>4182</code><mnemonic>mov16     d1,#0x4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000541C</addr><code>0201104B</code><mnemonic>div       e0,d0,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005420</addr><code>000411DF</code><mnemonic>jeq       d1,#0x1,0x80005428</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005424</addr><code>FFDA</code><mnemonic>mov16     d15,#0xFF</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005426</addr><code>337E</code><mnemonic>jne16     d15,d3,0x8000542C</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1274</line><src>                    is_normal_cyclic_counter = TRUE;</src></hll>
				<asm><cov>never</cov><addr>P:80005428</addr><code>1D82</code><mnemonic>mov16     d13,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000542A</addr><code>023C</code><mnemonic>j16       0x8000542E</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1275</line><src>                                }</src></hll>
				<hll><line>1276</line><src>                else {</src></hll>
				<hll><cov>never</cov><line>1277</line><src>                    is_normal_cyclic_counter = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000542C</addr><code>ED02</code><mnemonic>mov16     d13,d14</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1278</line><src>                                }</src></hll>
				<hll><line>1279</line><src></src></hll>
				<hll><line>1280</line><src>                sample_delay = MS2TICK(SAMPLE_HOLD_TIME);</src></hll>
				<hll><cov>never</cov><line>1281</line><src>                POS_CyclicCounter_prev = POS_CyclicCounter;</src></hll>
				<asm><cov>never</cov><addr>P:8000542E</addr><code>4BDA</code><mnemonic>mov16     d15,#0x4B</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005430</addr><code>2234</code><mnemonic>st16.b    [a2],d2</mnemonic><comment>[a2],POS_CyclicCounter</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1282</line><src>            }</src></hll>
				<hll><cov>never</cov><line>1283</line><src>            sample_delay--;</src></hll>
				<asm><cov>never</cov><addr>P:80005432</addr><code>FFC2</code><mnemonic>add16     d15,#-0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1284</line><src>        }</src></hll>
				<hll><line>1285</line><src></src></hll>
				<hll><cov>never</cov><line>1286</line><src>        update_info(&amp;navi[NAVI_C183186_0], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:80005434</addr><code>0009603B</code><mnemonic>mov       d0,#0x96</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005438</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005442</addr><code>62001D8B</code><mnemonic>eq        d6,d13,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005446</addr><code>405244D9</code><mnemonic>lea       a4,[a4]0x512</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005456</addr><code>C9004091</code><mnemonic>movh.a    a12,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000545A</addr><code>4052CCD9</code><mnemonic>lea       a12,[a12]0x512</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1287</line><src>                    (is_normal_cyclic_counter == FALSE),</src></hll>
				<asm><cov>never</cov><addr>P:8000543C</addr><code>52000D8B</code><mnemonic>eq        d5,d13,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005440</addr><code>A0B4</code><mnemonic>st16.h    [a10],d0</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1288</line><src>                    (is_normal_cyclic_counter == TRUE),</src></hll>
				<asm><cov>never</cov><addr>P:80005442</addr><code>62001D8B</code><mnemonic>eq        d6,d13,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005446</addr><code>405244D9</code><mnemonic>lea       a4,[a4]0x512</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>1289</line><src>                    MS2TICK(12000), MS2TICK(NAVI_VER == GEN6 ? 600 : 1500));</src></hll>
				<asm><cov>never</cov><addr>P:80005434</addr><code>0009603B</code><mnemonic>mov       d0,#0x96</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005438</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000544A</addr><code>704B003B</code><mnemonic>mov       d7,#0x4B0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000544E</addr><code>FE93FF6D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1290</line><src>    }</src></hll>
				<hll><line>1291</line><src>    </src></hll>
				<hll><line>1292</line><src></src></hll>
				<hll><line>1293</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>1294</line><src>#if NO_EOL_STD == NOT_APPLIED</src></hll>
				<hll><cov>never</cov><line>1295</line><src>    if (HU_NaviStatus == 1 &amp;&amp; !is_timeout(CHASSIS_0, HU_CLU_PE_05_POS)) {</src></hll>
				<asm><cov>never</cov><addr>P:8000546A</addr><code>800F1ADF</code><mnemonic>jne       d10,#0x1,0x80005488</mnemonic><comment>HU_NaviStatus,#1,0x80005488</comment></asm>
				<asm><cov>never</cov><addr>P:80005476</addr><code>E9AE</code><mnemonic>jnz16.t   d15,#0x0E,0x80005488</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1296</line><src></src></hll>
				<hll><cov>never</cov><line>1297</line><src>         if (navi_boot_tick &gt;= MS2TICK(5000)) {</src></hll>
				<asm><cov>never</cov><addr>P:8000545E</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005462</addr><code>706A22D9</code><mnemonic>lea       a2,[a2]0x5EA</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005466</addr><code>08C02009</code><mnemonic>ld.hu     d0,[a2]0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005478</addr><code>F01F403B</code><mnemonic>mov       d15,#0x1F4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000547C</addr><code>8004F03F</code><mnemonic>jlt.u     d0,d15,0x80005484</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1298</line><src>            navi_boot_tick = MS2TICK(5000);</src></hll>
				<asm><cov>never</cov><addr>P:80005480</addr><code>1182</code><mnemonic>mov16     d1,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005482</addr><code>053C</code><mnemonic>j16       0x8000548C</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1299</line><src>            is_navi_boot = TRUE;</src></hll>
				<asm><cov>never</cov><addr>P:80005510</addr><code>52000F8B</code><mnemonic>eq        d5,d15,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005514</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1300</line><src>        } else {</src></hll>
				<asm><cov>never</cov><addr>P:80005484</addr><code>109A</code><mnemonic>add16     d15,d0,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005486</addr><code>023C</code><mnemonic>j16       0x8000548A</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1302</line><src>            is_navi_boot = FALSE;</src></hll>
				<hll><line>1303</line><src>        }</src></hll>
				<hll><line>1304</line><src>    } else {</src></hll>
				<hll><cov>never</cov><line>1305</line><src>        navi_boot_tick = 0;</src></hll>
				<asm><cov>never</cov><addr>P:80005488</addr><code>00DA</code><mnemonic>mov16     d15,#0x0</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1306</line><src>        is_navi_boot = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:8000548A</addr><code>0182</code><mnemonic>mov16     d1,#0x0</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1307</line><src>    }</src></hll>
				<hll><line>1308</line><src></src></hll>
				<hll><cov>never</cov><line>1309</line><src>    if (HU_NaviHandshakingSupport == 0x1) {</src></hll>
				<asm><cov>never</cov><addr>P:8000548C</addr><code>2FB4</code><mnemonic>st16.h    [a2],d15</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000548E</addr><code>800719DF</code><mnemonic>jne       d9,#0x1,0x8000549C</mnemonic><comment>HU_NaviHandshakingSupport,#1,0x8000549C</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1310</line><src>        is_navi_handshaking = TRUE;</src></hll>
				<asm><cov>never</cov><addr>P:80005492</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005496</addr><code>1082</code><mnemonic>mov16     d0,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005498</addr><code>A06320E9</code><mnemonic>st.b      [a2]0x6A3,d0</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1311</line><src>    }</src></hll>
				<hll><line>1312</line><src></src></hll>
				<hll><cov>never</cov><line>1313</line><src>    meet_precond =  (navi_option == TRUE) &amp;&amp; (p-&gt;is_eng_run == TRUE) &amp;&amp; (p-&gt;is_norm_vol == TRUE) &amp;&amp; (p-&gt;is_not_ecan_busoff == TRUE) &amp;&amp; </src></hll>
				<asm><cov>never</cov><addr>P:8000549E</addr><code>80151BDF</code><mnemonic>jne       d11,#0x1,0x800054C8</mnemonic><comment>navi_option,#1,0x800054C8</comment></asm>
				<asm><cov>never</cov><addr>P:800054A2</addr><code>3F08</code><mnemonic>ld16.bu   d15,[a15]0x3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054A4</addr><code>12DE</code><mnemonic>jne16     d15,#0x1,0x800054C8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054A6</addr><code>FF14</code><mnemonic>ld16.bu   d15,[a15]</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054A8</addr><code>10DE</code><mnemonic>jne16     d15,#0x1,0x800054C8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054AA</addr><code>4F08</code><mnemonic>ld16.bu   d15,[a15]0x4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054AC</addr><code>1E5E</code><mnemonic>jne16     d15,#0x1,0x800054C8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054D0</addr><code>0402</code><mnemonic>mov16     d4,d0</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>1314</line><src>                    (HU_AliveStatus == 1) &amp;&amp; (is_timeout(CHASSIS_0, HU_GW_PE_01_POS) == 0) &amp;&amp; (is_navi_boot == TRUE) &amp;&amp; (is_navi_handshaking == TRUE) &amp;&amp;</src></hll>
				<asm><cov>never</cov><addr>P:8000549C</addr><code>0082</code><mnemonic>mov16     d0,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054AE</addr><code>800D1CDF</code><mnemonic>jne       d12,#0x1,0x800054C8</mnemonic><comment>HU_AliveStatus,#1,0x800054C8</comment></asm>
				<asm><cov>never</cov><addr>P:800054B6</addr><code>F9AE</code><mnemonic>jnz16.t   d15,#0x0F,0x800054C8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054B8</addr><code>1876</code><mnemonic>jz16      d1,0x800054C8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054BA</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054BE</addr><code>A063FF39</code><mnemonic>ld.bu     d15,[a15]0x6A3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054C2</addr><code>135E</code><mnemonic>jne16     d15,#0x1,0x800054C8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054C6</addr><code>10AA</code><mnemonic>cmov16    d0,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1315</line><src>#if MAP_VER == V2_3</src></hll>
				<hll><cov>never</cov><line>1316</line><src>            (HU_AdasSupport == 5);</src></hll>
				<asm><cov>never</cov><addr>P:800054C4</addr><code>58BA</code><mnemonic>eq16      d15,d8,#0x5</mnemonic><comment>d15,HU_AdasSupport,#5</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1317</line><src>#elif MAP_VER == V2</src></hll>
				<hll><line>1318</line><src>            (HU_AdasSupport == 4);</src></hll>
				<hll><line>1319</line><src>#else</src></hll>
				<hll><line>1320</line><src>    #error Undefined map version</src></hll>
				<hll><line>1321</line><src>#endif /* MAP_VER */  </src></hll>
				<hll><line>1322</line><src></src></hll>
				<hll><line>1323</line><src>    uint16 check_bit = 0;</src></hll>
				<hll><cov>never</cov><line>1324</line><src>    switch (VariantCode_NvMData.stNvMVariantCode.NvM_Block_NSCC_HDA2_Option) {</src></hll>
				<asm><cov>never</cov><addr>P:800054C8</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054CC</addr><code>804AFF39</code><mnemonic>ld.bu     d15,[a15]0x60A</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054D2</addr><code>F0E40F37</code><mnemonic>extr.u    d15,d15,0x1,#0x4</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1325</line><src>        case NSCC_HDA2__NSCC_Z_HDA2:</src></hll>
				<asm><cov>never</cov><addr>P:800054D6</addr><code>161E</code><mnemonic>jeq16     d15,#0x1,0x800054E2</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1326</line><src>            check_bit = 0x0024;</src></hll>
				<hll><cov>never</cov><line>1327</line><src>        break;</src></hll>
				<asm><cov>never</cov><addr>P:800054E2</addr><code>24DA</code><mnemonic>mov16     d15,#0x24</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054E4</addr><code>083C</code><mnemonic>j16       0x800054F4</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1328</line><src>        case NSCC_HDA2__NSCC_ZC_HDA2:</src></hll>
				<asm><cov>never</cov><addr>P:800054D8</addr><code>271E</code><mnemonic>jeq16     d15,#0x2,0x800054E6</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1329</line><src>            check_bit = 0x0026;</src></hll>
				<hll><cov>never</cov><line>1330</line><src>            break;</src></hll>
				<asm><cov>never</cov><addr>P:800054E6</addr><code>26DA</code><mnemonic>mov16     d15,#0x26</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054E8</addr><code>063C</code><mnemonic>j16       0x800054F4</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1331</line><src>        case NSCC_HDA2__NSCC_ZCR_HDA2:</src></hll>
				<asm><cov>never</cov><addr>P:800054DA</addr><code>381E</code><mnemonic>jeq16     d15,#0x3,0x800054EA</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1332</line><src>        case NSCC_HDA2__NSCC_CR_HDA2:</src></hll>
				<asm><cov>never</cov><addr>P:800054DE</addr><code>561E</code><mnemonic>jeq16     d15,#0x5,0x800054EA</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054E0</addr><code>093C</code><mnemonic>j16       0x800054F2</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1333</line><src>            check_bit = 0x0067;</src></hll>
				<hll><cov>never</cov><line>1334</line><src>            break;</src></hll>
				<asm><cov>never</cov><addr>P:800054EA</addr><code>67DA</code><mnemonic>mov16     d15,#0x67</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054EC</addr><code>043C</code><mnemonic>j16       0x800054F4</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1335</line><src>        case NSCC_HDA2__NSCC_C_HDA2:</src></hll>
				<asm><cov>never</cov><addr>P:800054DC</addr><code>491E</code><mnemonic>jeq16     d15,#0x4,0x800054EE</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1336</line><src>            check_bit = 0x0022;</src></hll>
				<hll><cov>never</cov><line>1337</line><src>            break;   </src></hll>
				<asm><cov>never</cov><addr>P:800054EE</addr><code>22DA</code><mnemonic>mov16     d15,#0x22</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054F0</addr><code>023C</code><mnemonic>j16       0x800054F4</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1338</line><src>        case NSCC_HDA2__NA: </src></hll>
				<hll><line>1339</line><src>        default:</src></hll>
				<hll><cov>never</cov><line>1340</line><src>            check_bit = 0x0000;</src></hll>
				<asm><cov>never</cov><addr>P:800054F2</addr><code>00DA</code><mnemonic>mov16     d15,#0x0</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><line>1341</line><src>            break; </src></hll>
				<hll><line>1342</line><src>    }</src></hll>
				<hll><cov>never</cov><line>1343</line><src>    if ((HU_Navi_RspADASMapMsg &amp; check_bit) == check_bit) {</src></hll>
				<asm><cov>never</cov><addr>P:800054F4</addr><code>0904A009</code><mnemonic>ld.w      d0,[a10]0x4</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054FC</addr><code>F026</code><mnemonic>and16     d0,d15</mnemonic><comment>HU_Navi_RspADASMapMsg,check_bit</comment></asm>
				<asm><cov>never</cov><addr>P:800054FE</addr><code>F03A</code><mnemonic>eq16      d15,d0,d15</mnemonic><comment>check_bit,d0,check_bit</comment></asm>
				<asm><cov>never</cov><addr>P:80005500</addr><code>2038F019</code><mnemonic>ld.w      d0,[a15]0xB8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005504</addr><code>2000107B</code><mnemonic>movh      d2,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005508</addr><code>2026</code><mnemonic>and16     d0,d2</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1344</line><src>        is_normal_resp_map_msg = TRUE;</src></hll>
				<hll><line>1345</line><src>    } else {</src></hll>
				<hll><line>1346</line><src>        is_normal_resp_map_msg = FALSE;</src></hll>
				<hll><line>1347</line><src>    }</src></hll>
				<hll><cov>never</cov><line>1348</line><src>    update_info(&amp;navi[NAVI_C183186_1], meet_precond,</src></hll>
				<asm><cov>never</cov><addr>P:80005524</addr><code>0A06C449</code><mnemonic>lea       a4,[a12]0x6</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1349</line><src>                    (is_normal_resp_map_msg == FALSE),</src></hll>
				<asm><cov>never</cov><addr>P:80005510</addr><code>52000F8B</code><mnemonic>eq        d5,d15,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005514</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1350</line><src>                    (is_updated(CHASSIS_0, HU_MON_PE_01_POS) == TRUE) &amp;&amp; (is_normal_resp_map_msg == TRUE),</src></hll>
				<asm><cov>never</cov><addr>P:8000550A</addr><code>0682</code><mnemonic>mov16     d6,#0x0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000550C</addr><code>0276</code><mnemonic>jz16      d0,0x80005510</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000550E</addr><code>16AA</code><mnemonic>cmov16    d6,d15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c" type="multiple">
				<hll><cov>never</cov><line>1351</line><src>                    MS2TICK(6000), 3);</src></hll>
				<asm><cov>never</cov><addr>P:80005518</addr><code>3082</code><mnemonic>mov16     d0,#0x3</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000551A</addr><code>A062F1E9</code><mnemonic>st.b      [a15]0x6A2,d1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000551E</addr><code>7025803B</code><mnemonic>mov       d7,#0x258</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005522</addr><code>A0B4</code><mnemonic>st16.h    [a10],d0</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005528</addr><code>FE26FF6D</code><mnemonic>call      0x80005174</mnemonic><comment>update_info</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1352</line><src>#endif /* NO_EOL_STD */</src></hll>
				<hll><line>1353</line><src>#endif /* CCAN */</src></hll>
				<hll><line>1354</line><src></src></hll>
				<hll><cov>never</cov><line>1355</line><src>    if (navi_option == FALSE) {</src></hll>
				<asm><cov>never</cov><addr>P:8000552C</addr><code>B5F6</code><mnemonic>jnz16     d11,0x80005536</mnemonic><comment>navi_option,0x80005536</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1356</line><src>        for (int i = 0; i &lt; NAVI_ITEM_NUM; i++) {</src></hll>
				<asm><cov>never</cov><addr>P:8000552E</addr><code>1FA0</code><mnemonic>mov16.a   a15,#0x1</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><cov>never</cov><line>1357</line><src>            navi[i].fault = FALSE;</src></hll>
				<asm><cov>never</cov><addr>P:80005530</addr><code>0006CE89</code><mnemonic>st.b      [a12+]0x6,d14</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005534</addr><code>FEFC</code><mnemonic>loop16    a15,0x80005530</mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\FS_Items\FS_InvalidSignal.c">
				<hll><line>1358</line><src>                }</src></hll>
				<hll><line>1359</line><src>    }</src></hll>
				<hll><cov>never</cov><line>1360</line><src>}</src></hll>
				<asm><cov>never</cov><addr>P:80005536</addr><code>9000</code><mnemonic>ret16     </mnemonic></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\SWC_Failsafe.h" type="multiple">
				<hll><line>1</line><src>#ifndef FAILSAFE_H</src></hll>
				<hll><line>2</line><src>#define FAILSAFE_H</src></hll>
				<hll><line>3</line><src></src></hll>
				<hll><line>4</line><src>#include &quot;Platform_Types.h&quot;</src></hll>
				<hll><line>5</line><src>#include &quot;DRV_par.h&quot;</src></hll>
				<hll><line>6</line><src>#include &quot;FS_InvalidSignal.h&quot;</src></hll>
				<hll><line>7</line><src>#include &quot;Dio.h&quot;</src></hll>
				<hll><line>8</line><src></src></hll>
				<hll><line>9</line><src>#define BIT(nr) (1UL &lt;&lt; (nr))</src></hll>
				<hll><line>10</line><src>#define CLEAR_BIT(nr) (0UL &lt;&lt; (nr))</src></hll>
				<hll><line>11</line><src></src></hll>
				<hll><line>12</line><src>#define TEST_BIT(var,nr) ((var) &amp; ((uint8)((0x01U) &lt;&lt; (nr))))</src></hll>
				<hll><line>13</line><src>#define ARRAY_SIZE(x) (sizeof((x))/sizeof((x)[0]))</src></hll>
				<hll><line>14</line><src>#define MS2TICK(ms) ((ms) / 10UL)</src></hll>
				<hll><line>15</line><src></src></hll>
				<hll><line>16</line><src>#define SET_DTC(DTC, FAULT_CONDITION) \</src></hll>
				<hll><line>17</line><src>    Rte_Call_Event_DEM_E_UDS_DTC_##DTC##_SetEventStatus((FAULT_CONDITION) ? DEM_EVENT_STATUS_FAILED : DEM_EVENT_STATUS_PASSED)</src></hll>
				<hll><line>18</line><src></src></hll>
				<hll><line>19</line><src>#define IGN_ON_DELAY  3000  // ms</src></hll>
				<hll><line>20</line><src>#define IGN_OFF_DELAY 185000 // ms</src></hll>
				<hll><line>21</line><src>#define BAT_VOL_UPPER 16000 // mV</src></hll>
				<hll><line>22</line><src>#define BAT_VOL_LOWER 9000  // mV</src></hll>
				<hll><line>23</line><src>#define ERR_CNT_THR   3</src></hll>
				<hll><line>24</line><src></src></hll>
				<hll><line>25</line><src>#define IGN_OFF  0</src></hll>
				<hll><line>26</line><src>#define IGN_ON   1</src></hll>
				<hll><line>27</line><src>#define PWR_OFF  0xFF</src></hll>
				<hll><line>28</line><src></src></hll>
				<hll><line>29</line><src>#define FS_DEBUG    0</src></hll>
				<hll><line>30</line><src></src></hll>
				<hll><line>31</line><src>struct internal_error_info {</src></hll>
				<hll><line>32</line><src>    uint32 hw_err_cnt;</src></hll>
				<hll><line>33</line><src>    uint32 sw_err_cnt;</src></hll>
				<hll><line>34</line><src>    struct {</src></hll>
				<hll><line>35</line><src>        uint8  err_idx1;</src></hll>
				<hll><line>36</line><src>        uint8  err_idx2;</src></hll>
				<hll><line>37</line><src>        uint32 err_info;</src></hll>
				<hll><line>38</line><src>    } err_item[13];</src></hll>
				<hll><line>39</line><src>};</src></hll>
				<hll><line>40</line><src></src></hll>
				<hll><line>41</line><src>struct reference_signal {</src></hll>
				<hll><line>42</line><src>#if VEH_TYPE == NORMAL</src></hll>
				<hll><line>43</line><src>    /* EMS */</src></hll>
				<hll><line>44</line><src>    uint8 ENG_EngSpdErrSta;      // EMS_01_10ms</src></hll>
				<hll><line>45</line><src>    uint8 ENG_IsgSta;            // EMS_01_10ms</src></hll>
				<hll><line>46</line><src>    uint8 ENG_EngSta;            // EMS_02_10ms</src></hll>
				<hll><line>47</line><src>    uint16 ENG_AccelPdlVal;      // EMS_02_10ms</src></hll>
				<hll><line>48</line><src>    uint8 ENG_AppAccelPdlSta;    // EMS_02_10ms</src></hll>
				<hll><line>49</line><src>    uint8 CF_ECU_SSC_STAT;       // EMS_03_10ms</src></hll>
				<hll><line>50</line><src>    /* TCU */</src></hll>
				<hll><line>51</line><src>    uint8 TCU_GearSlctDis;       // TCU_01_10ms</src></hll>
				<hll><line>52</line><src>#elif VEH_TYPE == EV</src></hll>
				<hll><line>53</line><src>    /* VCU */</src></hll>
				<hll><line>54</line><src>    uint8 VCU_EvDrvRdySta;       // VCU_01_10ms</src></hll>
				<hll><line>55</line><src>    uint8 VCU_GearPosSta;        // VCU_01_10ms</src></hll>
				<hll><line>56</line><src>    uint8 VCU_AccPedDepVal;      // VCU_01_10ms</src></hll>
				<hll><line>57</line><src>#elif VEH_TYPE == HEV</src></hll>
				<hll><line>58</line><src>    /* EMS */</src></hll>
				<hll><line>59</line><src>    uint16 HEV_AccelPdlVal;      // EMS_07_10ms</src></hll>
				<hll><line>60</line><src>    uint8 HEV_EngSpdErrSta;      // EMS_11_10ms</src></hll>
				<hll><line>61</line><src>    /* HCU */</src></hll>
				<hll><line>62</line><src>    uint8 HCU_HevRdySta;         // HCU_03_10ms</src></hll>
				<hll><line>63</line><src>    /* HTCU */</src></hll>
				<hll><line>64</line><src>    uint8 HTCU_GearSlctrDis;     // HTCU_04_10ms</src></hll>
				<hll><line>65</line><src>#endif /* VEH_TYPE */</src></hll>
				<hll><line>66</line><src>    /* BCM */</src></hll>
				<hll><line>67</line><src>    uint8 BCM_Ign1InSta;         // BCM_02_200ms</src></hll>
				<hll><line>68</line><src>    /* SBCM */</src></hll>
				<hll><line>69</line><src>    uint8 SBCM_AST_DiagSta;      // SBCM_AST_03_200ms</src></hll>
				<hll><line>70</line><src>    uint8 SBCM_DRV_DiagSta;      // SBCM_DRV_02_200ms</src></hll>
				<hll><line>71</line><src>    /* CLU */</src></hll>
				<hll><line>72</line><src>    uint16 CLU_DisSpdVal;        // CLU_01_20ms</src></hll>
				<hll><line>73</line><src>    uint8 CLU_HDALCFuncOnSetReq; // CLU_11_00ms</src></hll>
				<hll><line>74</line><src>    /* ESC */</src></hll>
				<hll><line>75</line><src>    uint8 ABS_DiagSta;           // ABS_ESC_01_10ms</src></hll>
				<hll><line>76</line><src>    uint8 ESC_CylPrsrSta;        // ESC_01_10ms</src></hll>
				<hll><line>77</line><src>    uint16 ESC_CylPrsrVal;       // ESC_01_10ms</src></hll>
				<hll><line>78</line><src>    uint8 ESC_IMURstStaAck;      // ESC_01_10ms</src></hll>
				<hll><line>79</line><src>    uint8 ESC_Sta;               // ESC_01_10ms</src></hll>
				<hll><line>80</line><src>    uint8 FCA_EquipSta;          // ESC_03_20ms</src></hll>
				<hll><line>81</line><src>    uint8 FCA_AvlblSta;          // ESC_03_20ms</src></hll>
				<hll><line>82</line><src>    uint8 SCC_EnblReq;           // ESC_03_20ms</src></hll>
				<hll><line>83</line><src>    uint8 SCC_OptTyp;            // ESC_03_20ms</src></hll>
				<hll><line>84</line><src>    uint16 WHL_SpdFLVal;         // WHL_01_10ms</src></hll>
				<hll><line>85</line><src>    uint16 WHL_SpdFRVal;         // WHL_01_10ms</src></hll>
				<hll><line>86</line><src>    uint16 WHL_SpdRLVal;         // WHL_01_10ms</src></hll>
				<hll><line>87</line><src>    uint16 WHL_SpdRRVal;         // WHL_01_10ms</src></hll>
				<hll><line>88</line><src>    uint8 WHL_PlsFLVal;          // WHL_01_10ms</src></hll>
				<hll><line>89</line><src>    uint8 WHL_PlsFRVal;          // WHL_01_10ms</src></hll>
				<hll><line>90</line><src>    uint8 WHL_PlsRLVal;          // WHL_01_10ms</src></hll>
				<hll><line>91</line><src>    uint8 WHL_PlsRRVal;          // WHL_01_10ms</src></hll>
				<hll><line>92</line><src>    /* HOD */</src></hll>
				<hll><line>93</line><src>    uint8 HOD_Dir_Status;        //HOD_01_100ms</src></hll>
				<hll><line>94</line><src>    /* MDPS */</src></hll>
				<hll><line>95</line><src>    uint16 MDPS_StrTqSnsrVal;    // MDPS_01_10ms</src></hll>
				<hll><line>96</line><src>    uint8 MDPS_LkaToiActvSta;    // MDPS_01_10ms</src></hll>
				<hll><line>97</line><src>    uint8 MDPS_LkaToiUnblSta;    // MDPS_01_10ms</src></hll>
				<hll><line>98</line><src>    uint8 MDPS_LkaToiFltSta;     // MDPS_01_10ms</src></hll>
				<hll><line>99</line><src>    uint8 MDPS_LkaFailSta;       // MDPS_01_10ms</src></hll>
				<hll><line>100</line><src>    uint8 MDPS_LkaPlgInSta;      // MDPS_01_10ms</src></hll>
				<hll><line>101</line><src>    uint8 MDPS_Typ;              // MDPS_01_10ms</src></hll>
				<hll><line>102</line><src>    /* SAS */</src></hll>
				<hll><line>103</line><src>    sint16 SAS_AnglVal;          // SAS_01_10ms</src></hll>
				<hll><line>104</line><src>    uint8 SAS_SpdVal;            // SAS_01_10ms</src></hll>
				<hll><line>105</line><src>    /* SWRC */</src></hll>
				<hll><line>106</line><src>    uint8 SWRC_LFASwSta;         // SWRC_03_20ms</src></hll>
				<hll><line>107</line><src>    /* YRS */</src></hll>
				<hll><line>108</line><src>    uint16 IMU_YawRtVal;         // IMU_01_10ms</src></hll>
				<hll><line>109</line><src>    uint16 IMU_LongAccelVal;     // IMU_01_10ms</src></hll>
				<hll><line>110</line><src>    uint16 IMU_LatAccelVal;      // IMU_01_10ms</src></hll>
				<hll><line>111</line><src>    uint8 IMU_AcuRstSta;         // IMU_01_10ms</src></hll>
				<hll><line>112</line><src>    /* ICU */</src></hll>
				<hll><line>113</line><src>    uint8 ExtLamp_TrnSigLmpLftBlnkngSta; // ICU_04_200ms &amp; used in F010_InputOutput service</src></hll>
				<hll><line>114</line><src>    uint8 ExtLamp_TrnSigLmpRtBlnkngSta;  // ICU_04_200ms &amp; used in F010_InputOutput service</src></hll>
				<hll><line>115</line><src>    uint8 Lamp_RrTrnSigLmpLftOpnSta;     // ICU_06_200ms</src></hll>
				<hll><line>116</line><src>    uint8 Lamp_RrTrnSigLmpRtOpnSta;      // ICU_06_200ms</src></hll>
				<hll><line>117</line><src>    uint8 Lamp_FrTrnSigLmpLftOpnSta;     // ICU_06_200ms</src></hll>
				<hll><line>118</line><src>    uint8 Lamp_FrTrnSigLmpRtOpnSta;      // ICU_06_200ms</src></hll>
				<hll><line>119</line><src></src></hll>
				<hll><line>120</line><src>    /* NAVI */</src></hll>
				<hll><line>121</line><src>    uint8 HU_NaviStatus;                // HU_CLU_PE_05</src></hll>
				<hll><line>122</line><src>    uint8 HU_AliveStatus;               // HU_GW_PE_01</src></hll>
				<hll><line>123</line><src>    uint8 HU_AdasSupport;               // HU_MON_PE_01</src></hll>
				<hll><line>124</line><src>    uint8 HU_DistributeInfo;            // HU_MON_PE_01</src></hll>
				<hll><line>125</line><src>    uint8 HU_NaviHandshakingSupport;    // HU_MON_PE_01</src></hll>
				<hll><line>126</line><src>    uint8 HU_Navi_RspADASMapMsg ;       // HU_MON_PE_01</src></hll>
				<hll><line>127</line><src>    uint8 POS_CyclicCounter;         // HU_NAVI_V2_POS_PE</src></hll>
				<hll><line>128</line><src>    uint8 SEG_CalculatedRoute;       // HU_NAVI_V2_SEG_E</src></hll>
				<hll><line>129</line><src></src></hll>
				<hll><line>130</line><src>    /* Front Camera */</src></hll>
				<hll><line>131</line><src>    uint8 FR_CMR_Genrl_FlInfoSta; // A_FR_CMR_Genrl_01_30ms</src></hll>
				<hll><line>132</line><src>    uint8 LFA_ShrtkeySwSta;       // A_FR_CMR_Ctrl_01</src></hll>
				<hll><line>133</line><src>    /* Front Radar */</src></hll>
				<hll><line>134</line><src>    uint8 FR_RDR_Genrl_FlInfoSta; // A_FR_RDR_Genrl_01_50ms</src></hll>
				<hll><line>135</line><src>    /* Front-Rear Corner Radar */</src></hll>
				<hll><line>136</line><src>    uint8 FR_C_RDR_Genrl_FlrPosInfoSta; // A_FR_C_RDR_Genrl_01_50ms</src></hll>
				<hll><line>137</line><src>    uint8 FR_C_RDR_Genrl_BlkgPosInfoSta; // A_FR_C_RDR_Genrl_01_50ms</src></hll>
				<hll><line>138</line><src>};</src></hll>
				<hll><line>139</line><src></src></hll>
				<hll><line>140</line><src>struct precondition {</src></hll>
				<hll><line>141</line><src>    boolean is_norm_vol;</src></hll>
				<hll><line>142</line><src>    boolean is_3s_after_ign_on;</src></hll>
				<hll><line>143</line><src>    boolean for_3min_after_ign_off;</src></hll>
				<hll><line>144</line><src>    boolean is_eng_run;</src></hll>
				<hll><line>145</line><src>    boolean is_not_ecan_busoff;</src></hll>
				<hll><line>146</line><src>    boolean is_not_acan1_busoff;</src></hll>
				<hll><line>147</line><src>    boolean is_not_acan2_busoff;</src></hll>
				<hll><line>148</line><src>};</src></hll>
				<hll><line>149</line><src></src></hll>
				<hll><line>150</line><src></src></hll>
				<hll><line>151</line><src>/* HDA_InfoPUDis */</src></hll>
				<hll><line>152</line><src>enum {</src></hll>
				<hll><line>153</line><src>    NO_FAULT      = 0,</src></hll>
				<hll><line>154</line><src>    HDA_FAULT     = 1, // FS_02</src></hll>
				<hll><line>155</line><src>    HDA_LFA_FAULT = 2, // FS_01</src></hll>
				<hll><line>156</line><src>};</src></hll>
				<hll><line>157</line><src></src></hll>
				<hll><line>158</line><src>typedef struct {</src></hll>
				<hll><line>159</line><src>    uint8 FcaRo_Inhibit;</src></hll>
				<hll><line>160</line><src>    uint8 FcaSf2_Inhibit;</src></hll>
				<hll><line>161</line><src>    uint8 FcaSf3_Inhibit;</src></hll>
				<hll><line>162</line><src>    uint8 FcaSf3_JT_Inhibit;</src></hll>
				<hll><line>163</line><src>    uint8 FcaRo_JC_Inhibit;</src></hll>
				<hll><line>164</line><src>    uint8 FcaSf3_JC_Inhibit;</src></hll>
				<hll><line>165</line><src>    uint8 FcaSf2_Lo_Inhibit;</src></hll>
				<hll><line>166</line><src>    uint8 FcaSF3_LS_Inhibit;</src></hll>
				<hll><line>167</line><src>    uint8 Fca_ESA_Inhibit;</src></hll>
				<hll><line>168</line><src>} fca_inhibit_t;</src></hll>
				<hll><line>169</line><src></src></hll>
				<hll><line>170</line><src>typedef struct {</src></hll>
				<hll><line>171</line><src>    uint8 SccCc_Inhibit;</src></hll>
				<hll><line>172</line><src>    uint8 SccRo_Inhibit;</src></hll>
				<hll><line>173</line><src>    uint8 SccSf2_Inhibit;</src></hll>
				<hll><line>174</line><src>    uint8 SccSf3_Inhibit;</src></hll>
				<hll><line>175</line><src>} scc_inhibit_t;</src></hll>
				<hll><line>176</line><src></src></hll>
				<hll><line>177</line><src>typedef struct {</src></hll>
				<hll><line>178</line><src>    uint8 SccMl_Inhibit;</src></hll>
				<hll><line>179</line><src>} sccml_inhibit_t;</src></hll>
				<hll><line>180</line><src></src></hll>
				<hll><line>181</line><src>typedef struct {</src></hll>
				<hll><line>182</line><src>    uint8 NScc_Z_C_Inhibit;</src></hll>
				<hll><line>183</line><src>    uint8 NScc_R_Inhibit;</src></hll>
				<hll><line>184</line><src>} nscc_inhibit_t;</src></hll>
				<hll><line>185</line><src></src></hll>
				<hll><line>186</line><src>typedef struct {</src></hll>
				<hll><line>187</line><src>    uint8 Lfa_Lat_Inhibit;</src></hll>
				<hll><line>188</line><src>    uint8 LfaSf2_Inhibit;</src></hll>
				<hll><line>189</line><src>} lfa_inhibit_t;</src></hll>
				<hll><line>190</line><src></src></hll>
				<hll><line>191</line><src>typedef struct {</src></hll>
				<hll><line>192</line><src>    uint8 Hda_Lat_Inhibit;</src></hll>
				<hll><line>193</line><src>    uint8 Hda_Long_Inhibit;</src></hll>
				<hll><line>194</line><src>    uint8 Hda_Inhibit;</src></hll>
				<hll><line>195</line><src>    uint8 HdaII_Inhibit;</src></hll>
				<hll><line>196</line><src>} hda_inhibit_t;</src></hll>
				<hll><line>197</line><src></src></hll>
				<hll><line>198</line><src>typedef struct {</src></hll>
				<hll><line>199</line><src>    uint8 BCA_Inhibit;</src></hll>
				<hll><line>200</line><src>    uint8 BCA_RDRBlk_Inhibit; </src></hll>
				<hll><line>201</line><src>} bca_inhibit_t;</src></hll>
				<hll><line>202</line><src></src></hll>
				<hll><line>203</line><src>typedef struct {</src></hll>
				<hll><line>204</line><src>    uint8 SEA_Inhibit;</src></hll>
				<hll><line>205</line><src>} sea_inhibit_t;</src></hll>
				<hll><line>206</line><src></src></hll>
				<hll><line>207</line><src>typedef struct {</src></hll>
				<hll><line>208</line><src>    uint8 RCCA_Inhibit;</src></hll>
				<hll><line>209</line><src>    uint8 RCCA_RDRBlk_Inhibit;</src></hll>
				<hll><line>210</line><src>} rcca_inhibit_t;</src></hll>
				<hll><line>211</line><src></src></hll>
				<hll><line>212</line><src>typedef struct {</src></hll>
				<hll><line>213</line><src>    uint8 FCA_SysFlrSta;</src></hll>
				<hll><line>214</line><src>    uint8 SCC_SysFlrSta;</src></hll>
				<hll><line>215</line><src>    uint8 SCCMode_OptUsmSta;</src></hll>
				<hll><line>216</line><src>    uint8 SCC_NSCCOnOffSta;</src></hll>
				<hll><line>217</line><src>    uint8 HDA_InfoPUDis;</src></hll>
				<hll><line>218</line><src>    uint8 HDA_LCFuncSta;</src></hll>
				<hll><line>219</line><src>    uint8 BCW_IndSta;</src></hll>
				<hll><line>220</line><src>} warning_t;</src></hll>
				<hll><line>221</line><src></src></hll>
				<hll><line>222</line><src>struct inhibit_info {</src></hll>
				<hll><line>223</line><src>    scc_inhibit_t scc;</src></hll>
				<hll><line>224</line><src>    sccml_inhibit_t sccml;</src></hll>
				<hll><line>225</line><src>    nscc_inhibit_t nscc;</src></hll>
				<hll><line>226</line><src>    fca_inhibit_t fca;</src></hll>
				<hll><line>227</line><src>    lfa_inhibit_t lfa;</src></hll>
				<hll><line>228</line><src>    hda_inhibit_t hda;</src></hll>
				<hll><line>229</line><src>    bca_inhibit_t bca;</src></hll>
				<hll><line>230</line><src>    sea_inhibit_t sea;</src></hll>
				<hll><line>231</line><src>    rcca_inhibit_t rcca;</src></hll>
				<hll><line>232</line><src>    warning_t warning;</src></hll>
				<hll><line>233</line><src>};</src></hll>
				<hll><line>234</line><src></src></hll>
				<hll><line>235</line><src></src></hll>
				<hll><line>236</line><src>/* Voltage enum */</src></hll>
				<hll><line>237</line><src>enum {</src></hll>
				<hll><line>238</line><src>    VOL_IGN,</src></hll>
				<hll><line>239</line><src>    VOL_IGN_FLAG,</src></hll>
				<hll><line>240</line><src>    VOL_BAT,</src></hll>
				<hll><line>241</line><src>    VOL_BUCK5P0,</src></hll>
				<hll><line>242</line><src>    VOL_PMIC5P0,</src></hll>
				<hll><line>243</line><src>    VOL_PMIC3P3,</src></hll>
				<hll><line>244</line><src>    VOL_PMIC1P25,</src></hll>
				<hll><line>245</line><src>    VOL_BUCKPG5P0,</src></hll>
				<hll><line>246</line><src>    VOL_GRP_NUM</src></hll>
				<hll><line>247</line><src>};</src></hll>
				<hll><line>248</line><src></src></hll>
				<hll><line>249</line><src>/* Message type definition */</src></hll>
				<hll><line>250</line><src>enum msg_type {</src></hll>
				<hll><line>251</line><src>    CHASSIS_0,</src></hll>
				<hll><line>252</line><src>    CHASSIS_1,</src></hll>
				<hll><line>253</line><src>    A_FR_CMR_0,</src></hll>
				<hll><line>254</line><src>    A_FR_RDR_0,</src></hll>
				<hll><line>255</line><src>    A_FR_RDR_1,</src></hll>
				<hll><line>256</line><src>    A_FR_C_RDR_0,</src></hll>
				<hll><line>257</line><src>    A_FR_C_RDR_1,</src></hll>
				<hll><line>258</line><src>    A_FR_CMR_1,</src></hll>
				<hll><line>259</line><src>    A_FR_CMR_2,     </src></hll>
				<hll><line>260</line><src>    MSG_GRP_NUM,</src></hll>
				<hll><line>261</line><src>};</src></hll>
				<hll><line>262</line><src></src></hll>
				<hll><line>263</line><src>/* Chassis CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>264</line><src>enum chassis_0_msgs {</src></hll>
				<hll><line>265</line><src>        ABS_ESC_01_10ms_POS,</src></hll>
				<hll><line>266</line><src>    BCM_02_200ms_POS,</src></hll>
				<hll><line>267</line><src>        BCM_10_200ms_POS,</src></hll>
				<hll><line>268</line><src>        CLU_01_20ms_POS,</src></hll>
				<hll><line>269</line><src>        CLU_02_100ms_POS,</src></hll>
				<hll><line>270</line><src>#if VEH_TYPE == NORMAL</src></hll>
				<hll><line>271</line><src>        EMS_01_10ms_POS,</src></hll>
				<hll><line>272</line><src>        EMS_02_10ms_POS,</src></hll>
				<hll><line>273</line><src>    EMS_03_10ms_POS,</src></hll>
				<hll><line>274</line><src>    EMS_05_100ms_POS,</src></hll>
				<hll><line>275</line><src>    EMS_08_100ms_POS,</src></hll>
				<hll><line>276</line><src>    TCU_01_10ms_POS,</src></hll>
				<hll><line>277</line><src>#elif VEH_TYPE == EV</src></hll>
				<hll><line>278</line><src>    VCU_01_10ms_POS,</src></hll>
				<hll><line>279</line><src>    VCU_03_100ms_POS,</src></hll>
				<hll><line>280</line><src>#endif</src></hll>
				<hll><line>281</line><src>        ESC_01_10ms_POS,</src></hll>
				<hll><line>282</line><src>        ESC_03_20ms_POS,</src></hll>
				<hll><line>283</line><src>    HOD_01_100ms_POS,</src></hll>
				<hll><line>284</line><src>        HU_CLU_PE_05_POS,</src></hll>
				<hll><line>285</line><src>        HU_GW_PE_01_POS,</src></hll>
				<hll><line>286</line><src>        HU_MON_PE_01_POS,</src></hll>
				<hll><line>287</line><src>    HU_NAVI_V2_POS_PE_POS,</src></hll>
				<hll><line>288</line><src>        ICSC_02_100ms_POS,</src></hll>
				<hll><line>289</line><src>    ICU_02_200ms_POS,</src></hll>
				<hll><line>290</line><src>        ICU_04_200ms_POS,</src></hll>
				<hll><line>291</line><src>        ICU_06_200ms_POS,</src></hll>
				<hll><line>292</line><src>        ICU_07_200ms_POS,</src></hll>
				<hll><line>293</line><src>        MDPS_01_10ms_POS,</src></hll>
				<hll><line>294</line><src>    MFSW_01_200ms_POS,</src></hll>
				<hll><line>295</line><src>        SAS_01_10ms_POS,</src></hll>
				<hll><line>296</line><src>    SBCM_AST_03_200ms_POS,</src></hll>
				<hll><line>297</line><src>        SBCM_DRV_02_200ms_POS,</src></hll>
				<hll><line>298</line><src>        SWRC_03_20ms_POS,</src></hll>
				<hll><line>299</line><src>        WHL_01_10ms_POS,</src></hll>
				<hll><line>300</line><src>        IMU_01_10ms_POS,</src></hll>
				<hll><line>301</line><src>        CHASSIS_0_NUM</src></hll>
				<hll><line>302</line><src>};</src></hll>
				<hll><line>303</line><src>extern char compiler_assert_CHASSIS_0_NUM_exceed_32[(CHASSIS_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>304</line><src></src></hll>
				<hll><line>305</line><src>/* Chassis CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>306</line><src>enum chassis_1_msgs {</src></hll>
				<hll><line>307</line><src>    ADAS_PRK_21_20ms_POS,</src></hll>
				<hll><line>308</line><src>        BCM_09_200ms_POS,</src></hll>
				<hll><line>309</line><src>    CLU_11_00ms_POS,</src></hll>
				<hll><line>310</line><src>    CTM_01_200ms_POS,</src></hll>
				<hll><line>311</line><src>    FR_CMR_02_100ms_POS,</src></hll>
				<hll><line>312</line><src>        HU_NAVI_V2_META_E_POS,  </src></hll>
				<hll><line>313</line><src>        HU_NAVI_V2_PROLONG_E_POS,</src></hll>
				<hll><line>314</line><src>        HU_NAVI_V2_PROSHORT_E_00_POS,</src></hll>
				<hll><line>315</line><src>        HU_NAVI_V2_PROSHORT_SUB_E_POS,</src></hll>
				<hll><line>316</line><src>        HU_NAVI_V2_SEG_E_POS,</src></hll>
				<hll><line>317</line><src>        HU_NAVI_V2_SEG_SUB_E_POS,</src></hll>
				<hll><line>318</line><src>        HU_NAVI_V2_STUB_E_POS,</src></hll>
				<hll><line>319</line><src>#if HU_USM == NOT_APPLIED</src></hll>
				<hll><line>320</line><src>    CLU_04_00ms_POS,</src></hll>
				<hll><line>321</line><src>    CLU_12_00ms_POS,</src></hll>
				<hll><line>322</line><src>    CLU_13_00ms_POS,</src></hll>
				<hll><line>323</line><src>#elif HU_USM == APPLIED</src></hll>
				<hll><line>324</line><src>        HU_USM_E_01_POS,</src></hll>
				<hll><line>325</line><src>        HU_USM_E_02_POS,</src></hll>
				<hll><line>326</line><src>        HU_USM_E_04_POS,</src></hll>
				<hll><line>327</line><src>        HU_USM_E_08_POS,</src></hll>
				<hll><line>328</line><src>#endif</src></hll>
				<hll><line>329</line><src>    MFSW_02_200ms_POS,</src></hll>
				<hll><line>330</line><src>    RR_C_RDR_03_50ms_POS,</src></hll>
				<hll><line>331</line><src>    SBCM_AST_02_200ms_POS,</src></hll>
				<hll><line>332</line><src>        SBCM_DRV_01_200ms_POS,</src></hll>
				<hll><line>333</line><src>        SBCM_RL_01_200ms_POS,</src></hll>
				<hll><line>334</line><src>        SBCM_RR_01_200ms_POS,</src></hll>
				<hll><line>335</line><src>        ICU_08_200ms_POS,</src></hll>
				<hll><line>336</line><src>        IEB_01_10ms_POS,</src></hll>
				<hll><line>337</line><src>        CHASSIS_1_NUM</src></hll>
				<hll><line>338</line><src>};</src></hll>
				<hll><line>339</line><src>extern char compiler_assert_CHASSIS_1_NUM_exceed_32[(CHASSIS_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>340</line><src></src></hll>
				<hll><line>341</line><src>/* Front Camera CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>342</line><src>enum l_fr_cmr_0_msgs {</src></hll>
				<hll><line>343</line><src>    A_FR_CMR_Ctrl_01_10ms_POS,</src></hll>
				<hll><line>344</line><src>        A_FR_CMR_Genrl_01_30ms_POS,</src></hll>
				<hll><line>345</line><src>        A_FR_CMR_Ln_01_50ms_POS,</src></hll>
				<hll><line>346</line><src>        A_FR_CMR_Ln_02_50ms_POS,</src></hll>
				<hll><line>347</line><src>        A_FR_CMR_Ln_03_50ms_POS,</src></hll>
				<hll><line>348</line><src>    A_FR_CMR_Obj_01_30ms_POS,</src></hll>
				<hll><line>349</line><src>        A_FR_CMR_Obj_02_30ms_POS,</src></hll>
				<hll><line>350</line><src>        A_FR_CMR_Obj_03_30ms_POS,</src></hll>
				<hll><line>351</line><src>        A_FR_CMR_Obj_04_30ms_POS,</src></hll>
				<hll><line>352</line><src>        A_FR_CMR_Obj_05_30ms_POS,</src></hll>
				<hll><line>353</line><src>        A_FR_CMR_Obj_06_30ms_POS,</src></hll>
				<hll><line>354</line><src>        A_FR_CMR_Obj_07_30ms_POS,</src></hll>
				<hll><line>355</line><src>        A_FR_CMR_Obj_08_30ms_POS,</src></hll>
				<hll><line>356</line><src>        A_FR_CMR_Obj_09_30ms_POS,</src></hll>
				<hll><line>357</line><src>        A_FR_CMR_Obj_10_30ms_POS,</src></hll>
				<hll><line>358</line><src>        A_FR_CMR_Obj_11_30ms_POS,</src></hll>
				<hll><line>359</line><src>        A_FR_CMR_Obj_12_30ms_POS,</src></hll>
				<hll><line>360</line><src>        A_FR_CMR_Obj_13_30ms_POS,</src></hll>
				<hll><line>361</line><src>        A_FR_CMR_Obj_14_30ms_POS,</src></hll>
				<hll><line>362</line><src>        A_FR_CMR_Obj_15_30ms_POS,</src></hll>
				<hll><line>363</line><src>        A_FR_CMR_Obj_16_30ms_POS,</src></hll>
				<hll><line>364</line><src>        A_FR_CMR_Obj_17_30ms_POS,</src></hll>
				<hll><line>365</line><src>        A_FR_CMR_Obj_18_30ms_POS,</src></hll>
				<hll><line>366</line><src>        A_FR_CMR_Obj_19_30ms_POS,</src></hll>
				<hll><line>367</line><src>        A_FR_CMR_Obj_20_30ms_POS,</src></hll>
				<hll><line>368</line><src>    A_FR_CMR_FS_01_30ms_POS,</src></hll>
				<hll><line>369</line><src>        A_FR_CMR_FS_02_30ms_POS,</src></hll>
				<hll><line>370</line><src>        A_FR_CMR_FS_03_30ms_POS,</src></hll>
				<hll><line>371</line><src>        A_FR_CMR_FS_04_30ms_POS,</src></hll>
				<hll><line>372</line><src>        A_FR_CMR_FS_05_30ms_POS,</src></hll>
				<hll><line>373</line><src>        A_FR_CMR_FS_06_30ms_POS,</src></hll>
				<hll><line>374</line><src>    A_FR_CMR_FS_07_30ms_POS,</src></hll>
				<hll><line>375</line><src>    A_FR_CMR_0_NUM,</src></hll>
				<hll><line>376</line><src>};</src></hll>
				<hll><line>377</line><src>extern char compiler_assert_A_FR_CMR_0_NUM_exceed_32[(A_FR_CMR_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>378</line><src></src></hll>
				<hll><line>379</line><src>enum l_fr_cmr_1_msgs {    </src></hll>
				<hll><line>380</line><src>    A_FR_CMR_FS_08_30ms_POS,</src></hll>
				<hll><line>381</line><src>        A_FR_CMR_FS_09_30ms_POS,</src></hll>
				<hll><line>382</line><src>        A_FR_CMR_FS_10_30ms_POS,</src></hll>
				<hll><line>383</line><src>        A_FR_CMR_FS_11_30ms_POS,</src></hll>
				<hll><line>384</line><src>        A_FR_CMR_FS_12_30ms_POS,</src></hll>
				<hll><line>385</line><src>        A_FR_CMR_FS_13_30ms_POS,</src></hll>
				<hll><line>386</line><src>        A_FR_CMR_FS_14_30ms_POS,</src></hll>
				<hll><line>387</line><src>        A_FR_CMR_FS_15_30ms_POS,</src></hll>
				<hll><line>388</line><src>        A_FR_CMR_FS_16_30ms_POS,</src></hll>
				<hll><line>389</line><src>        A_FR_CMR_FS_17_30ms_POS,</src></hll>
				<hll><line>390</line><src>        A_FR_CMR_FS_18_30ms_POS,</src></hll>
				<hll><line>391</line><src>        A_FR_CMR_FS_19_30ms_POS,</src></hll>
				<hll><line>392</line><src>        A_FR_CMR_FS_20_30ms_POS,</src></hll>
				<hll><line>393</line><src>        A_FR_CMR_FS_21_30ms_POS,</src></hll>
				<hll><line>394</line><src>        A_FR_CMR_FS_22_30ms_POS,</src></hll>
				<hll><line>395</line><src>        A_FR_CMR_FS_23_30ms_POS,</src></hll>
				<hll><line>396</line><src>        A_FR_CMR_FS_24_30ms_POS,    </src></hll>
				<hll><line>397</line><src>    A_FR_CMR_1_NUM,</src></hll>
				<hll><line>398</line><src>};</src></hll>
				<hll><line>399</line><src>extern char compiler_assert_A_FR_CMR_1_NUM_exceed_32[(A_FR_CMR_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>400</line><src></src></hll>
				<hll><line>401</line><src>enum l_fr_cmr_2_msgs {</src></hll>
				<hll><line>402</line><src>    A_FR_CMR_Ctrl_02_20ms_POS,</src></hll>
				<hll><line>403</line><src>        A_FR_CMR_CA_01_30ms_POS,        </src></hll>
				<hll><line>404</line><src>        A_FR_CMR_CA_02_30ms_POS,</src></hll>
				<hll><line>405</line><src>    A_FR_CMR_CA_03_30ms_POS,</src></hll>
				<hll><line>406</line><src>    A_FR_CMR_CA_04_30ms_POS,</src></hll>
				<hll><line>407</line><src>    A_FR_CMR_HZ_01_30ms_POS,</src></hll>
				<hll><line>408</line><src>    A_FR_CMR_HZ_02_30ms_POS,</src></hll>
				<hll><line>409</line><src>    A_FR_CMR_HZ_03_30ms_POS,</src></hll>
				<hll><line>410</line><src>    A_FR_CMR_RdEdg_01_50ms_POS,</src></hll>
				<hll><line>411</line><src>    A_FR_CMR_RdEdg_02_50ms_POS,</src></hll>
				<hll><line>412</line><src>    A_FR_CMR_RdMrk_01_50ms_POS,</src></hll>
				<hll><line>413</line><src>    A_FR_CMR_RdMrk_02_50ms_POS,</src></hll>
				<hll><line>414</line><src>    A_FR_CMR_RdMrk_03_50ms_POS,</src></hll>
				<hll><line>415</line><src>    A_FR_CMR_2_NUM,</src></hll>
				<hll><line>416</line><src>};</src></hll>
				<hll><line>417</line><src>extern char compiler_assert_A_FR_CMR_2_NUM_exceed_32[(A_FR_CMR_2_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>418</line><src></src></hll>
				<hll><line>419</line><src>/* Front Radar CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>420</line><src></src></hll>
				<hll><line>421</line><src>enum l_fr_rdr_0_msgs {</src></hll>
				<hll><line>422</line><src>    A_FR_RDR_Genrl_01_50ms_POS,</src></hll>
				<hll><line>423</line><src>        A_FR_RDR_Genrl_02_50ms_POS,</src></hll>
				<hll><line>424</line><src>    A_FR_RDR_ODM_01_50ms_POS,</src></hll>
				<hll><line>425</line><src>    A_FR_RDR_Obj_01_50ms_POS,</src></hll>
				<hll><line>426</line><src>        A_FR_RDR_Obj_02_50ms_POS,</src></hll>
				<hll><line>427</line><src>        A_FR_RDR_Obj_03_50ms_POS,</src></hll>
				<hll><line>428</line><src>        A_FR_RDR_Obj_04_50ms_POS,</src></hll>
				<hll><line>429</line><src>        A_FR_RDR_Obj_05_50ms_POS,</src></hll>
				<hll><line>430</line><src>        A_FR_RDR_Obj_06_50ms_POS,</src></hll>
				<hll><line>431</line><src>        A_FR_RDR_Obj_07_50ms_POS,</src></hll>
				<hll><line>432</line><src>        A_FR_RDR_Obj_08_50ms_POS,</src></hll>
				<hll><line>433</line><src>        A_FR_RDR_Obj_09_50ms_POS,</src></hll>
				<hll><line>434</line><src>        A_FR_RDR_Obj_10_50ms_POS,</src></hll>
				<hll><line>435</line><src>        A_FR_RDR_Obj_11_50ms_POS,</src></hll>
				<hll><line>436</line><src>        A_FR_RDR_Obj_12_50ms_POS,</src></hll>
				<hll><line>437</line><src>        A_FR_RDR_Obj_13_50ms_POS,</src></hll>
				<hll><line>438</line><src>        A_FR_RDR_Obj_14_50ms_POS,</src></hll>
				<hll><line>439</line><src>        A_FR_RDR_Obj_15_50ms_POS,</src></hll>
				<hll><line>440</line><src>        A_FR_RDR_Obj_16_50ms_POS,</src></hll>
				<hll><line>441</line><src>        A_FR_RDR_Obj_17_50ms_POS,</src></hll>
				<hll><line>442</line><src>        A_FR_RDR_Obj_18_50ms_POS,</src></hll>
				<hll><line>443</line><src>        A_FR_RDR_Obj_19_50ms_POS,</src></hll>
				<hll><line>444</line><src>        A_FR_RDR_Obj_20_50ms_POS,</src></hll>
				<hll><line>445</line><src>        A_FR_RDR_Obj_21_50ms_POS,</src></hll>
				<hll><line>446</line><src>        A_FR_RDR_Obj_22_50ms_POS,</src></hll>
				<hll><line>447</line><src>        A_FR_RDR_Obj_23_50ms_POS,</src></hll>
				<hll><line>448</line><src>        A_FR_RDR_Obj_24_50ms_POS,</src></hll>
				<hll><line>449</line><src>        A_FR_RDR_Obj_25_50ms_POS,</src></hll>
				<hll><line>450</line><src>        A_FR_RDR_Obj_26_50ms_POS,</src></hll>
				<hll><line>451</line><src>        A_FR_RDR_Obj_27_50ms_POS,</src></hll>
				<hll><line>452</line><src>        A_FR_RDR_Obj_28_50ms_POS,</src></hll>
				<hll><line>453</line><src>        A_FR_RDR_Obj_29_50ms_POS,</src></hll>
				<hll><line>454</line><src>    A_FR_RDR_0_NUM,</src></hll>
				<hll><line>455</line><src>};</src></hll>
				<hll><line>456</line><src>extern char compiler_assert_A_FR_RDR_0_NUM_exceed_32[(A_FR_RDR_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>457</line><src></src></hll>
				<hll><line>458</line><src>enum l_fr_rdr_1_msgs {</src></hll>
				<hll><line>459</line><src>    A_FR_RDR_Obj_30_50ms_POS,</src></hll>
				<hll><line>460</line><src>        A_FR_RDR_Obj_31_50ms_POS,</src></hll>
				<hll><line>461</line><src>        A_FR_RDR_Obj_32_50ms_POS,</src></hll>
				<hll><line>462</line><src>    A_FR_RDR_FS_01_50ms_POS,</src></hll>
				<hll><line>463</line><src>        A_FR_RDR_FS_02_50ms_POS,</src></hll>
				<hll><line>464</line><src>        A_FR_RDR_FS_03_50ms_POS,</src></hll>
				<hll><line>465</line><src>        A_FR_RDR_FS_04_50ms_POS,</src></hll>
				<hll><line>466</line><src>        A_FR_RDR_FS_05_50ms_POS,</src></hll>
				<hll><line>467</line><src>    A_FR_RDR_1_NUM,</src></hll>
				<hll><line>468</line><src>};</src></hll>
				<hll><line>469</line><src>extern char compiler_assert_A_FR_RDR_1_NUM_exceed_32[(A_FR_RDR_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>470</line><src></src></hll>
				<hll><line>471</line><src>/* Front Corner Radar CAN Time-out Flags Bit Position */</src></hll>
				<hll><line>472</line><src>enum l_fr_c_rdr_0_msgs {</src></hll>
				<hll><line>473</line><src>        A_FR_C_RDR_Genrl_01_50ms_POS,</src></hll>
				<hll><line>474</line><src>        A_FR_C_RDR_ODM_01_50ms_POS,</src></hll>
				<hll><line>475</line><src>        A_FR_C_RDR_Obj_01_50ms_POS,</src></hll>
				<hll><line>476</line><src>        A_FR_C_RDR_Obj_02_50ms_POS,</src></hll>
				<hll><line>477</line><src>        A_FR_C_RDR_Obj_03_50ms_POS,</src></hll>
				<hll><line>478</line><src>        A_FR_C_RDR_Obj_04_50ms_POS,</src></hll>
				<hll><line>479</line><src>        A_FR_C_RDR_Obj_05_50ms_POS,</src></hll>
				<hll><line>480</line><src>        A_FR_C_RDR_Obj_06_50ms_POS,</src></hll>
				<hll><line>481</line><src>        A_FR_C_RDR_Obj_07_50ms_POS,</src></hll>
				<hll><line>482</line><src>        A_FR_C_RDR_Obj_08_50ms_POS,</src></hll>
				<hll><line>483</line><src>        A_FR_C_RDR_Obj_09_50ms_POS,</src></hll>
				<hll><line>484</line><src>        A_FR_C_RDR_Obj_10_50ms_POS,</src></hll>
				<hll><line>485</line><src>        A_FR_C_RDR_Obj_11_50ms_POS,</src></hll>
				<hll><line>486</line><src>        A_FR_C_RDR_Obj_12_50ms_POS,</src></hll>
				<hll><line>487</line><src>        A_FR_C_RDR_Obj_13_50ms_POS,</src></hll>
				<hll><line>488</line><src>        A_FR_C_RDR_Obj_14_50ms_POS,</src></hll>
				<hll><line>489</line><src>        A_FR_C_RDR_Obj_15_50ms_POS,</src></hll>
				<hll><line>490</line><src>        A_FR_C_RDR_Obj_16_50ms_POS,</src></hll>
				<hll><line>491</line><src>        A_FR_C_RDR_Obj_17_50ms_POS,</src></hll>
				<hll><line>492</line><src>        A_FR_C_RDR_Obj_18_50ms_POS,</src></hll>
				<hll><line>493</line><src>        A_FR_C_RDR_Obj_19_50ms_POS,</src></hll>
				<hll><line>494</line><src>        A_FR_C_RDR_Obj_20_50ms_POS,</src></hll>
				<hll><line>495</line><src>        A_FR_C_RDR_Obj_21_50ms_POS,</src></hll>
				<hll><line>496</line><src>        A_FR_C_RDR_Obj_22_50ms_POS,</src></hll>
				<hll><line>497</line><src>        A_FR_C_RDR_Obj_23_50ms_POS,</src></hll>
				<hll><line>498</line><src>        A_FR_C_RDR_Obj_24_50ms_POS,</src></hll>
				<hll><line>499</line><src>        A_FR_C_RDR_Obj_25_50ms_POS,</src></hll>
				<hll><line>500</line><src>        A_FR_C_RDR_Obj_26_50ms_POS,</src></hll>
				<hll><line>501</line><src>        A_FR_C_RDR_Obj_27_50ms_POS,</src></hll>
				<hll><line>502</line><src>        A_FR_C_RDR_Obj_28_50ms_POS,</src></hll>
				<hll><line>503</line><src>        A_FR_C_RDR_Obj_29_50ms_POS,</src></hll>
				<hll><line>504</line><src>        A_FR_C_RDR_Obj_30_50ms_POS,</src></hll>
				<hll><line>505</line><src>    A_FR_C_RDR_0_NUM,</src></hll>
				<hll><line>506</line><src>};</src></hll>
				<hll><line>507</line><src>extern char compiler_assert_A_FR_C_RDR_0_NUM_exceed_32[(A_FR_C_RDR_0_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>508</line><src></src></hll>
				<hll><line>509</line><src>enum l_fr_c_rdr_1_msgs {</src></hll>
				<hll><line>510</line><src>        A_FR_C_RDR_FS_01_50ms_POS,</src></hll>
				<hll><line>511</line><src>        A_FR_C_RDR_FS_02_50ms_POS,</src></hll>
				<hll><line>512</line><src>        A_FR_C_RDR_FS_03_50ms_POS,</src></hll>
				<hll><line>513</line><src>        A_FR_C_RDR_FS_04_50ms_POS,</src></hll>
				<hll><line>514</line><src>        A_FR_C_RDR_FS_05_50ms_POS,</src></hll>
				<hll><line>515</line><src>        A_FR_C_RDR_FS_06_50ms_POS,</src></hll>
				<hll><line>516</line><src>        A_FR_C_RDR_FS_07_50ms_POS,</src></hll>
				<hll><line>517</line><src>        A_FR_C_RDR_FS_08_50ms_POS,</src></hll>
				<hll><line>518</line><src>        A_FR_C_RDR_FS_09_50ms_POS,</src></hll>
				<hll><line>519</line><src>        A_FR_C_RDR_FS_10_50ms_POS,</src></hll>
				<hll><line>520</line><src>        A_FR_C_RDR_FS_11_50ms_POS,</src></hll>
				<hll><line>521</line><src>        A_FR_C_RDR_FS_12_50ms_POS,</src></hll>
				<hll><line>522</line><src>        A_FR_C_RDR_FS_13_50ms_POS,</src></hll>
				<hll><line>523</line><src>        A_FR_C_RDR_FS_14_50ms_POS,</src></hll>
				<hll><line>524</line><src>        A_FR_C_RDR_FS_15_50ms_POS,</src></hll>
				<hll><line>525</line><src>        A_FR_C_RDR_FS_16_50ms_POS,</src></hll>
				<hll><line>526</line><src>        A_FR_C_RDR_Tkl_01_50ms_POS,</src></hll>
				<hll><line>527</line><src>        A_FR_C_RDR_Tkl_02_50ms_POS,</src></hll>
				<hll><line>528</line><src>        A_FR_C_RDR_Tkl_03_50ms_POS,</src></hll>
				<hll><line>529</line><src>        A_FR_C_RDR_Tkl_04_50ms_POS,</src></hll>
				<hll><line>530</line><src>        A_FR_C_RDR_Tkl_05_50ms_POS,</src></hll>
				<hll><line>531</line><src>        A_FR_C_RDR_Tkl_06_50ms_POS,</src></hll>
				<hll><line>532</line><src>        A_FR_C_RDR_Tkl_07_50ms_POS,</src></hll>
				<hll><line>533</line><src>        A_FR_C_RDR_Tkl_08_50ms_POS,</src></hll>
				<hll><line>534</line><src>        A_FR_C_RDR_Tkl_09_50ms_POS,</src></hll>
				<hll><line>535</line><src>        A_FR_C_RDR_Tkl_10_50ms_POS,</src></hll>
				<hll><line>536</line><src>        A_FR_C_RDR_Tkl_11_50ms_POS,</src></hll>
				<hll><line>537</line><src>        A_FR_C_RDR_Tkl_12_50ms_POS,</src></hll>
				<hll><line>538</line><src>        A_FR_C_RDR_Tkl_13_50ms_POS,</src></hll>
				<hll><line>539</line><src>        A_FR_C_RDR_Tkl_14_50ms_POS,</src></hll>
				<hll><line>540</line><src>        A_FR_C_RDR_Tkl_15_50ms_POS,</src></hll>
				<hll><line>541</line><src>    A_FR_C_RDR_1_NUM,</src></hll>
				<hll><line>542</line><src>};</src></hll>
				<hll><line>543</line><src>extern char compiler_assert_A_FR_C_RDR_1_NUM_exceed_32[(A_FR_C_RDR_1_NUM &gt; 32) ? (-1) : (1)];</src></hll>
				<hll><line>544</line><src></src></hll>
				<hll><line>545</line><src>/* Forcing Recover */</src></hll>
				<hll><line>546</line><src>enum {</src></hll>
				<hll><line>547</line><src>    RECOVER_GROUP_0,</src></hll>
				<hll><line>548</line><src>    RECOVER_GROUP_1,</src></hll>
				<hll><line>549</line><src>    RECOVER_GROUP_2,</src></hll>
				<hll><line>550</line><src>    RECOVER_GROUP_3,</src></hll>
				<hll><line>551</line><src>    RECOVER_GROUP_4,</src></hll>
				<hll><line>552</line><src>    RECOVER_GROUP_5,</src></hll>
				<hll><line>553</line><src>    RECOVER_GROUP_6,</src></hll>
				<hll><line>554</line><src>    RECOVER_GROUP_7,</src></hll>
				<hll><line>555</line><src>    RECOVER_GROUP_NUM,</src></hll>
				<hll><line>556</line><src>};</src></hll>
				<hll><line>557</line><src>extern uint8 recover_mask[RECOVER_GROUP_NUM];</src></hll>
				<hll><line>558</line><src></src></hll>
				<hll><line>559</line><src>/* Recover group 0 */</src></hll>
				<hll><line>560</line><src>enum {</src></hll>
				<hll><line>561</line><src>    VOL_HIGH,</src></hll>
				<hll><line>562</line><src>    VOL_LOW,</src></hll>
				<hll><line>563</line><src>    ECAN_BUSOFF,</src></hll>
				<hll><line>564</line><src>    ACAN1_BUSOFF,</src></hll>
				<hll><line>565</line><src>    ACAN2_BUSOFF,</src></hll>
				<hll><line>566</line><src>    GROUP_0_NUM,</src></hll>
				<hll><line>567</line><src>};</src></hll>
				<hll><line>568</line><src>extern char compiler_assert_GROUP_0_exceed_8[(GROUP_0_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>569</line><src></src></hll>
				<hll><line>570</line><src>/* Recover group 1 */</src></hll>
				<hll><line>571</line><src>enum {</src></hll>
				<hll><line>572</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>573</line><src>    ABS_ESC_TIMEOUT,</src></hll>
				<hll><line>574</line><src>    VCU_HCU_TIMEOUT,</src></hll>
				<hll><line>575</line><src>    BCM_TIMEOUT,</src></hll>
				<hll><line>576</line><src>    CLU_TIMEOUT,</src></hll>
				<hll><line>577</line><src>    EMS_TIMEOUT,</src></hll>
				<hll><line>578</line><src>    ESC_TIMEOUT,</src></hll>
				<hll><line>579</line><src>    HOD_TIMEOUT,</src></hll>
				<hll><line>580</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>581</line><src>    CGW1_TIMEOUT,</src></hll>
				<hll><line>582</line><src>    CGW2_TIMEOUT,</src></hll>
				<hll><line>583</line><src>    CGW8_TIMEOUT,</src></hll>
				<hll><line>584</line><src>    CGW_PC4_TIMEOUT,</src></hll>
				<hll><line>585</line><src>    CGW_PC5_TIMEOUT,</src></hll>
				<hll><line>586</line><src>    CLU11_TIMEOUT,</src></hll>
				<hll><line>587</line><src>    CLU13_TIMEOUT,</src></hll>
				<hll><line>588</line><src>    EMS12_TIMEOUT,</src></hll>
				<hll><line>589</line><src>#endif /* CCAN */</src></hll>
				<hll><line>590</line><src>    GROUP_1_NUM,</src></hll>
				<hll><line>591</line><src>};</src></hll>
				<hll><line>592</line><src>extern char compiler_assert_GROUP_1_exceed_8[(GROUP_1_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>593</line><src></src></hll>
				<hll><line>594</line><src>/* Recover group 2 */</src></hll>
				<hll><line>595</line><src>enum {</src></hll>
				<hll><line>596</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>597</line><src>    HU_CLU_PE_TIMEOUT,</src></hll>
				<hll><line>598</line><src>    HU_GW_PE_TIMEOUT,</src></hll>
				<hll><line>599</line><src>    HU_MON_PE_TIMEOUT,</src></hll>
				<hll><line>600</line><src>    HU_NAVI_V2_POS_PE_TIMEOUT,</src></hll>
				<hll><line>601</line><src>    ICSC_TIMEOUT,</src></hll>
				<hll><line>602</line><src>    ICU_TIMEOUT,</src></hll>
				<hll><line>603</line><src>    MDPS_TIMEOUT,</src></hll>
				<hll><line>604</line><src>    MFSW_TIMEOUT,</src></hll>
				<hll><line>605</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>606</line><src>    EMS16_TIMEOUT,</src></hll>
				<hll><line>607</line><src>    ESP12_TIMEOUT,</src></hll>
				<hll><line>608</line><src>    HU_CLU_PE_05_TIMEOUT,</src></hll>
				<hll><line>609</line><src>    HU_GW_PE_01_TIMEOUT,</src></hll>
				<hll><line>610</line><src>    HU_MON_PE_01_TIMEOUT,</src></hll>
				<hll><line>611</line><src>    MDPS11_TIMEOUT,</src></hll>
				<hll><line>612</line><src>    MDPS12_TIMEOUT,</src></hll>
				<hll><line>613</line><src>    NAVI_V2_POS_E_POS_TIMEOUT,</src></hll>
				<hll><line>614</line><src>#endif /* CCAN */</src></hll>
				<hll><line>615</line><src>    GROUP_2_NUM,</src></hll>
				<hll><line>616</line><src>};</src></hll>
				<hll><line>617</line><src>extern char compiler_assert_GROUP_2_exceed_8[(GROUP_2_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>618</line><src></src></hll>
				<hll><line>619</line><src>/* Recover group 3 */</src></hll>
				<hll><line>620</line><src>enum {</src></hll>
				<hll><line>621</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>622</line><src>    RR_C_RDR_TIMEOUT,</src></hll>
				<hll><line>623</line><src>    SAS_TIMEOUT,</src></hll>
				<hll><line>624</line><src>    SWRC_TIMEOUT,</src></hll>
				<hll><line>625</line><src>    TCU_TIMEOUT,</src></hll>
				<hll><line>626</line><src>    WHL_TIMEOUT,</src></hll>
				<hll><line>627</line><src>    YRS_TIMEOUT,</src></hll>
				<hll><line>628</line><src>    SBCM_TIMEOUT,</src></hll>
				<hll><line>629</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>630</line><src>    P_STS_TIMEOUT,</src></hll>
				<hll><line>631</line><src>    RR_C_RDR_02_TIMEOUT,</src></hll>
				<hll><line>632</line><src>    SAS11_TIMEOUT,</src></hll>
				<hll><line>633</line><src>    TCS11_TIMEOUT,</src></hll>
				<hll><line>634</line><src>    TCS13_TIMEOUT,</src></hll>
				<hll><line>635</line><src>    VSM11_TIMEOUT,</src></hll>
				<hll><line>636</line><src>    WHL_SPD11_TIMEOUT,</src></hll>
				<hll><line>637</line><src>#endif /* CCAN */</src></hll>
				<hll><line>638</line><src>    GROUP_3_NUM,</src></hll>
				<hll><line>639</line><src>};</src></hll>
				<hll><line>640</line><src>extern char compiler_assert_GROUP_3_exceed_8[(GROUP_3_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>641</line><src></src></hll>
				<hll><line>642</line><src>/* Recover group 4 */</src></hll>
				<hll><line>643</line><src>enum {</src></hll>
				<hll><line>644</line><src>    A_FR_CMR_TIMEOUT,</src></hll>
				<hll><line>645</line><src>    A_FR_RDR_TIMEOUT,</src></hll>
				<hll><line>646</line><src>    A_FR_C_RDR_TIMEOUT,</src></hll>
				<hll><line>647</line><src>    GROUP_4_NUM,</src></hll>
				<hll><line>648</line><src>};</src></hll>
				<hll><line>649</line><src>extern char compiler_assert_GROUP_4_exceed_8[(GROUP_4_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>650</line><src></src></hll>
				<hll><line>651</line><src>/* Recover group 5 */</src></hll>
				<hll><line>652</line><src>enum {</src></hll>
				<hll><line>653</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>654</line><src>    CLU_INVALID_SIGNAL,</src></hll>
				<hll><line>655</line><src>    ESC_INVALID_SIGNAL,</src></hll>
				<hll><line>656</line><src>    MDPS_INVALID_SIGNAL,</src></hll>
				<hll><line>657</line><src>    SAS_INVALID_SIGNAL,</src></hll>
				<hll><line>658</line><src>    EMS_INVALID_SIGNAL,</src></hll>
				<hll><line>659</line><src>    TCU_INVALID_SIGNAL,</src></hll>
				<hll><line>660</line><src>    YRS_INVALID_SIGNAL,</src></hll>
				<hll><line>661</line><src>    SWRC_INVALID_SIGNAL,</src></hll>
				<hll><line>662</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>663</line><src>    CGW_INVALID_SIGNAL,</src></hll>
				<hll><line>664</line><src>    CLU_INVALID_SIGNAL,</src></hll>
				<hll><line>665</line><src>    ESC_INVALID_SIGNAL,</src></hll>
				<hll><line>666</line><src>    MDPS_INVALID_SIGNAL,</src></hll>
				<hll><line>667</line><src>    SAS_INVALID_SIGNAL,</src></hll>
				<hll><line>668</line><src>    EMS_INVALID_SIGNAL,</src></hll>
				<hll><line>669</line><src>    TCU_INVALID_SIGNAL,</src></hll>
				<hll><line>670</line><src>    NAVI_INVALID_SIGNAL,</src></hll>
				<hll><line>671</line><src>#endif /* CCAN */</src></hll>
				<hll><line>672</line><src>    GROUP_5_NUM,</src></hll>
				<hll><line>673</line><src>};</src></hll>
				<hll><line>674</line><src>extern char compiler_assert_GROUP_5_exceed_8[(GROUP_5_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>675</line><src></src></hll>
				<hll><line>676</line><src>/* Recover group 6 */</src></hll>
				<hll><line>677</line><src>enum {</src></hll>
				<hll><line>678</line><src>#if CCAN == CANFD</src></hll>
				<hll><line>679</line><src>    VCU_HCU_INVALID_SIGNAL,</src></hll>
				<hll><line>680</line><src>    ICSC_INVALID_SIGNAL,</src></hll>
				<hll><line>681</line><src>    ICU_INVALID_SIGNAL,</src></hll>
				<hll><line>682</line><src>    NAVI_INVALID_SIGNAL,</src></hll>
				<hll><line>683</line><src>    FR_CMR_INVALID_SIGNAL,</src></hll>
				<hll><line>684</line><src>    FR_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>685</line><src>    FR_C_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>686</line><src>#elif CCAN == HSCAN</src></hll>
				<hll><line>687</line><src>    FR_CMR_INVALID_SIGNAL,</src></hll>
				<hll><line>688</line><src>    FR_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>689</line><src>    FR_C_RDR_INVALID_SIGNAL,</src></hll>
				<hll><line>690</line><src>    RESERVED2,</src></hll>
				<hll><line>691</line><src>    RESERVED3,</src></hll>
				<hll><line>692</line><src>    RESERVED4,</src></hll>
				<hll><line>693</line><src>    RESERVED5,</src></hll>
				<hll><line>694</line><src>    RESERVED6,</src></hll>
				<hll><line>695</line><src>#endif /* CCAN */</src></hll>
				<hll><line>696</line><src>    GROUP_6_NUM,</src></hll>
				<hll><line>697</line><src>};</src></hll>
				<hll><line>698</line><src>extern char compiler_assert_GROUP_6_exceed_8[(GROUP_6_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>699</line><src></src></hll>
				<hll><line>700</line><src>/* Recover group 7 */</src></hll>
				<hll><line>701</line><src>enum {</src></hll>
				<hll><line>702</line><src>    GROUP_7_NUM,</src></hll>
				<hll><line>703</line><src>};</src></hll>
				<hll><line>704</line><src>extern char compiler_assert_GROUP_7_exceed_8[(GROUP_7_NUM &gt; 8) ? (-1) : (1)];</src></hll>
				<hll><line>705</line><src></src></hll>
				<hll><line>706</line><src></src></hll>
				<hll><line>707</line><src>/* Failsafe */</src></hll>
				<hll><line>708</line><src>extern struct internal_error_info int_err_info;</src></hll>
				<hll><line>709</line><src>extern volatile struct reference_signal ref_sig;</src></hll>
				<hll><line>710</line><src>extern uint16 vol_grp[VOL_GRP_NUM];</src></hll>
				<hll><line>711</line><src>extern boolean internal_sw_fault;</src></hll>
				<hll><line>712</line><src>extern boolean internal_hw_fault;</src></hll>
				<hll><line>713</line><src>extern uint32 can_timeout_fault[MSG_GRP_NUM];</src></hll>
				<hll><line>714</line><src>extern boolean clear_dtc;</src></hll>
				<hll><line>715</line><src>extern uint8 Get_ADAS_DRV_FailInfoSta(void);</src></hll>
				<hll><line>716</line><src>extern uint8 Get_ADAS_DRV_CodingSta(void); </src></hll>
				<hll><line>717</line><src>extern uint8 Get_ADAS_DRV_ACANMonSta(void);</src></hll>
				<hll><line>718</line><src>extern uint8 Get_RadarFailureFlg(void);</src></hll>
				<hll><line>719</line><src>extern volatile boolean BSW_InitCompleted;</src></hll>
				<hll><line>720</line><src>extern uint8 rdr_fail_flag;</src></hll>
				<hll><line>721</line><src>extern sigerr_t fr_rdr[FR_RDR_ITEM_NUM];</src></hll>
				<hll><line>722</line><src></src></hll>
				<hll><line>723</line><src>void FS_Init(void);</src></hll>
				<hll><line>724</line><src>void FS_MasterLoop(void);</src></hll>
				<hll><line>725</line><src>void update_inhibit_info(struct inhibit_info new);</src></hll>
				<hll><line>726</line><src>void store_in_nvm(void);</src></hll>
				<hll><line>727</line><src>struct precondition *get_precond_ptr(void);</src></hll>
				<hll><line>728</line><src>struct inhibit_info *get_inhibit_ptr(void);</src></hll>
				<hll><line>729</line><src>boolean Get_NAVI_Option(void);</src></hll>
				<hll><line>730</line><src>boolean Get_HDA2_Option(void);</src></hll>
				<hll><line>731</line><src>boolean Get_BCA_Option(void);</src></hll>
				<hll><line>732</line><src>boolean Get_SEW_Option(void);</src></hll>
				<hll><line>733</line><src>boolean Get_RCCW_Option(void);</src></hll>
				<hll><line>734</line><src></src></hll>
				<hll><line>735</line><src></src></hll>
				<hll><line>736</line><src>static inline boolean is_timeout(uint8 msg_grp, uint8 pos)</src></hll>
				<hll><line>737</line><src>{</src></hll>
				<hll><cov>never</cov><line>738</line><src>    return !!(can_timeout_fault[msg_grp] &amp; BIT(pos));</src></hll>
				<asm><cov>never</cov><addr>P:800053C4</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053C8</addr><code>10302F19</code><mnemonic>ld.w      d15,[a2]0x70</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053DA</addr><code>29004091</code><mnemonic>movh.a    a2,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800053DE</addr><code>10302F19</code><mnemonic>ld.w      d15,[a2]0x70</mnemonic></asm>
				<asm><cov>never</cov><addr>P:8000546E</addr><code>49004091</code><mnemonic>movh.a    a4,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005472</addr><code>10304F19</code><mnemonic>ld.w      d15,[a4]0x70</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054B2</addr><code>F399FF61</code><mnemonic>fcall     0x80003BE4</mnemonic><comment>.cocofun_55</comment></asm>
			</mixed>
			<mixed module="\\Test\FS_InvalidSignal" srcpath="C:\Users\CSA_DEV\Documents\Working\Prost_v2.0\Workspace\Test\Target_SW\ASW\Failsafe\SWC_Failsafe.h" type="multiple">
				<hll><line>739</line><src>}</src></hll>
				<hll><line>740</line><src></src></hll>
				<hll><line>741</line><src>static inline boolean internal_error_occurred(void)</src></hll>
				<hll><line>742</line><src>{</src></hll>
				<hll><line>743</line><src>    return !!((int_err_info.hw_err_cnt &gt;= ERR_CNT_THR) || (int_err_info.sw_err_cnt &gt;= ERR_CNT_THR));</src></hll>
				<hll><line>744</line><src>}</src></hll>
				<hll><line>745</line><src></src></hll>
				<hll><line>746</line><src>static inline void external_wdg_enable(void)</src></hll>
				<hll><line>747</line><src>{</src></hll>
				<hll><line>748</line><src>    Dio_WriteChannel(DioConf_DioChannel_Dio_Port2_Pin4, 0U);</src></hll>
				<hll><line>749</line><src>}</src></hll>
				<hll><line>750</line><src></src></hll>
				<hll><line>751</line><src>/* SWC_ISR */</src></hll>
				<hll><line>752</line><src>extern volatile uint32 e2e_err_flags[MSG_GRP_NUM];</src></hll>
				<hll><line>753</line><src>extern volatile uint32 msg_received_flags[MSG_GRP_NUM]; </src></hll>
				<hll><line>754</line><src>extern volatile uint32 msg_received_buf[MSG_GRP_NUM];</src></hll>
				<hll><line>755</line><src></src></hll>
				<hll><line>756</line><src>static inline boolean is_updated(uint8 msg_grp, uint8 pos)</src></hll>
				<hll><line>757</line><src>{</src></hll>
				<hll><cov>never</cov><line>758</line><src>    return !!(msg_received_flags[msg_grp] &amp; BIT(pos));</src></hll>
				<asm><cov>never</cov><addr>P:800054F8</addr><code>F9004091</code><mnemonic>movh.a    a15,#0x9004</mnemonic></asm>
				<asm><cov>never</cov><addr>P:800054FE</addr><code>F03A</code><mnemonic>eq16      d15,d0,d15</mnemonic><comment>check_bit,d0,check_bit</comment></asm>
				<asm><cov>never</cov><addr>P:80005500</addr><code>2038F019</code><mnemonic>ld.w      d0,[a15]0xB8</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005504</addr><code>2000107B</code><mnemonic>movh      d2,#0x1</mnemonic></asm>
				<asm><cov>never</cov><addr>P:80005508</addr><code>2026</code><mnemonic>and16     d0,d2</mnemonic></asm>
			</mixed>
		</List.EXPORT>
	</listing>
</TRACE32>
